<Events startTimestamp="1599653169283" logVersion="1.0.0.202008151525">
  <Command __id="18" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:07:13 EDT 2020" starttimestamp="1599653169283" timestamp="63788" />
  <Command __id="19" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:07:13 EDT 2020" starttimestamp="1599653169283" timestamp="64093" />
  <Command __id="20" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:07:14 EDT 2020" starttimestamp="1599653169283" timestamp="64906" />
  <Command __id="21" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:07:14 EDT 2020" starttimestamp="1599653169283" timestamp="64962" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:06:09 EDT 2020" docASTNodeCount="556" docActiveCodeLength="3846" docExpressionCount="423" docLength="6781" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="588">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\IsInferredSafeTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
public class IsInferredSafeTest extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 100; // secs
	
	protected Class[] parameterTypes= {Integer.TYPE,Integer.TYPE,Integer.TYPE};
	protected Object[][] arguments={
		{1,1,1}
	};
	protected String methodName="isInferredSafe";
	
	
	protected Object[][] getArguments(){
		return arguments;		
	};
	protected Class[] getParameterTypes() {
		return parameterTypes;
	};

	public IsInferredSafeTest() {
	}

	
	protected String methodName() {
		return methodName;
	};
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = getParameterTypes();
		    Method aMethod = aUilityClass.getMethod(methodName(), aParameterTypes);
		    Object[][] anArguments = getArguments();
		    Object[] aResults;
		    int aNumSuccesses = 0;
//		    for (int anIndex = 0; anIndex < anArguments.length; anIndex++ ) {
//		    	Object[] anInputCombination = anArguments[anIndex];
//		    	Object anExpectedResult = aResults[anIndex];
//			    Boolean aRetVal =  (Boolean) BasicProjectExecution.timedInvoke(aUilityClass, aMethod, anInputCombination, TIME_OUT_MSECS);
//			    if (!anExpectedResult.equals(aRetVal )) {
//		    		System.out.println("Expected retVal with args " + Arrays.toString(anInputCombination) + " did not return " + anExpectedResult);
//			    } else {
//			    	aNumSuccesses++;
//			    }
//
//		    }
		    
		   return pass();

		} catch ( Throwable e) {
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="23" _type="Insert" date="Wed Sep 09 08:07:19 EDT 2020" docASTNodeCount="556" docActiveCodeLength="3850" docExpressionCount="423" docLength="6785" length="4" offset="2579" starttimestamp="1599653169283" timestamp="70552">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="27" _type="Insert" date="Wed Sep 09 08:07:21 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3851" docExpressionCount="418" docLength="6786" length="1" offset="2583" starttimestamp="1599653169283" timestamp="71789">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <Command __id="22" _type="MoveCaretCommand" caretOffset="361" date="Wed Sep 09 08:07:18 EDT 2020" docOffset="2579" starttimestamp="1599653169283" timestamp="69702" />
  <Command __id="24" _type="InsertStringCommand" date="Wed Sep 09 08:07:19 EDT 2020" starttimestamp="1599653169283" timestamp="70577" timestamp2="70577">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="25" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:07:19 EDT 2020" starttimestamp="1599653169283" timestamp="70633" />
  <Command __id="26" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:07:19 EDT 2020" starttimestamp="1599653169283" timestamp="70648" />
  <Command __id="28" _type="InsertStringCommand" date="Wed Sep 09 08:07:21 EDT 2020" starttimestamp="1599653169283" timestamp="71797" timestamp2="71797">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="30" _type="InsertStringCommand" date="Wed Sep 09 08:07:23 EDT 2020" starttimestamp="1599653169283" timestamp="74375" timestamp2="74375">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="32" _type="InsertStringCommand" date="Wed Sep 09 08:07:23 EDT 2020" starttimestamp="1599653169283" timestamp="74672" timestamp2="74672">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="34" _type="InsertStringCommand" date="Wed Sep 09 08:07:24 EDT 2020" starttimestamp="1599653169283" timestamp="74808" timestamp2="74808">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="36" _type="InsertStringCommand" date="Wed Sep 09 08:07:24 EDT 2020" starttimestamp="1599653169283" timestamp="75025" timestamp2="75025">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="38" _type="InsertStringCommand" date="Wed Sep 09 08:07:24 EDT 2020" starttimestamp="1599653169283" timestamp="75375" timestamp2="75375">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="40" _type="InsertStringCommand" date="Wed Sep 09 08:07:24 EDT 2020" starttimestamp="1599653169283" timestamp="75578" timestamp2="75578">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="42" _type="InsertStringCommand" date="Wed Sep 09 08:07:25 EDT 2020" starttimestamp="1599653169283" timestamp="75721" timestamp2="75721">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="44" _type="InsertStringCommand" date="Wed Sep 09 08:07:25 EDT 2020" starttimestamp="1599653169283" timestamp="76032" timestamp2="76032">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="46" _type="InsertStringCommand" date="Wed Sep 09 08:07:25 EDT 2020" starttimestamp="1599653169283" timestamp="76245" timestamp2="76245">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="48" _type="InsertStringCommand" date="Wed Sep 09 08:07:25 EDT 2020" starttimestamp="1599653169283" timestamp="76500" timestamp2="76500">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="50" _type="InsertStringCommand" date="Wed Sep 09 08:07:25 EDT 2020" starttimestamp="1599653169283" timestamp="76637" timestamp2="76637">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="52" _type="InsertStringCommand" date="Wed Sep 09 08:07:26 EDT 2020" starttimestamp="1599653169283" timestamp="77411" timestamp2="77411">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="54" _type="InsertStringCommand" date="Wed Sep 09 08:07:27 EDT 2020" starttimestamp="1599653169283" timestamp="77760" timestamp2="77760">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="56" _type="InsertStringCommand" date="Wed Sep 09 08:07:27 EDT 2020" starttimestamp="1599653169283" timestamp="77974" timestamp2="77974">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="57" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:07:28 EDT 2020" starttimestamp="1599653169283" timestamp="79439" />
  <Command __id="58" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:07:28 EDT 2020" starttimestamp="1599653169283" timestamp="79645" />
  <Command __id="59" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:07:30 EDT 2020" starttimestamp="1599653169283" timestamp="80726" />
  <Command __id="60" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:07:30 EDT 2020" starttimestamp="1599653169283" timestamp="80877" />
  <Command __id="61" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Wed Sep 09 08:07:30 EDT 2020" starttimestamp="1599653169283" timestamp="81332" />
  <Command __id="62" _type="MoveCaretCommand" caretOffset="361" date="Wed Sep 09 08:07:32 EDT 2020" docOffset="2579" starttimestamp="1599653169283" timestamp="82965" />
  <Command __id="64" _type="InsertStringCommand" date="Wed Sep 09 08:07:33 EDT 2020" starttimestamp="1599653169283" timestamp="83734" timestamp2="83734">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="65" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:07:33 EDT 2020" starttimestamp="1599653169283" timestamp="84559" />
  <Command __id="66" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:07:34 EDT 2020" starttimestamp="1599653169283" timestamp="84734" />
  <DocumentChange __id="29" _type="Insert" date="Wed Sep 09 08:07:23 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3852" docExpressionCount="418" docLength="6787" length="1" offset="2584" starttimestamp="1599653169283" timestamp="74367">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="31" _type="Insert" date="Wed Sep 09 08:07:23 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3853" docExpressionCount="418" docLength="6788" length="1" offset="2585" starttimestamp="1599653169283" timestamp="74667">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="33" _type="Insert" date="Wed Sep 09 08:07:24 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3854" docExpressionCount="418" docLength="6789" length="1" offset="2586" starttimestamp="1599653169283" timestamp="74802">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="35" _type="Insert" date="Wed Sep 09 08:07:24 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3855" docExpressionCount="418" docLength="6790" length="1" offset="2587" starttimestamp="1599653169283" timestamp="75018">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="37" _type="Insert" date="Wed Sep 09 08:07:24 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3856" docExpressionCount="418" docLength="6791" length="1" offset="2588" starttimestamp="1599653169283" timestamp="75370">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="39" _type="Insert" date="Wed Sep 09 08:07:24 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3857" docExpressionCount="418" docLength="6792" length="1" offset="2589" starttimestamp="1599653169283" timestamp="75572">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="41" _type="Insert" date="Wed Sep 09 08:07:24 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3858" docExpressionCount="418" docLength="6793" length="1" offset="2590" starttimestamp="1599653169283" timestamp="75715">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="43" _type="Insert" date="Wed Sep 09 08:07:25 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3859" docExpressionCount="418" docLength="6794" length="1" offset="2591" starttimestamp="1599653169283" timestamp="76026">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="45" _type="Insert" date="Wed Sep 09 08:07:25 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3860" docExpressionCount="418" docLength="6795" length="1" offset="2592" starttimestamp="1599653169283" timestamp="76240">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="47" _type="Insert" date="Wed Sep 09 08:07:25 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3861" docExpressionCount="418" docLength="6796" length="1" offset="2593" starttimestamp="1599653169283" timestamp="76494">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="49" _type="Insert" date="Wed Sep 09 08:07:25 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3862" docExpressionCount="418" docLength="6797" length="1" offset="2594" starttimestamp="1599653169283" timestamp="76631">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="51" _type="Insert" date="Wed Sep 09 08:07:26 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3863" docExpressionCount="418" docLength="6798" length="1" offset="2595" starttimestamp="1599653169283" timestamp="77405">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="53" _type="Insert" date="Wed Sep 09 08:07:27 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3864" docExpressionCount="418" docLength="6799" length="1" offset="2596" starttimestamp="1599653169283" timestamp="77752">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="55" _type="Insert" date="Wed Sep 09 08:07:27 EDT 2020" docASTNodeCount="551" docActiveCodeLength="3868" docExpressionCount="418" docLength="6803" length="4" offset="2597" starttimestamp="1599653169283" timestamp="77965">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="63" _type="Insert" date="Wed Sep 09 08:07:33 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3869" docExpressionCount="427" docLength="6804" length="1" offset="2579" starttimestamp="1599653169283" timestamp="83727">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="68" _type="Insert" date="Wed Sep 09 08:07:55 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3872" docExpressionCount="427" docLength="6807" length="3" offset="2607" starttimestamp="1599653169283" timestamp="105892">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="70" _type="Insert" date="Wed Sep 09 08:07:55 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3875" docExpressionCount="427" docLength="6810" length="3" offset="2610" starttimestamp="1599653169283" timestamp="106091">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="73" _type="Insert" date="Wed Sep 09 08:07:56 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3876" docExpressionCount="427" docLength="6811" length="1" offset="2610" starttimestamp="1599653169283" timestamp="107707">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="75" _type="Insert" date="Wed Sep 09 08:07:57 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3877" docExpressionCount="427" docLength="6812" length="1" offset="2611" starttimestamp="1599653169283" timestamp="107820">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="77" _type="Insert" date="Wed Sep 09 08:07:57 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3878" docExpressionCount="427" docLength="6813" length="1" offset="2612" starttimestamp="1599653169283" timestamp="107912">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="79" _type="Insert" date="Wed Sep 09 08:07:57 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3879" docExpressionCount="427" docLength="6814" length="1" offset="2613" starttimestamp="1599653169283" timestamp="108013">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81" _type="Insert" date="Wed Sep 09 08:07:57 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3880" docExpressionCount="427" docLength="6815" length="1" offset="2614" starttimestamp="1599653169283" timestamp="108167">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="83" _type="Insert" date="Wed Sep 09 08:07:57 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3881" docExpressionCount="427" docLength="6816" length="1" offset="2615" starttimestamp="1599653169283" timestamp="108374">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="85" _type="Insert" date="Wed Sep 09 08:07:57 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3882" docExpressionCount="427" docLength="6817" length="1" offset="2616" starttimestamp="1599653169283" timestamp="108672">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="87" _type="Insert" date="Wed Sep 09 08:07:58 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3883" docExpressionCount="427" docLength="6818" length="1" offset="2617" starttimestamp="1599653169283" timestamp="108818">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="89" _type="Insert" date="Wed Sep 09 08:07:58 EDT 2020" docASTNodeCount="561" docActiveCodeLength="3884" docExpressionCount="427" docLength="6819" length="1" offset="2618" starttimestamp="1599653169283" timestamp="108990">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="91" _type="Insert" date="Wed Sep 09 08:07:59 EDT 2020" docASTNodeCount="561" docActiveCodeLength="3885" docExpressionCount="427" docLength="6820" length="1" offset="2619" starttimestamp="1599653169283" timestamp="110203">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="93" _type="Insert" date="Wed Sep 09 08:08:02 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3886" docExpressionCount="427" docLength="6821" length="1" offset="2620" starttimestamp="1599653169283" timestamp="113588">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="95" _type="Insert" date="Wed Sep 09 08:08:02 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3887" docExpressionCount="427" docLength="6822" length="1" offset="2621" starttimestamp="1599653169283" timestamp="113685">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="97" _type="Insert" date="Wed Sep 09 08:08:03 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3888" docExpressionCount="427" docLength="6823" length="1" offset="2622" starttimestamp="1599653169283" timestamp="113843">
    <text><![CDATA[j]]></text>
  </DocumentChange>
  <DocumentChange __id="99" _type="Insert" date="Wed Sep 09 08:08:03 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3889" docExpressionCount="427" docLength="6824" length="1" offset="2623" starttimestamp="1599653169283" timestamp="113919">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="101" _type="Insert" date="Wed Sep 09 08:08:03 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3890" docExpressionCount="427" docLength="6825" length="1" offset="2624" starttimestamp="1599653169283" timestamp="114094">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="103" _type="Insert" date="Wed Sep 09 08:08:03 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3891" docExpressionCount="427" docLength="6826" length="1" offset="2625" starttimestamp="1599653169283" timestamp="114313">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="105" _type="Insert" date="Wed Sep 09 08:08:04 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3893" docExpressionCount="427" docLength="6828" length="2" offset="2626" starttimestamp="1599653169283" timestamp="115663">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="108" _type="Insert" date="Wed Sep 09 08:08:05 EDT 2020" docASTNodeCount="560" docActiveCodeLength="3894" docExpressionCount="427" docLength="6829" length="1" offset="2628" starttimestamp="1599653169283" timestamp="116186">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="67" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:07:54 EDT 2020" starttimestamp="1599653169283" timestamp="105447" />
  <Command __id="69" _type="InsertStringCommand" date="Wed Sep 09 08:07:55 EDT 2020" starttimestamp="1599653169283" timestamp="105921" timestamp2="105921">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="71" _type="InsertStringCommand" date="Wed Sep 09 08:07:55 EDT 2020" starttimestamp="1599653169283" timestamp="106101" timestamp2="106101">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="72" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:07:55 EDT 2020" starttimestamp="1599653169283" timestamp="106432" />
  <Command __id="74" _type="InsertStringCommand" date="Wed Sep 09 08:07:56 EDT 2020" starttimestamp="1599653169283" timestamp="107714" timestamp2="107714">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="76" _type="InsertStringCommand" date="Wed Sep 09 08:07:57 EDT 2020" starttimestamp="1599653169283" timestamp="107825" timestamp2="107825">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="78" _type="InsertStringCommand" date="Wed Sep 09 08:07:57 EDT 2020" starttimestamp="1599653169283" timestamp="107917" timestamp2="107917">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="80" _type="InsertStringCommand" date="Wed Sep 09 08:07:57 EDT 2020" starttimestamp="1599653169283" timestamp="108018" timestamp2="108018">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="82" _type="InsertStringCommand" date="Wed Sep 09 08:07:57 EDT 2020" starttimestamp="1599653169283" timestamp="108173" timestamp2="108173">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="84" _type="InsertStringCommand" date="Wed Sep 09 08:07:57 EDT 2020" starttimestamp="1599653169283" timestamp="108379" timestamp2="108379">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="86" _type="InsertStringCommand" date="Wed Sep 09 08:07:57 EDT 2020" starttimestamp="1599653169283" timestamp="108685" timestamp2="108685">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="88" _type="InsertStringCommand" date="Wed Sep 09 08:07:58 EDT 2020" starttimestamp="1599653169283" timestamp="108823" timestamp2="108823">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="90" _type="InsertStringCommand" date="Wed Sep 09 08:07:58 EDT 2020" starttimestamp="1599653169283" timestamp="108996" timestamp2="108996">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="92" _type="InsertStringCommand" date="Wed Sep 09 08:07:59 EDT 2020" starttimestamp="1599653169283" timestamp="110211" timestamp2="110211">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="94" _type="InsertStringCommand" date="Wed Sep 09 08:08:02 EDT 2020" starttimestamp="1599653169283" timestamp="113593" timestamp2="113593">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="96" _type="InsertStringCommand" date="Wed Sep 09 08:08:02 EDT 2020" starttimestamp="1599653169283" timestamp="113690" timestamp2="113690">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="98" _type="InsertStringCommand" date="Wed Sep 09 08:08:03 EDT 2020" starttimestamp="1599653169283" timestamp="113848" timestamp2="113848">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="100" _type="InsertStringCommand" date="Wed Sep 09 08:08:03 EDT 2020" starttimestamp="1599653169283" timestamp="113924" timestamp2="113924">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="102" _type="InsertStringCommand" date="Wed Sep 09 08:08:03 EDT 2020" starttimestamp="1599653169283" timestamp="114100" timestamp2="114100">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="104" _type="InsertStringCommand" date="Wed Sep 09 08:08:03 EDT 2020" starttimestamp="1599653169283" timestamp="114316" timestamp2="114316">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="106" _type="InsertStringCommand" date="Wed Sep 09 08:08:04 EDT 2020" starttimestamp="1599653169283" timestamp="115697" timestamp2="115697">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="107" _type="InsertStringCommand" date="Wed Sep 09 08:08:05 EDT 2020" starttimestamp="1599653169283" timestamp="115763" timestamp2="115763">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="109" _type="InsertStringCommand" date="Wed Sep 09 08:08:05 EDT 2020" starttimestamp="1599653169283" timestamp="116192" timestamp2="116192">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="111" _type="InsertStringCommand" date="Wed Sep 09 08:08:12 EDT 2020" starttimestamp="1599653169283" timestamp="123369" timestamp2="123369">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="110" _type="Insert" date="Wed Sep 09 08:08:12 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3895" docExpressionCount="429" docLength="6830" length="1" offset="2629" starttimestamp="1599653169283" timestamp="123363">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="117" _type="Insert" date="Wed Sep 09 08:08:16 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3896" docExpressionCount="429" docLength="6831" length="1" offset="2630" starttimestamp="1599653169283" timestamp="126769">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="119" _type="Insert" date="Wed Sep 09 08:08:16 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3897" docExpressionCount="429" docLength="6832" length="1" offset="2631" starttimestamp="1599653169283" timestamp="126904">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="121" _type="Insert" date="Wed Sep 09 08:08:16 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3898" docExpressionCount="429" docLength="6833" length="1" offset="2632" starttimestamp="1599653169283" timestamp="127058">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="123" _type="Insert" date="Wed Sep 09 08:08:16 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3899" docExpressionCount="429" docLength="6834" length="1" offset="2633" starttimestamp="1599653169283" timestamp="127137">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="125" _type="Insert" date="Wed Sep 09 08:08:16 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3900" docExpressionCount="429" docLength="6835" length="1" offset="2634" starttimestamp="1599653169283" timestamp="127297">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="127" _type="Insert" date="Wed Sep 09 08:08:16 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3901" docExpressionCount="429" docLength="6836" length="1" offset="2635" starttimestamp="1599653169283" timestamp="127385">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="129" _type="Insert" date="Wed Sep 09 08:08:18 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3903" docExpressionCount="429" docLength="6838" length="2" offset="2636" starttimestamp="1599653169283" timestamp="128758">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="131" _type="Delete" date="Wed Sep 09 08:08:18 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3902" docExpressionCount="429" docLength="6837" endLine="51" length="1" offset="2636" startLine="51" starttimestamp="1599653169283" timestamp="129238">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="132" _type="Delete" date="Wed Sep 09 08:08:18 EDT 2020" docASTNodeCount="567" docActiveCodeLength="3901" docExpressionCount="429" docLength="6836" endLine="51" length="1" offset="2636" startLine="51" starttimestamp="1599653169283" timestamp="129245">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="134" _type="Insert" date="Wed Sep 09 08:08:19 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3902" docExpressionCount="429" docLength="6837" length="1" offset="2636" starttimestamp="1599653169283" timestamp="130238">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="136" _type="Insert" date="Wed Sep 09 08:08:19 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3910" docExpressionCount="429" docLength="6845" length="8" offset="2637" starttimestamp="1599653169283" timestamp="130502">
    <text><![CDATA[
		
	}]]></text>
  </DocumentChange>
  <Command __id="112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:08:13 EDT 2020" starttimestamp="1599653169283" timestamp="123846" />
  <Command __id="113" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:08:14 EDT 2020" starttimestamp="1599653169283" timestamp="124721" />
  <Command __id="114" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:08:14 EDT 2020" starttimestamp="1599653169283" timestamp="125171" />
  <Command __id="115" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:08:14 EDT 2020" starttimestamp="1599653169283" timestamp="125440" />
  <Command __id="116" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:08:15 EDT 2020" starttimestamp="1599653169283" timestamp="126062" />
  <Command __id="118" _type="InsertStringCommand" date="Wed Sep 09 08:08:16 EDT 2020" starttimestamp="1599653169283" timestamp="126775" timestamp2="126775">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="120" _type="InsertStringCommand" date="Wed Sep 09 08:08:16 EDT 2020" starttimestamp="1599653169283" timestamp="126909" timestamp2="126909">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="122" _type="InsertStringCommand" date="Wed Sep 09 08:08:16 EDT 2020" starttimestamp="1599653169283" timestamp="127064" timestamp2="127064">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="124" _type="InsertStringCommand" date="Wed Sep 09 08:08:16 EDT 2020" starttimestamp="1599653169283" timestamp="127143" timestamp2="127143">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="126" _type="InsertStringCommand" date="Wed Sep 09 08:08:16 EDT 2020" starttimestamp="1599653169283" timestamp="127304" timestamp2="127304">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="128" _type="InsertStringCommand" date="Wed Sep 09 08:08:16 EDT 2020" starttimestamp="1599653169283" timestamp="127390" timestamp2="127390">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="130" _type="InsertStringCommand" date="Wed Sep 09 08:08:18 EDT 2020" starttimestamp="1599653169283" timestamp="128764" timestamp2="128764">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="133" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:08:18 EDT 2020" starttimestamp="1599653169283" timestamp="129248" />
  <Command __id="135" _type="InsertStringCommand" date="Wed Sep 09 08:08:19 EDT 2020" starttimestamp="1599653169283" timestamp="130246" timestamp2="130246">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="137" _type="InsertStringCommand" date="Wed Sep 09 08:08:19 EDT 2020" starttimestamp="1599653169283" timestamp="130511" timestamp2="130511">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="139" _type="InsertStringCommand" date="Wed Sep 09 08:08:24 EDT 2020" starttimestamp="1599653169283" timestamp="135006" timestamp2="135006">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Wed Sep 09 08:08:24 EDT 2020" starttimestamp="1599653169283" timestamp="135153" timestamp2="135153">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="143" _type="InsertStringCommand" date="Wed Sep 09 08:08:24 EDT 2020" starttimestamp="1599653169283" timestamp="135284" timestamp2="135284">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Wed Sep 09 08:08:24 EDT 2020" starttimestamp="1599653169283" timestamp="135343" timestamp2="135343">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="147" _type="InsertStringCommand" date="Wed Sep 09 08:08:24 EDT 2020" starttimestamp="1599653169283" timestamp="135636" timestamp2="135636">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="148" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:08:27 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="138346" />
  <Command __id="149" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:08:28 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="138887" />
  <Command __id="151" _type="InsertStringCommand" date="Wed Sep 09 08:08:28 EDT 2020" starttimestamp="1599653169283" timestamp="138906" timestamp2="138906">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="153" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:08:28 EDT 2020" starttimestamp="1599653169283" timestamp="138914" />
  <Command __id="154" _type="ShellCommand" date="Wed Sep 09 08:08:28 EDT 2020" starttimestamp="1599653169283" timestamp="139021" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="155" _type="ShellCommand" date="Wed Sep 09 08:08:29 EDT 2020" starttimestamp="1599653169283" timestamp="140246" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="138" _type="Insert" date="Wed Sep 09 08:08:24 EDT 2020" docASTNodeCount="571" docActiveCodeLength="3911" docExpressionCount="430" docLength="6846" length="1" offset="2641" starttimestamp="1599653169283" timestamp="134999">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="140" _type="Insert" date="Wed Sep 09 08:08:24 EDT 2020" docASTNodeCount="571" docActiveCodeLength="3912" docExpressionCount="430" docLength="6847" length="1" offset="2642" starttimestamp="1599653169283" timestamp="135147">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="142" _type="Insert" date="Wed Sep 09 08:08:24 EDT 2020" docASTNodeCount="571" docActiveCodeLength="3913" docExpressionCount="430" docLength="6848" length="1" offset="2643" starttimestamp="1599653169283" timestamp="135279">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="144" _type="Insert" date="Wed Sep 09 08:08:24 EDT 2020" docASTNodeCount="573" docActiveCodeLength="3914" docExpressionCount="432" docLength="6849" length="1" offset="2644" starttimestamp="1599653169283" timestamp="135339">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="146" _type="Insert" date="Wed Sep 09 08:08:24 EDT 2020" docASTNodeCount="573" docActiveCodeLength="3915" docExpressionCount="432" docLength="6850" length="1" offset="2645" starttimestamp="1599653169283" timestamp="135629">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="150" _type="Insert" date="Wed Sep 09 08:08:28 EDT 2020" docASTNodeCount="573" docActiveCodeLength="3919" docExpressionCount="432" docLength="6854" length="4" offset="2646" starttimestamp="1599653169283" timestamp="138894">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="152" _type="Delete" date="Wed Sep 09 08:08:28 EDT 2020" docASTNodeCount="573" docActiveCodeLength="3918" docExpressionCount="432" docLength="6853" endLine="53" length="1" offset="2649" startLine="53" starttimestamp="1599653169283" timestamp="138911">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="156" _type="MoveCaretCommand" caretOffset="428" date="Wed Sep 09 08:08:30 EDT 2020" docOffset="2646" starttimestamp="1599653169283" timestamp="141332" />
  <DocumentChange __id="157" _type="Delete" date="Wed Sep 09 08:08:31 EDT 2020" docASTNodeCount="573" docActiveCodeLength="3917" docExpressionCount="432" docLength="6852" endLine="52" length="1" offset="2645" startLine="52" starttimestamp="1599653169283" timestamp="142617">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="158" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:08:31 EDT 2020" starttimestamp="1599653169283" timestamp="142621" />
  <DocumentChange __id="159" _type="Insert" date="Wed Sep 09 08:08:32 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3918" docExpressionCount="429" docLength="6853" length="1" offset="2645" starttimestamp="1599653169283" timestamp="142867">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="160" _type="InsertStringCommand" date="Wed Sep 09 08:08:32 EDT 2020" starttimestamp="1599653169283" timestamp="142873" timestamp2="142873">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="161" _type="Insert" date="Wed Sep 09 08:08:32 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3922" docExpressionCount="429" docLength="6857" length="4" offset="2646" starttimestamp="1599653169283" timestamp="143127">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="162" _type="InsertStringCommand" date="Wed Sep 09 08:08:32 EDT 2020" starttimestamp="1599653169283" timestamp="143137" timestamp2="143137">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="163" _type="Insert" date="Wed Sep 09 08:08:33 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3923" docExpressionCount="429" docLength="6858" length="1" offset="2650" starttimestamp="1599653169283" timestamp="143840">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="164" _type="InsertStringCommand" date="Wed Sep 09 08:08:33 EDT 2020" starttimestamp="1599653169283" timestamp="143845" timestamp2="143845">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="165" _type="Insert" date="Wed Sep 09 08:08:33 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3924" docExpressionCount="429" docLength="6859" length="1" offset="2651" starttimestamp="1599653169283" timestamp="143972">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="166" _type="InsertStringCommand" date="Wed Sep 09 08:08:33 EDT 2020" starttimestamp="1599653169283" timestamp="143976" timestamp2="143976">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="167" _type="Insert" date="Wed Sep 09 08:08:33 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3925" docExpressionCount="429" docLength="6860" length="1" offset="2652" starttimestamp="1599653169283" timestamp="144060">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="168" _type="InsertStringCommand" date="Wed Sep 09 08:08:33 EDT 2020" starttimestamp="1599653169283" timestamp="144065" timestamp2="144065">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="169" _type="Insert" date="Wed Sep 09 08:08:33 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3926" docExpressionCount="429" docLength="6861" length="1" offset="2653" starttimestamp="1599653169283" timestamp="144123">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="170" _type="InsertStringCommand" date="Wed Sep 09 08:08:33 EDT 2020" starttimestamp="1599653169283" timestamp="144128" timestamp2="144128">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Wed Sep 09 08:08:33 EDT 2020" starttimestamp="1599653169283" timestamp="144235" timestamp2="144235">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="173" _type="MoveCaretCommand" caretOffset="447" date="Wed Sep 09 08:08:35 EDT 2020" docOffset="2665" starttimestamp="1599653169283" timestamp="146012" />
  <Command __id="174" _type="MoveCaretCommand" caretOffset="444" date="Wed Sep 09 08:08:35 EDT 2020" docOffset="2662" starttimestamp="1599653169283" timestamp="146424" />
  <Command __id="176" _type="InsertStringCommand" date="Wed Sep 09 08:08:36 EDT 2020" starttimestamp="1599653169283" timestamp="147006" timestamp2="147006">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:08:36 EDT 2020" starttimestamp="1599653169283" timestamp="147589" />
  <Command __id="178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:08:37 EDT 2020" starttimestamp="1599653169283" timestamp="147953" />
  <DocumentChange __id="171" _type="Insert" date="Wed Sep 09 08:08:33 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3927" docExpressionCount="429" docLength="6862" length="1" offset="2654" starttimestamp="1599653169283" timestamp="144231">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="175" _type="Insert" date="Wed Sep 09 08:08:36 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3928" docExpressionCount="429" docLength="6863" length="1" offset="2662" starttimestamp="1599653169283" timestamp="147001">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="181" _type="Insert" date="Wed Sep 09 08:08:40 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3931" docExpressionCount="429" docLength="6866" length="3" offset="2720" starttimestamp="1599653169283" timestamp="151042">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="184" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3932" docExpressionCount="429" docLength="6867" length="1" offset="2720" starttimestamp="1599653169283" timestamp="151789">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="186" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3933" docExpressionCount="429" docLength="6868" length="1" offset="2721" starttimestamp="1599653169283" timestamp="151940">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="188" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3934" docExpressionCount="429" docLength="6869" length="1" offset="2722" starttimestamp="1599653169283" timestamp="152042">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="190" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3935" docExpressionCount="429" docLength="6870" length="1" offset="2723" starttimestamp="1599653169283" timestamp="152134">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="192" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3936" docExpressionCount="429" docLength="6871" length="1" offset="2724" starttimestamp="1599653169283" timestamp="152292">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="194" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3937" docExpressionCount="429" docLength="6872" length="1" offset="2725" starttimestamp="1599653169283" timestamp="152466">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="196" _type="Insert" date="Wed Sep 09 08:08:41 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3938" docExpressionCount="429" docLength="6873" length="1" offset="2726" starttimestamp="1599653169283" timestamp="152651">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="198" _type="Insert" date="Wed Sep 09 08:08:42 EDT 2020" docASTNodeCount="569" docActiveCodeLength="3939" docExpressionCount="429" docLength="6874" length="1" offset="2727" starttimestamp="1599653169283" timestamp="152796">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="200" _type="Insert" date="Wed Sep 09 08:08:42 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3940" docExpressionCount="429" docLength="6875" length="1" offset="2728" starttimestamp="1599653169283" timestamp="152949">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="202" _type="Insert" date="Wed Sep 09 08:08:44 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3941" docExpressionCount="429" docLength="6876" length="1" offset="2729" starttimestamp="1599653169283" timestamp="155016">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="179" _type="SelectTextCommand" caretOffset="502" date="Wed Sep 09 08:08:38 EDT 2020" end="502" start="499" starttimestamp="1599653169283" timestamp="149396" />
  <Command __id="180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:08:39 EDT 2020" starttimestamp="1599653169283" timestamp="150158" />
  <Command __id="182" _type="InsertStringCommand" date="Wed Sep 09 08:08:40 EDT 2020" starttimestamp="1599653169283" timestamp="151049" timestamp2="151049">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:08:40 EDT 2020" starttimestamp="1599653169283" timestamp="151225" />
  <Command __id="185" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="151794" timestamp2="151794">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="187" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="151945" timestamp2="151945">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="189" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="152047" timestamp2="152047">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="191" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="152139" timestamp2="152139">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="193" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="152296" timestamp2="152296">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="195" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="152473" timestamp2="152473">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="197" _type="InsertStringCommand" date="Wed Sep 09 08:08:41 EDT 2020" starttimestamp="1599653169283" timestamp="152657" timestamp2="152657">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="199" _type="InsertStringCommand" date="Wed Sep 09 08:08:42 EDT 2020" starttimestamp="1599653169283" timestamp="152800" timestamp2="152800">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="201" _type="InsertStringCommand" date="Wed Sep 09 08:08:42 EDT 2020" starttimestamp="1599653169283" timestamp="152955" timestamp2="152955">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="203" _type="InsertStringCommand" date="Wed Sep 09 08:08:44 EDT 2020" starttimestamp="1599653169283" timestamp="155022" timestamp2="155022">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="205" _type="InsertStringCommand" date="Wed Sep 09 08:08:45 EDT 2020" starttimestamp="1599653169283" timestamp="156060" timestamp2="156060">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="207" _type="InsertStringCommand" date="Wed Sep 09 08:08:45 EDT 2020" starttimestamp="1599653169283" timestamp="156139" timestamp2="156139">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="209" _type="InsertStringCommand" date="Wed Sep 09 08:08:45 EDT 2020" starttimestamp="1599653169283" timestamp="156302" timestamp2="156302">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="211" _type="InsertStringCommand" date="Wed Sep 09 08:08:45 EDT 2020" starttimestamp="1599653169283" timestamp="156364" timestamp2="156364">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="213" _type="InsertStringCommand" date="Wed Sep 09 08:08:45 EDT 2020" starttimestamp="1599653169283" timestamp="156518" timestamp2="156518">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="215" _type="InsertStringCommand" date="Wed Sep 09 08:08:46 EDT 2020" starttimestamp="1599653169283" timestamp="156720" timestamp2="156720">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="217" _type="InsertStringCommand" date="Wed Sep 09 08:08:46 EDT 2020" starttimestamp="1599653169283" timestamp="157360" timestamp2="157360">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="218" _type="InsertStringCommand" date="Wed Sep 09 08:08:46 EDT 2020" starttimestamp="1599653169283" timestamp="157466" timestamp2="157466">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="220" _type="InsertStringCommand" date="Wed Sep 09 08:08:47 EDT 2020" starttimestamp="1599653169283" timestamp="157854" timestamp2="157854">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="222" _type="InsertStringCommand" date="Wed Sep 09 08:08:47 EDT 2020" starttimestamp="1599653169283" timestamp="158047" timestamp2="158047">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="204" _type="Insert" date="Wed Sep 09 08:08:45 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3942" docExpressionCount="429" docLength="6877" length="1" offset="2730" starttimestamp="1599653169283" timestamp="156054">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="206" _type="Insert" date="Wed Sep 09 08:08:45 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3943" docExpressionCount="429" docLength="6878" length="1" offset="2731" starttimestamp="1599653169283" timestamp="156134">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="208" _type="Insert" date="Wed Sep 09 08:08:45 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3944" docExpressionCount="429" docLength="6879" length="1" offset="2732" starttimestamp="1599653169283" timestamp="156297">
    <text><![CDATA[j]]></text>
  </DocumentChange>
  <DocumentChange __id="210" _type="Insert" date="Wed Sep 09 08:08:45 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3945" docExpressionCount="429" docLength="6880" length="1" offset="2733" starttimestamp="1599653169283" timestamp="156360">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="212" _type="Insert" date="Wed Sep 09 08:08:45 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3946" docExpressionCount="429" docLength="6881" length="1" offset="2734" starttimestamp="1599653169283" timestamp="156512">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="214" _type="Insert" date="Wed Sep 09 08:08:45 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3947" docExpressionCount="429" docLength="6882" length="1" offset="2735" starttimestamp="1599653169283" timestamp="156715">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="216" _type="Insert" date="Wed Sep 09 08:08:46 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3949" docExpressionCount="429" docLength="6884" length="2" offset="2736" starttimestamp="1599653169283" timestamp="157354">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="219" _type="Insert" date="Wed Sep 09 08:08:47 EDT 2020" docASTNodeCount="570" docActiveCodeLength="3950" docExpressionCount="429" docLength="6885" length="1" offset="2738" starttimestamp="1599653169283" timestamp="157847">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="221" _type="Insert" date="Wed Sep 09 08:08:47 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3951" docExpressionCount="431" docLength="6886" length="1" offset="2739" starttimestamp="1599653169283" timestamp="158043">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="223" _type="Insert" date="Wed Sep 09 08:08:47 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3952" docExpressionCount="431" docLength="6887" length="1" offset="2740" starttimestamp="1599653169283" timestamp="158213">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="225" _type="Insert" date="Wed Sep 09 08:08:47 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3953" docExpressionCount="431" docLength="6888" length="1" offset="2741" starttimestamp="1599653169283" timestamp="158344">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="227" _type="Insert" date="Wed Sep 09 08:08:47 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3954" docExpressionCount="431" docLength="6889" length="1" offset="2742" starttimestamp="1599653169283" timestamp="158598">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="229" _type="Insert" date="Wed Sep 09 08:08:48 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3955" docExpressionCount="431" docLength="6890" length="1" offset="2743" starttimestamp="1599653169283" timestamp="158761">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="231" _type="Insert" date="Wed Sep 09 08:08:48 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3956" docExpressionCount="431" docLength="6891" length="1" offset="2744" starttimestamp="1599653169283" timestamp="158936">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="233" _type="Insert" date="Wed Sep 09 08:08:48 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3957" docExpressionCount="431" docLength="6892" length="1" offset="2745" starttimestamp="1599653169283" timestamp="159570">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="235" _type="Insert" date="Wed Sep 09 08:08:49 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3958" docExpressionCount="431" docLength="6893" length="1" offset="2746" starttimestamp="1599653169283" timestamp="159759">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="237" _type="Insert" date="Wed Sep 09 08:08:49 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3959" docExpressionCount="431" docLength="6894" length="1" offset="2747" starttimestamp="1599653169283" timestamp="159841">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="224" _type="InsertStringCommand" date="Wed Sep 09 08:08:47 EDT 2020" starttimestamp="1599653169283" timestamp="158217" timestamp2="158217">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" date="Wed Sep 09 08:08:47 EDT 2020" starttimestamp="1599653169283" timestamp="158350" timestamp2="158350">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="228" _type="InsertStringCommand" date="Wed Sep 09 08:08:47 EDT 2020" starttimestamp="1599653169283" timestamp="158603" timestamp2="158603">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Wed Sep 09 08:08:48 EDT 2020" starttimestamp="1599653169283" timestamp="158767" timestamp2="158767">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Wed Sep 09 08:08:48 EDT 2020" starttimestamp="1599653169283" timestamp="158945" timestamp2="158945">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Wed Sep 09 08:08:48 EDT 2020" starttimestamp="1599653169283" timestamp="159574" timestamp2="159574">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="236" _type="InsertStringCommand" date="Wed Sep 09 08:08:49 EDT 2020" starttimestamp="1599653169283" timestamp="159764" timestamp2="159764">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="238" _type="InsertStringCommand" date="Wed Sep 09 08:08:49 EDT 2020" starttimestamp="1599653169283" timestamp="159845" timestamp2="159845">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Wed Sep 09 08:08:50 EDT 2020" starttimestamp="1599653169283" timestamp="161564" timestamp2="161564">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="241" _type="InsertStringCommand" date="Wed Sep 09 08:08:50 EDT 2020" starttimestamp="1599653169283" timestamp="161689" timestamp2="161689">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="243" _type="InsertStringCommand" date="Wed Sep 09 08:08:51 EDT 2020" starttimestamp="1599653169283" timestamp="161938" timestamp2="161938">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Wed Sep 09 08:08:51 EDT 2020" starttimestamp="1599653169283" timestamp="162121" timestamp2="162121">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Wed Sep 09 08:08:51 EDT 2020" starttimestamp="1599653169283" timestamp="162373" timestamp2="162373">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Wed Sep 09 08:08:51 EDT 2020" starttimestamp="1599653169283" timestamp="162513" timestamp2="162513">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="251" _type="InsertStringCommand" date="Wed Sep 09 08:08:51 EDT 2020" starttimestamp="1599653169283" timestamp="162684" timestamp2="162684">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="253" _type="InsertStringCommand" date="Wed Sep 09 08:08:52 EDT 2020" starttimestamp="1599653169283" timestamp="162787" timestamp2="162787">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="255" _type="InsertStringCommand" date="Wed Sep 09 08:08:52 EDT 2020" starttimestamp="1599653169283" timestamp="162859" timestamp2="162859">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="257" _type="InsertStringCommand" date="Wed Sep 09 08:08:52 EDT 2020" starttimestamp="1599653169283" timestamp="162946" timestamp2="162946">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="259" _type="InsertStringCommand" date="Wed Sep 09 08:08:52 EDT 2020" starttimestamp="1599653169283" timestamp="163345" timestamp2="163345">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="261" _type="InsertStringCommand" date="Wed Sep 09 08:08:52 EDT 2020" starttimestamp="1599653169283" timestamp="163518" timestamp2="163518">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:08:53 EDT 2020" starttimestamp="1599653169283" timestamp="163792" />
  <Command __id="265" _type="InsertStringCommand" date="Wed Sep 09 08:08:53 EDT 2020" starttimestamp="1599653169283" timestamp="163927" timestamp2="163927">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="267" _type="InsertStringCommand" date="Wed Sep 09 08:08:53 EDT 2020" starttimestamp="1599653169283" timestamp="164174" timestamp2="164174">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="269" _type="InsertStringCommand" date="Wed Sep 09 08:08:53 EDT 2020" starttimestamp="1599653169283" timestamp="164312" timestamp2="164312">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="271" _type="InsertStringCommand" date="Wed Sep 09 08:08:53 EDT 2020" starttimestamp="1599653169283" timestamp="164517" timestamp2="164517">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="273" _type="InsertStringCommand" date="Wed Sep 09 08:08:53 EDT 2020" starttimestamp="1599653169283" timestamp="164646" timestamp2="164646">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="275" _type="InsertStringCommand" date="Wed Sep 09 08:08:54 EDT 2020" starttimestamp="1599653169283" timestamp="164823" timestamp2="164823">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="277" _type="InsertStringCommand" date="Wed Sep 09 08:08:54 EDT 2020" starttimestamp="1599653169283" timestamp="164879" timestamp2="164879">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="279" _type="InsertStringCommand" date="Wed Sep 09 08:08:54 EDT 2020" starttimestamp="1599653169283" timestamp="165629" timestamp2="165629">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="280" _type="MoveCaretCommand" caretOffset="389" date="Wed Sep 09 08:09:05 EDT 2020" docOffset="2607" starttimestamp="1599653169283" timestamp="176539" />
  <Command __id="281" _type="MoveCaretCommand" caretOffset="419" date="Wed Sep 09 08:09:06 EDT 2020" docOffset="2637" starttimestamp="1599653169283" timestamp="177288" />
  <Command __id="282" _type="MoveCaretCommand" caretOffset="437" date="Wed Sep 09 08:09:12 EDT 2020" docOffset="2655" starttimestamp="1599653169283" timestamp="183323" />
  <Command __id="284" _type="InsertStringCommand" date="Wed Sep 09 08:09:13 EDT 2020" starttimestamp="1599653169283" timestamp="184066" timestamp2="184066">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="285" _type="MoveCaretCommand" caretOffset="415" date="Wed Sep 09 08:09:17 EDT 2020" docOffset="2633" starttimestamp="1599653169283" timestamp="187759" />
  <DocumentChange __id="239" _type="Insert" date="Wed Sep 09 08:08:50 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3961" docExpressionCount="431" docLength="6896" length="2" offset="2748" starttimestamp="1599653169283" timestamp="161556">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="242" _type="Insert" date="Wed Sep 09 08:08:51 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3963" docExpressionCount="431" docLength="6898" length="2" offset="2750" starttimestamp="1599653169283" timestamp="161933">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="244" _type="Insert" date="Wed Sep 09 08:08:51 EDT 2020" docASTNodeCount="576" docActiveCodeLength="3971" docExpressionCount="431" docLength="6906" length="8" offset="2752" starttimestamp="1599653169283" timestamp="162115">
    <text><![CDATA[
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="246" _type="Insert" date="Wed Sep 09 08:08:51 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3972" docExpressionCount="432" docLength="6907" length="1" offset="2756" starttimestamp="1599653169283" timestamp="162369">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="248" _type="Insert" date="Wed Sep 09 08:08:51 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3973" docExpressionCount="432" docLength="6908" length="1" offset="2757" starttimestamp="1599653169283" timestamp="162509">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="250" _type="Insert" date="Wed Sep 09 08:08:51 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3974" docExpressionCount="432" docLength="6909" length="1" offset="2758" starttimestamp="1599653169283" timestamp="162681">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="252" _type="Insert" date="Wed Sep 09 08:08:52 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3975" docExpressionCount="432" docLength="6910" length="1" offset="2759" starttimestamp="1599653169283" timestamp="162782">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="254" _type="Insert" date="Wed Sep 09 08:08:52 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3976" docExpressionCount="432" docLength="6911" length="1" offset="2760" starttimestamp="1599653169283" timestamp="162854">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="256" _type="Insert" date="Wed Sep 09 08:08:52 EDT 2020" docASTNodeCount="577" docActiveCodeLength="3977" docExpressionCount="431" docLength="6912" length="1" offset="2761" starttimestamp="1599653169283" timestamp="162940">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="258" _type="Insert" date="Wed Sep 09 08:08:52 EDT 2020" docASTNodeCount="577" docActiveCodeLength="3978" docExpressionCount="431" docLength="6913" length="1" offset="2762" starttimestamp="1599653169283" timestamp="163341">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="260" _type="Insert" date="Wed Sep 09 08:08:52 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3979" docExpressionCount="432" docLength="6914" length="1" offset="2763" starttimestamp="1599653169283" timestamp="163513">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="262" _type="Delete" date="Wed Sep 09 08:08:53 EDT 2020" docASTNodeCount="577" docActiveCodeLength="3978" docExpressionCount="431" docLength="6913" endLine="60" length="1" offset="2763" startLine="60" starttimestamp="1599653169283" timestamp="163789">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="264" _type="Insert" date="Wed Sep 09 08:08:53 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3979" docExpressionCount="432" docLength="6914" length="1" offset="2763" starttimestamp="1599653169283" timestamp="163924">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="266" _type="Insert" date="Wed Sep 09 08:08:53 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3980" docExpressionCount="432" docLength="6915" length="1" offset="2764" starttimestamp="1599653169283" timestamp="164169">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="268" _type="Insert" date="Wed Sep 09 08:08:53 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3981" docExpressionCount="432" docLength="6916" length="1" offset="2765" starttimestamp="1599653169283" timestamp="164307">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="270" _type="Insert" date="Wed Sep 09 08:08:53 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3982" docExpressionCount="432" docLength="6917" length="1" offset="2766" starttimestamp="1599653169283" timestamp="164513">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="272" _type="Insert" date="Wed Sep 09 08:08:53 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3983" docExpressionCount="432" docLength="6918" length="1" offset="2767" starttimestamp="1599653169283" timestamp="164641">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="274" _type="Insert" date="Wed Sep 09 08:08:54 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3984" docExpressionCount="432" docLength="6919" length="1" offset="2768" starttimestamp="1599653169283" timestamp="164818">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="276" _type="Insert" date="Wed Sep 09 08:08:54 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3985" docExpressionCount="432" docLength="6920" length="1" offset="2769" starttimestamp="1599653169283" timestamp="164874">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="278" _type="Insert" date="Wed Sep 09 08:08:54 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3986" docExpressionCount="432" docLength="6921" length="1" offset="2770" starttimestamp="1599653169283" timestamp="165624">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="283" _type="Insert" date="Wed Sep 09 08:09:13 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3987" docExpressionCount="432" docLength="6922" length="1" offset="2655" starttimestamp="1599653169283" timestamp="184050">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="286" _type="MoveCaretCommand" caretOffset="415" date="Wed Sep 09 08:09:20 EDT 2020" docOffset="2633" starttimestamp="1599653169283" timestamp="190833" />
  <Command __id="287" _type="SelectTextCommand" caretOffset="418" date="Wed Sep 09 08:09:20 EDT 2020" end="418" start="411" starttimestamp="1599653169283" timestamp="190979" />
  <DocumentChange __id="288" _type="Replace" date="Wed Sep 09 08:09:21 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3981" docExpressionCount="432" docLength="6916" endLine="51" insertionLength="1" int_docASTNodeCount="571" int_docActiveCodeLength="3980" int_docExpressionCount="430" int_docLength="6915" length="7" offset="2629" startLine="51" starttimestamp="1599653169283" timestamp="192321">
    <deletedText><![CDATA[aResult]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <Command __id="289" _type="InsertStringCommand" date="Wed Sep 09 08:09:21 EDT 2020" starttimestamp="1599653169283" timestamp="192362" timestamp2="192362">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="290" _type="Insert" date="Wed Sep 09 08:09:21 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3982" docExpressionCount="432" docLength="6917" length="1" offset="2630" starttimestamp="1599653169283" timestamp="192454">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="291" _type="InsertStringCommand" date="Wed Sep 09 08:09:21 EDT 2020" starttimestamp="1599653169283" timestamp="192465" timestamp2="192465">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="292" _type="Insert" date="Wed Sep 09 08:09:21 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3983" docExpressionCount="432" docLength="6918" length="1" offset="2631" starttimestamp="1599653169283" timestamp="192670">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="293" _type="InsertStringCommand" date="Wed Sep 09 08:09:22 EDT 2020" starttimestamp="1599653169283" timestamp="192751" timestamp2="192751">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="294" _type="Insert" date="Wed Sep 09 08:09:22 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3984" docExpressionCount="432" docLength="6919" length="1" offset="2632" starttimestamp="1599653169283" timestamp="192781">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="295" _type="InsertStringCommand" date="Wed Sep 09 08:09:22 EDT 2020" starttimestamp="1599653169283" timestamp="192793" timestamp2="192793">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="296" _type="Insert" date="Wed Sep 09 08:09:22 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3985" docExpressionCount="432" docLength="6920" length="1" offset="2633" starttimestamp="1599653169283" timestamp="192963">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="297" _type="InsertStringCommand" date="Wed Sep 09 08:09:22 EDT 2020" starttimestamp="1599653169283" timestamp="192984" timestamp2="192984">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="298" _type="Insert" date="Wed Sep 09 08:09:22 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3986" docExpressionCount="432" docLength="6921" length="1" offset="2634" starttimestamp="1599653169283" timestamp="193039">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="299" _type="InsertStringCommand" date="Wed Sep 09 08:09:22 EDT 2020" starttimestamp="1599653169283" timestamp="193059" timestamp2="193059">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="301" _type="InsertStringCommand" date="Wed Sep 09 08:09:22 EDT 2020" starttimestamp="1599653169283" timestamp="193216" timestamp2="193216">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="302" _type="MoveCaretCommand" caretOffset="551" date="Wed Sep 09 08:09:25 EDT 2020" docOffset="2769" starttimestamp="1599653169283" timestamp="195797" />
  <Command __id="303" _type="SelectTextCommand" caretOffset="553" date="Wed Sep 09 08:09:25 EDT 2020" end="553" start="546" starttimestamp="1599653169283" timestamp="195937" />
  <Command __id="305" _type="InsertStringCommand" date="Wed Sep 09 08:09:25 EDT 2020" starttimestamp="1599653169283" timestamp="196367" timestamp2="196367">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="307" _type="InsertStringCommand" date="Wed Sep 09 08:09:25 EDT 2020" starttimestamp="1599653169283" timestamp="196517" timestamp2="196517">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="309" _type="InsertStringCommand" date="Wed Sep 09 08:09:25 EDT 2020" starttimestamp="1599653169283" timestamp="196671" timestamp2="196671">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="311" _type="InsertStringCommand" date="Wed Sep 09 08:09:26 EDT 2020" starttimestamp="1599653169283" timestamp="196782" timestamp2="196782">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="313" _type="InsertStringCommand" date="Wed Sep 09 08:09:26 EDT 2020" starttimestamp="1599653169283" timestamp="196938" timestamp2="196938">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="315" _type="InsertStringCommand" date="Wed Sep 09 08:09:26 EDT 2020" starttimestamp="1599653169283" timestamp="197010" timestamp2="197010">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="317" _type="InsertStringCommand" date="Wed Sep 09 08:09:26 EDT 2020" starttimestamp="1599653169283" timestamp="197131" timestamp2="197131">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="318" _type="MoveCaretCommand" caretOffset="441" date="Wed Sep 09 08:09:28 EDT 2020" docOffset="2659" starttimestamp="1599653169283" timestamp="198987" />
  <Command __id="319" _type="MoveCaretCommand" caretOffset="446" date="Wed Sep 09 08:09:33 EDT 2020" docOffset="2664" starttimestamp="1599653169283" timestamp="204115" />
  <Command __id="320" _type="MoveCaretCommand" caretOffset="444" date="Wed Sep 09 08:09:34 EDT 2020" docOffset="2662" starttimestamp="1599653169283" timestamp="204823" />
  <Command __id="321" _type="MoveCaretCommand" caretOffset="418" date="Wed Sep 09 08:09:40 EDT 2020" docOffset="2636" starttimestamp="1599653169283" timestamp="210899" />
  <Command __id="323" _type="InsertStringCommand" date="Wed Sep 09 08:09:40 EDT 2020" starttimestamp="1599653169283" timestamp="211540" timestamp2="211540">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="300" _type="Insert" date="Wed Sep 09 08:09:22 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3987" docExpressionCount="432" docLength="6922" length="1" offset="2635" starttimestamp="1599653169283" timestamp="193196">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="304" _type="Replace" date="Wed Sep 09 08:09:25 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3981" docExpressionCount="432" docLength="6916" endLine="60" insertionLength="1" int_docASTNodeCount="577" int_docActiveCodeLength="3980" int_docExpressionCount="431" int_docLength="6915" length="7" offset="2764" startLine="60" starttimestamp="1599653169283" timestamp="196346">
    <deletedText><![CDATA[aResult]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="306" _type="Insert" date="Wed Sep 09 08:09:25 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3982" docExpressionCount="432" docLength="6917" length="1" offset="2765" starttimestamp="1599653169283" timestamp="196509">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="308" _type="Insert" date="Wed Sep 09 08:09:25 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3983" docExpressionCount="432" docLength="6918" length="1" offset="2766" starttimestamp="1599653169283" timestamp="196661">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="310" _type="Insert" date="Wed Sep 09 08:09:26 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3984" docExpressionCount="432" docLength="6919" length="1" offset="2767" starttimestamp="1599653169283" timestamp="196773">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="312" _type="Insert" date="Wed Sep 09 08:09:26 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3985" docExpressionCount="432" docLength="6920" length="1" offset="2768" starttimestamp="1599653169283" timestamp="196929">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="314" _type="Insert" date="Wed Sep 09 08:09:26 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3986" docExpressionCount="432" docLength="6921" length="1" offset="2769" starttimestamp="1599653169283" timestamp="197001">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="316" _type="Insert" date="Wed Sep 09 08:09:26 EDT 2020" docASTNodeCount="578" docActiveCodeLength="3987" docExpressionCount="432" docLength="6922" length="1" offset="2770" starttimestamp="1599653169283" timestamp="197120">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="322" _type="Insert" date="Wed Sep 09 08:09:40 EDT 2020" docASTNodeCount="579" docActiveCodeLength="3988" docExpressionCount="435" docLength="6923" length="1" offset="2636" starttimestamp="1599653169283" timestamp="211532">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="326" _type="Insert" date="Wed Sep 09 08:09:51 EDT 2020" docASTNodeCount="579" docActiveCodeLength="3989" docExpressionCount="435" docLength="6924" length="1" offset="3847" starttimestamp="1599653169283" timestamp="221914">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="328" _type="Insert" date="Wed Sep 09 08:09:51 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3990" docExpressionCount="436" docLength="6925" length="1" offset="3848" starttimestamp="1599653169283" timestamp="222460">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="330" _type="Insert" date="Wed Sep 09 08:09:51 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3991" docExpressionCount="436" docLength="6926" length="1" offset="3849" starttimestamp="1599653169283" timestamp="222634">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="332" _type="Insert" date="Wed Sep 09 08:09:52 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3992" docExpressionCount="436" docLength="6927" length="1" offset="3850" starttimestamp="1599653169283" timestamp="222768">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="324" _type="MoveCaretCommand" caretOffset="1581" date="Wed Sep 09 08:09:49 EDT 2020" docOffset="3799" starttimestamp="1599653169283" timestamp="220305" />
  <Command __id="325" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:09:50 EDT 2020" starttimestamp="1599653169283" timestamp="221010" />
  <Command __id="327" _type="InsertStringCommand" date="Wed Sep 09 08:09:51 EDT 2020" starttimestamp="1599653169283" timestamp="221925" timestamp2="221925">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="329" _type="InsertStringCommand" date="Wed Sep 09 08:09:51 EDT 2020" starttimestamp="1599653169283" timestamp="222465" timestamp2="222465">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="331" _type="InsertStringCommand" date="Wed Sep 09 08:09:51 EDT 2020" starttimestamp="1599653169283" timestamp="222637" timestamp2="222637">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="333" _type="InsertStringCommand" date="Wed Sep 09 08:09:52 EDT 2020" starttimestamp="1599653169283" timestamp="222776" timestamp2="222776">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="335" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="224963" timestamp2="224963">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="337" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="225004" timestamp2="225004">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="339" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="225177" timestamp2="225177">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="341" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="225326" timestamp2="225326">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="343" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="225484" timestamp2="225484">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="345" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="225542" timestamp2="225542">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="347" _type="InsertStringCommand" date="Wed Sep 09 08:09:54 EDT 2020" starttimestamp="1599653169283" timestamp="225690" timestamp2="225690">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="349" _type="InsertStringCommand" date="Wed Sep 09 08:09:55 EDT 2020" starttimestamp="1599653169283" timestamp="226488" timestamp2="226488">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="350" _type="InsertStringCommand" date="Wed Sep 09 08:09:55 EDT 2020" starttimestamp="1599653169283" timestamp="226617" timestamp2="226617">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="351" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:10:01 EDT 2020" starttimestamp="1599653169283" timestamp="231948" />
  <Command __id="352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:10:01 EDT 2020" starttimestamp="1599653169283" timestamp="232130" />
  <Command __id="354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:01 EDT 2020" starttimestamp="1599653169283" timestamp="232452" />
  <Command __id="355" _type="SelectTextCommand" caretOffset="2262" date="Wed Sep 09 08:10:05 EDT 2020" end="2262" start="1674" starttimestamp="1599653169283" timestamp="236129" />
  <Command __id="367" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Sep 09 08:10:06 EDT 2020" starttimestamp="1599653169283" timestamp="237185" />
  <Command __id="368" _type="MoveCaretCommand" caretOffset="2218" date="Wed Sep 09 08:10:07 EDT 2020" docOffset="4436" starttimestamp="1599653169283" timestamp="238422" />
  <DocumentChange __id="334" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3993" docExpressionCount="436" docLength="6928" length="1" offset="3851" starttimestamp="1599653169283" timestamp="224866">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="336" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3994" docExpressionCount="436" docLength="6929" length="1" offset="3852" starttimestamp="1599653169283" timestamp="225001">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="338" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3995" docExpressionCount="436" docLength="6930" length="1" offset="3853" starttimestamp="1599653169283" timestamp="225174">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="340" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3996" docExpressionCount="436" docLength="6931" length="1" offset="3854" starttimestamp="1599653169283" timestamp="225323">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="342" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3997" docExpressionCount="436" docLength="6932" length="1" offset="3855" starttimestamp="1599653169283" timestamp="225480">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="344" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3998" docExpressionCount="436" docLength="6933" length="1" offset="3856" starttimestamp="1599653169283" timestamp="225538">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="346" _type="Insert" date="Wed Sep 09 08:09:54 EDT 2020" docASTNodeCount="580" docActiveCodeLength="3999" docExpressionCount="436" docLength="6934" length="1" offset="3857" starttimestamp="1599653169283" timestamp="225682">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="348" _type="Insert" date="Wed Sep 09 08:09:55 EDT 2020" docASTNodeCount="581" docActiveCodeLength="4001" docExpressionCount="437" docLength="6936" length="2" offset="3858" starttimestamp="1599653169283" timestamp="226482">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="353" _type="Delete" date="Wed Sep 09 08:10:01 EDT 2020" docASTNodeCount="581" docActiveCodeLength="4000" docExpressionCount="437" docLength="6935" endLine="92" length="1" offset="3857" startLine="92" starttimestamp="1599653169283" timestamp="232444">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="356" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="595" docActiveCodeLength="4071" docExpressionCount="447" docLength="6933" endLine="94" length="2" offset="3892" startLine="94" starttimestamp="1599653169283" timestamp="237075">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="357" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="604" docActiveCodeLength="4129" docExpressionCount="452" docLength="6931" endLine="95" length="2" offset="3965" startLine="95" starttimestamp="1599653169283" timestamp="237089">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="358" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="612" docActiveCodeLength="4180" docExpressionCount="457" docLength="6929" endLine="96" length="2" offset="4025" startLine="96" starttimestamp="1599653169283" timestamp="237103">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="359" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="627" docActiveCodeLength="4309" docExpressionCount="468" docLength="6927" endLine="97" length="2" offset="4078" startLine="97" starttimestamp="1599653169283" timestamp="237114">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="360" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="494" docActiveCodeLength="4357" docExpressionCount="389" docLength="6925" endLine="98" length="2" offset="4209" startLine="98" starttimestamp="1599653169283" timestamp="237129">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="361" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="494" docActiveCodeLength="4492" docExpressionCount="389" docLength="6923" endLine="99" length="2" offset="4259" startLine="99" starttimestamp="1599653169283" timestamp="237141">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="362" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="494" docActiveCodeLength="4507" docExpressionCount="389" docLength="6921" endLine="100" length="2" offset="4396" startLine="100" starttimestamp="1599653169283" timestamp="237146">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="363" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="494" docActiveCodeLength="4531" docExpressionCount="389" docLength="6919" endLine="101" length="2" offset="4413" startLine="101" starttimestamp="1599653169283" timestamp="237151">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="364" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4539" docExpressionCount="488" docLength="6917" endLine="102" length="2" offset="4439" startLine="102" starttimestamp="1599653169283" timestamp="237156">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="365" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4539" docExpressionCount="488" docLength="6915" endLine="103" length="2" offset="4449" startLine="103" starttimestamp="1599653169283" timestamp="237161">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="366" _type="Delete" date="Wed Sep 09 08:10:06 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4546" docExpressionCount="488" docLength="6913" endLine="104" length="2" offset="4451" startLine="104" starttimestamp="1599653169283" timestamp="237164">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="370" _type="Insert" date="Wed Sep 09 08:10:19 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4555" docExpressionCount="488" docLength="6922" length="9" offset="4216" starttimestamp="1599653169283" timestamp="249800">
    <text><![CDATA[
			    ]]></text>
  </DocumentChange>
  <DocumentChange __id="372" _type="Insert" date="Wed Sep 09 08:10:19 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4564" docExpressionCount="488" docLength="6931" length="9" offset="4225" starttimestamp="1599653169283" timestamp="249987">
    <text><![CDATA[
			    ]]></text>
  </DocumentChange>
  <DocumentChange __id="376" _type="Delete" date="Wed Sep 09 08:10:28 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4563" docExpressionCount="488" docLength="6930" endLine="98" length="1" offset="4215" startLine="98" starttimestamp="1599653169283" timestamp="259560">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="378" _type="Delete" date="Wed Sep 09 08:10:28 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4562" docExpressionCount="488" docLength="6929" endLine="98" length="1" offset="4214" startLine="98" starttimestamp="1599653169283" timestamp="259711">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="380" _type="Delete" date="Wed Sep 09 08:10:29 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4561" docExpressionCount="488" docLength="6928" endLine="98" length="1" offset="4213" startLine="98" starttimestamp="1599653169283" timestamp="259899">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="382" _type="Delete" date="Wed Sep 09 08:10:29 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4560" docExpressionCount="488" docLength="6927" endLine="98" length="1" offset="4212" startLine="98" starttimestamp="1599653169283" timestamp="260058">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="384" _type="Delete" date="Wed Sep 09 08:10:29 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4559" docExpressionCount="488" docLength="6926" endLine="98" length="1" offset="4211" startLine="98" starttimestamp="1599653169283" timestamp="260204">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="386" _type="Delete" date="Wed Sep 09 08:10:29 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4558" docExpressionCount="488" docLength="6925" endLine="98" length="1" offset="4210" startLine="98" starttimestamp="1599653169283" timestamp="260348">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="388" _type="Delete" date="Wed Sep 09 08:10:29 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4557" docExpressionCount="488" docLength="6924" endLine="98" length="1" offset="4209" startLine="98" starttimestamp="1599653169283" timestamp="260507">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="390" _type="Delete" date="Wed Sep 09 08:10:30 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4555" docExpressionCount="488" docLength="6922" endLine="98" length="2" offset="4207" startLine="97" starttimestamp="1599653169283" timestamp="260841">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="369" _type="MoveCaretCommand" caretOffset="1998" date="Wed Sep 09 08:10:18 EDT 2020" docOffset="4216" starttimestamp="1599653169283" timestamp="248955" />
  <Command __id="371" _type="InsertStringCommand" date="Wed Sep 09 08:10:19 EDT 2020" starttimestamp="1599653169283" timestamp="249824" timestamp2="249824">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="373" _type="InsertStringCommand" date="Wed Sep 09 08:10:19 EDT 2020" starttimestamp="1599653169283" timestamp="250023" timestamp2="250023">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="374" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:10:20 EDT 2020" starttimestamp="1599653169283" timestamp="250729" />
  <Command __id="375" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:10:20 EDT 2020" starttimestamp="1599653169283" timestamp="251127" />
  <Command __id="377" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:28 EDT 2020" starttimestamp="1599653169283" timestamp="259610" />
  <Command __id="379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:28 EDT 2020" starttimestamp="1599653169283" timestamp="259713" />
  <Command __id="381" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:29 EDT 2020" starttimestamp="1599653169283" timestamp="259908" />
  <Command __id="383" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:29 EDT 2020" starttimestamp="1599653169283" timestamp="260066" />
  <Command __id="385" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:29 EDT 2020" starttimestamp="1599653169283" timestamp="260213" />
  <Command __id="387" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:29 EDT 2020" starttimestamp="1599653169283" timestamp="260354" />
  <Command __id="389" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:29 EDT 2020" starttimestamp="1599653169283" timestamp="260514" />
  <Command __id="391" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:30 EDT 2020" starttimestamp="1599653169283" timestamp="260854" />
  <Command __id="392" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:30 EDT 2020" starttimestamp="1599653169283" timestamp="261540" />
  <Command __id="393" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:31 EDT 2020" starttimestamp="1599653169283" timestamp="261770" />
  <Command __id="394" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:31 EDT 2020" starttimestamp="1599653169283" timestamp="261957" />
  <Command __id="395" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:31 EDT 2020" starttimestamp="1599653169283" timestamp="262139" />
  <Command __id="396" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:31 EDT 2020" starttimestamp="1599653169283" timestamp="262338" />
  <Command __id="397" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:31 EDT 2020" starttimestamp="1599653169283" timestamp="262514" />
  <Command __id="398" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:31 EDT 2020" starttimestamp="1599653169283" timestamp="262673" />
  <Command __id="399" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:32 EDT 2020" starttimestamp="1599653169283" timestamp="262862" />
  <Command __id="400" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:10:32 EDT 2020" starttimestamp="1599653169283" timestamp="263143" />
  <Command __id="402" _type="InsertStringCommand" date="Wed Sep 09 08:10:39 EDT 2020" starttimestamp="1599653169283" timestamp="270510" timestamp2="270510">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="404" _type="InsertStringCommand" date="Wed Sep 09 08:10:39 EDT 2020" starttimestamp="1599653169283" timestamp="270584" timestamp2="270584">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="401" _type="Insert" date="Wed Sep 09 08:10:39 EDT 2020" docASTNodeCount="654" docActiveCodeLength="4556" docExpressionCount="489" docLength="6923" length="1" offset="4475" starttimestamp="1599653169283" timestamp="270484">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="403" _type="Insert" date="Wed Sep 09 08:10:39 EDT 2020" docASTNodeCount="654" docActiveCodeLength="4557" docExpressionCount="489" docLength="6924" length="1" offset="4476" starttimestamp="1599653169283" timestamp="270563">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="405" _type="Insert" date="Wed Sep 09 08:10:39 EDT 2020" docASTNodeCount="654" docActiveCodeLength="4558" docExpressionCount="489" docLength="6925" length="1" offset="4477" starttimestamp="1599653169283" timestamp="270685">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="407" _type="Insert" date="Wed Sep 09 08:10:40 EDT 2020" docASTNodeCount="654" docActiveCodeLength="4559" docExpressionCount="489" docLength="6926" length="1" offset="4478" starttimestamp="1599653169283" timestamp="270773">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="409" _type="Insert" date="Wed Sep 09 08:10:40 EDT 2020" docASTNodeCount="654" docActiveCodeLength="4560" docExpressionCount="489" docLength="6927" length="1" offset="4479" starttimestamp="1599653169283" timestamp="270873">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="411" _type="Insert" date="Wed Sep 09 08:10:40 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4561" docExpressionCount="489" docLength="6928" length="1" offset="4480" starttimestamp="1599653169283" timestamp="270958">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="413" _type="Insert" date="Wed Sep 09 08:10:40 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4562" docExpressionCount="489" docLength="6929" length="1" offset="4481" starttimestamp="1599653169283" timestamp="271588">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="415" _type="Insert" date="Wed Sep 09 08:10:43 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4563" docExpressionCount="489" docLength="6930" length="1" offset="4482" starttimestamp="1599653169283" timestamp="273771">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="417" _type="Insert" date="Wed Sep 09 08:10:43 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4564" docExpressionCount="489" docLength="6931" length="1" offset="4483" starttimestamp="1599653169283" timestamp="273898">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="419" _type="Insert" date="Wed Sep 09 08:10:43 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4565" docExpressionCount="489" docLength="6932" length="1" offset="4484" starttimestamp="1599653169283" timestamp="274021">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="421" _type="Insert" date="Wed Sep 09 08:10:43 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4566" docExpressionCount="489" docLength="6933" length="1" offset="4485" starttimestamp="1599653169283" timestamp="274229">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="423" _type="Insert" date="Wed Sep 09 08:10:43 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4567" docExpressionCount="489" docLength="6934" length="1" offset="4486" starttimestamp="1599653169283" timestamp="274467">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="425" _type="Insert" date="Wed Sep 09 08:10:43 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4568" docExpressionCount="489" docLength="6935" length="1" offset="4487" starttimestamp="1599653169283" timestamp="274660">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="427" _type="Insert" date="Wed Sep 09 08:10:44 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4569" docExpressionCount="489" docLength="6936" length="1" offset="4488" starttimestamp="1599653169283" timestamp="274738">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="429" _type="Insert" date="Wed Sep 09 08:10:44 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4570" docExpressionCount="489" docLength="6937" length="1" offset="4489" starttimestamp="1599653169283" timestamp="274945">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="431" _type="Insert" date="Wed Sep 09 08:10:44 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4571" docExpressionCount="489" docLength="6938" length="1" offset="4490" starttimestamp="1599653169283" timestamp="275137">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="433" _type="Insert" date="Wed Sep 09 08:10:44 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4572" docExpressionCount="489" docLength="6939" length="1" offset="4491" starttimestamp="1599653169283" timestamp="275280">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="435" _type="Insert" date="Wed Sep 09 08:10:45 EDT 2020" docASTNodeCount="655" docActiveCodeLength="4573" docExpressionCount="489" docLength="6940" length="1" offset="4492" starttimestamp="1599653169283" timestamp="275877">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="406" _type="InsertStringCommand" date="Wed Sep 09 08:10:39 EDT 2020" starttimestamp="1599653169283" timestamp="270690" timestamp2="270690">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="408" _type="InsertStringCommand" date="Wed Sep 09 08:10:40 EDT 2020" starttimestamp="1599653169283" timestamp="270788" timestamp2="270788">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="410" _type="InsertStringCommand" date="Wed Sep 09 08:10:40 EDT 2020" starttimestamp="1599653169283" timestamp="270888" timestamp2="270888">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="412" _type="InsertStringCommand" date="Wed Sep 09 08:10:40 EDT 2020" starttimestamp="1599653169283" timestamp="270967" timestamp2="270967">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="414" _type="InsertStringCommand" date="Wed Sep 09 08:10:40 EDT 2020" starttimestamp="1599653169283" timestamp="271601" timestamp2="271601">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="416" _type="InsertStringCommand" date="Wed Sep 09 08:10:43 EDT 2020" starttimestamp="1599653169283" timestamp="273788" timestamp2="273788">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="418" _type="InsertStringCommand" date="Wed Sep 09 08:10:43 EDT 2020" starttimestamp="1599653169283" timestamp="273911" timestamp2="273911">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="420" _type="InsertStringCommand" date="Wed Sep 09 08:10:43 EDT 2020" starttimestamp="1599653169283" timestamp="274033" timestamp2="274033">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="422" _type="InsertStringCommand" date="Wed Sep 09 08:10:43 EDT 2020" starttimestamp="1599653169283" timestamp="274245" timestamp2="274245">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="424" _type="InsertStringCommand" date="Wed Sep 09 08:10:43 EDT 2020" starttimestamp="1599653169283" timestamp="274473" timestamp2="274473">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="426" _type="InsertStringCommand" date="Wed Sep 09 08:10:43 EDT 2020" starttimestamp="1599653169283" timestamp="274673" timestamp2="274673">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="428" _type="InsertStringCommand" date="Wed Sep 09 08:10:44 EDT 2020" starttimestamp="1599653169283" timestamp="274745" timestamp2="274745">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="430" _type="InsertStringCommand" date="Wed Sep 09 08:10:44 EDT 2020" starttimestamp="1599653169283" timestamp="274959" timestamp2="274959">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="432" _type="InsertStringCommand" date="Wed Sep 09 08:10:44 EDT 2020" starttimestamp="1599653169283" timestamp="275152" timestamp2="275152">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="434" _type="InsertStringCommand" date="Wed Sep 09 08:10:44 EDT 2020" starttimestamp="1599653169283" timestamp="275295" timestamp2="275295">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="436" _type="InsertStringCommand" date="Wed Sep 09 08:10:45 EDT 2020" starttimestamp="1599653169283" timestamp="275890" timestamp2="275890">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="438" _type="InsertStringCommand" date="Wed Sep 09 08:10:46 EDT 2020" starttimestamp="1599653169283" timestamp="277597" timestamp2="277597">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="440" _type="InsertStringCommand" date="Wed Sep 09 08:10:47 EDT 2020" starttimestamp="1599653169283" timestamp="277836" timestamp2="277836">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="442" _type="InsertStringCommand" date="Wed Sep 09 08:10:47 EDT 2020" starttimestamp="1599653169283" timestamp="277953" timestamp2="277953">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="444" _type="InsertStringCommand" date="Wed Sep 09 08:10:47 EDT 2020" starttimestamp="1599653169283" timestamp="278065" timestamp2="278065">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="446" _type="InsertStringCommand" date="Wed Sep 09 08:10:47 EDT 2020" starttimestamp="1599653169283" timestamp="278253" timestamp2="278253">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="448" _type="InsertStringCommand" date="Wed Sep 09 08:10:47 EDT 2020" starttimestamp="1599653169283" timestamp="278274" timestamp2="278274">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="450" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:48 EDT 2020" starttimestamp="1599653169283" timestamp="278912" />
  <Command __id="452" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:10:48 EDT 2020" starttimestamp="1599653169283" timestamp="279048" />
  <DocumentChange __id="437" _type="Insert" date="Wed Sep 09 08:10:46 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4575" docExpressionCount="490" docLength="6942" length="2" offset="4493" starttimestamp="1599653169283" timestamp="277580">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="439" _type="Insert" date="Wed Sep 09 08:10:47 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4576" docExpressionCount="491" docLength="6943" length="1" offset="4494" starttimestamp="1599653169283" timestamp="277824">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="441" _type="Insert" date="Wed Sep 09 08:10:47 EDT 2020" docASTNodeCount="656" docActiveCodeLength="4577" docExpressionCount="490" docLength="6944" length="1" offset="4495" starttimestamp="1599653169283" timestamp="277945">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="443" _type="Insert" date="Wed Sep 09 08:10:47 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4578" docExpressionCount="491" docLength="6945" length="1" offset="4496" starttimestamp="1599653169283" timestamp="278063">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="445" _type="Insert" date="Wed Sep 09 08:10:47 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4579" docExpressionCount="491" docLength="6946" length="1" offset="4497" starttimestamp="1599653169283" timestamp="278248">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="447" _type="Insert" date="Wed Sep 09 08:10:47 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4580" docExpressionCount="491" docLength="6947" length="1" offset="4498" starttimestamp="1599653169283" timestamp="278270">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="449" _type="Delete" date="Wed Sep 09 08:10:48 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4579" docExpressionCount="491" docLength="6946" endLine="106" length="1" offset="4498" startLine="106" starttimestamp="1599653169283" timestamp="278903">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="451" _type="Delete" date="Wed Sep 09 08:10:48 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4578" docExpressionCount="491" docLength="6945" endLine="106" length="1" offset="4497" startLine="106" starttimestamp="1599653169283" timestamp="279046">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="453" _type="Insert" date="Wed Sep 09 08:10:48 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4579" docExpressionCount="491" docLength="6946" length="1" offset="4497" starttimestamp="1599653169283" timestamp="279422">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="455" _type="Insert" date="Wed Sep 09 08:10:48 EDT 2020" docASTNodeCount="658" docActiveCodeLength="4580" docExpressionCount="491" docLength="6947" length="1" offset="4498" starttimestamp="1599653169283" timestamp="279502">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="457" _type="Insert" date="Wed Sep 09 08:10:48 EDT 2020" docASTNodeCount="657" docActiveCodeLength="4581" docExpressionCount="490" docLength="6948" length="1" offset="4499" starttimestamp="1599653169283" timestamp="279615">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="454" _type="InsertStringCommand" date="Wed Sep 09 08:10:48 EDT 2020" starttimestamp="1599653169283" timestamp="279426" timestamp2="279426">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="456" _type="InsertStringCommand" date="Wed Sep 09 08:10:48 EDT 2020" starttimestamp="1599653169283" timestamp="279504" timestamp2="279504">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="458" _type="InsertStringCommand" date="Wed Sep 09 08:10:48 EDT 2020" starttimestamp="1599653169283" timestamp="279621" timestamp2="279621">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="459" _type="InsertStringCommand" date="Wed Sep 09 08:10:49 EDT 2020" starttimestamp="1599653169283" timestamp="279923" timestamp2="279923">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="461" _type="InsertStringCommand" date="Wed Sep 09 08:10:51 EDT 2020" starttimestamp="1599653169283" timestamp="282049" timestamp2="282049">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="463" _type="InsertStringCommand" date="Wed Sep 09 08:10:51 EDT 2020" starttimestamp="1599653169283" timestamp="282458" timestamp2="282458">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="465" _type="InsertStringCommand" date="Wed Sep 09 08:10:51 EDT 2020" starttimestamp="1599653169283" timestamp="282695" timestamp2="282695">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="467" _type="InsertStringCommand" date="Wed Sep 09 08:10:52 EDT 2020" starttimestamp="1599653169283" timestamp="282856" timestamp2="282856">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="469" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="283770" timestamp2="283770">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="471" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="284012" timestamp2="284012">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="473" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="284135" timestamp2="284135">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="475" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="284265" timestamp2="284265">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="477" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="284415" timestamp2="284415">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="479" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="284578" timestamp2="284578">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="481" _type="InsertStringCommand" date="Wed Sep 09 08:10:53 EDT 2020" starttimestamp="1599653169283" timestamp="284711" timestamp2="284711">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="483" _type="InsertStringCommand" date="Wed Sep 09 08:10:54 EDT 2020" starttimestamp="1599653169283" timestamp="284886" timestamp2="284886">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="485" _type="InsertStringCommand" date="Wed Sep 09 08:10:54 EDT 2020" starttimestamp="1599653169283" timestamp="285034" timestamp2="285034">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="487" _type="InsertStringCommand" date="Wed Sep 09 08:10:54 EDT 2020" starttimestamp="1599653169283" timestamp="285708" timestamp2="285708">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="460" _type="Insert" date="Wed Sep 09 08:10:51 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4582" docExpressionCount="491" docLength="6949" length="1" offset="4501" starttimestamp="1599653169283" timestamp="282041">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="462" _type="Insert" date="Wed Sep 09 08:10:51 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4583" docExpressionCount="491" docLength="6950" length="1" offset="4502" starttimestamp="1599653169283" timestamp="282444">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <DocumentChange __id="464" _type="Insert" date="Wed Sep 09 08:10:51 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4584" docExpressionCount="491" docLength="6951" length="1" offset="4503" starttimestamp="1599653169283" timestamp="282691">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="466" _type="Insert" date="Wed Sep 09 08:10:52 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4585" docExpressionCount="491" docLength="6952" length="1" offset="4504" starttimestamp="1599653169283" timestamp="282851">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="468" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4586" docExpressionCount="491" docLength="6953" length="1" offset="4505" starttimestamp="1599653169283" timestamp="283757">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="470" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4587" docExpressionCount="491" docLength="6954" length="1" offset="4506" starttimestamp="1599653169283" timestamp="283999">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="472" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4588" docExpressionCount="491" docLength="6955" length="1" offset="4507" starttimestamp="1599653169283" timestamp="284121">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="474" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4589" docExpressionCount="491" docLength="6956" length="1" offset="4508" starttimestamp="1599653169283" timestamp="284252">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="476" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4590" docExpressionCount="491" docLength="6957" length="1" offset="4509" starttimestamp="1599653169283" timestamp="284409">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="478" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4591" docExpressionCount="491" docLength="6958" length="1" offset="4510" starttimestamp="1599653169283" timestamp="284572">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="480" _type="Insert" date="Wed Sep 09 08:10:53 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4592" docExpressionCount="491" docLength="6959" length="1" offset="4511" starttimestamp="1599653169283" timestamp="284705">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="482" _type="Insert" date="Wed Sep 09 08:10:54 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4593" docExpressionCount="491" docLength="6960" length="1" offset="4512" starttimestamp="1599653169283" timestamp="284873">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="484" _type="Insert" date="Wed Sep 09 08:10:54 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4594" docExpressionCount="491" docLength="6961" length="1" offset="4513" starttimestamp="1599653169283" timestamp="285022">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="486" _type="Insert" date="Wed Sep 09 08:10:54 EDT 2020" docASTNodeCount="659" docActiveCodeLength="4595" docExpressionCount="492" docLength="6962" length="1" offset="4514" starttimestamp="1599653169283" timestamp="285700">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="489" _type="Insert" date="Wed Sep 09 08:11:01 EDT 2020" docASTNodeCount="652" docActiveCodeLength="4596" docExpressionCount="488" docLength="6963" length="1" offset="4493" starttimestamp="1599653169283" timestamp="291929">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Insert" date="Wed Sep 09 08:11:04 EDT 2020" docASTNodeCount="660" docActiveCodeLength="4597" docExpressionCount="493" docLength="6964" length="1" offset="4515" starttimestamp="1599653169283" timestamp="294977">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="488" _type="MoveCaretCommand" caretOffset="2275" date="Wed Sep 09 08:11:00 EDT 2020" docOffset="4493" starttimestamp="1599653169283" timestamp="291147" />
  <Command __id="490" _type="InsertStringCommand" date="Wed Sep 09 08:11:01 EDT 2020" starttimestamp="1599653169283" timestamp="291949" timestamp2="291949">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="491" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:11:02 EDT 2020" starttimestamp="1599653169283" timestamp="292883" />
  <Command __id="492" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:11:02 EDT 2020" starttimestamp="1599653169283" timestamp="293040" />
  <Command __id="493" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:11:02 EDT 2020" starttimestamp="1599653169283" timestamp="293178" />
  <Command __id="494" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:11:02 EDT 2020" starttimestamp="1599653169283" timestamp="293331" />
  <Command __id="495" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:11:02 EDT 2020" starttimestamp="1599653169283" timestamp="293481" />
  <Command __id="496" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Wed Sep 09 08:11:03 EDT 2020" starttimestamp="1599653169283" timestamp="293809" />
  <Command __id="498" _type="InsertStringCommand" date="Wed Sep 09 08:11:04 EDT 2020" starttimestamp="1599653169283" timestamp="294985" timestamp2="294985">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="499" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:11:04 EDT 2020" starttimestamp="1599653169283" timestamp="295336" />
  <Command __id="501" _type="InsertStringCommand" date="Wed Sep 09 08:11:10 EDT 2020" starttimestamp="1599653169283" timestamp="301009" timestamp2="301009">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="503" _type="InsertStringCommand" date="Wed Sep 09 08:11:10 EDT 2020" starttimestamp="1599653169283" timestamp="301428" timestamp2="301428">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="505" _type="InsertStringCommand" date="Wed Sep 09 08:11:10 EDT 2020" starttimestamp="1599653169283" timestamp="301578" timestamp2="301578">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="507" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:11:11 EDT 2020" starttimestamp="1599653169283" timestamp="302296" />
  <Command __id="509" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:11:11 EDT 2020" starttimestamp="1599653169283" timestamp="302457" />
  <Command __id="511" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:11:11 EDT 2020" starttimestamp="1599653169283" timestamp="302591" />
  <Command __id="513" _type="InsertStringCommand" date="Wed Sep 09 08:11:11 EDT 2020" starttimestamp="1599653169283" timestamp="302711" timestamp2="302711">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="515" _type="InsertStringCommand" date="Wed Sep 09 08:11:12 EDT 2020" starttimestamp="1599653169283" timestamp="303033" timestamp2="303033">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="517" _type="InsertStringCommand" date="Wed Sep 09 08:11:12 EDT 2020" starttimestamp="1599653169283" timestamp="303168" timestamp2="303168">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="519" _type="InsertStringCommand" date="Wed Sep 09 08:11:12 EDT 2020" starttimestamp="1599653169283" timestamp="303323" timestamp2="303323">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="521" _type="InsertStringCommand" date="Wed Sep 09 08:11:13 EDT 2020" starttimestamp="1599653169283" timestamp="303800" timestamp2="303800">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="523" _type="InsertStringCommand" date="Wed Sep 09 08:11:13 EDT 2020" starttimestamp="1599653169283" timestamp="303973" timestamp2="303973">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="525" _type="InsertStringCommand" date="Wed Sep 09 08:11:13 EDT 2020" starttimestamp="1599653169283" timestamp="304075" timestamp2="304075">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="527" _type="InsertStringCommand" date="Wed Sep 09 08:11:13 EDT 2020" starttimestamp="1599653169283" timestamp="304237" timestamp2="304237">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="500" _type="Insert" date="Wed Sep 09 08:11:10 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4598" docExpressionCount="494" docLength="6965" length="1" offset="4517" starttimestamp="1599653169283" timestamp="301001">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <DocumentChange __id="502" _type="Insert" date="Wed Sep 09 08:11:10 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4599" docExpressionCount="494" docLength="6966" length="1" offset="4518" starttimestamp="1599653169283" timestamp="301417">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="504" _type="Insert" date="Wed Sep 09 08:11:10 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4600" docExpressionCount="494" docLength="6967" length="1" offset="4519" starttimestamp="1599653169283" timestamp="301563">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="506" _type="Delete" date="Wed Sep 09 08:11:11 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4599" docExpressionCount="494" docLength="6966" endLine="106" length="1" offset="4519" startLine="106" starttimestamp="1599653169283" timestamp="302293">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="508" _type="Delete" date="Wed Sep 09 08:11:11 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4598" docExpressionCount="494" docLength="6965" endLine="106" length="1" offset="4518" startLine="106" starttimestamp="1599653169283" timestamp="302451">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="510" _type="Delete" date="Wed Sep 09 08:11:11 EDT 2020" docASTNodeCount="660" docActiveCodeLength="4597" docExpressionCount="493" docLength="6964" endLine="106" length="1" offset="4517" startLine="106" starttimestamp="1599653169283" timestamp="302585">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <DocumentChange __id="512" _type="Insert" date="Wed Sep 09 08:11:11 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4598" docExpressionCount="494" docLength="6965" length="1" offset="4517" starttimestamp="1599653169283" timestamp="302695">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="514" _type="Insert" date="Wed Sep 09 08:11:12 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4599" docExpressionCount="494" docLength="6966" length="1" offset="4518" starttimestamp="1599653169283" timestamp="303019">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="516" _type="Insert" date="Wed Sep 09 08:11:12 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4600" docExpressionCount="494" docLength="6967" length="1" offset="4519" starttimestamp="1599653169283" timestamp="303156">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="518" _type="Insert" date="Wed Sep 09 08:11:12 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4601" docExpressionCount="494" docLength="6968" length="1" offset="4520" starttimestamp="1599653169283" timestamp="303311">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="520" _type="Insert" date="Wed Sep 09 08:11:13 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4602" docExpressionCount="494" docLength="6969" length="1" offset="4521" starttimestamp="1599653169283" timestamp="303782">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="522" _type="Insert" date="Wed Sep 09 08:11:13 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4603" docExpressionCount="494" docLength="6970" length="1" offset="4522" starttimestamp="1599653169283" timestamp="303969">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="524" _type="Insert" date="Wed Sep 09 08:11:13 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4604" docExpressionCount="494" docLength="6971" length="1" offset="4523" starttimestamp="1599653169283" timestamp="304069">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="526" _type="Insert" date="Wed Sep 09 08:11:13 EDT 2020" docASTNodeCount="662" docActiveCodeLength="4605" docExpressionCount="494" docLength="6972" length="1" offset="4524" starttimestamp="1599653169283" timestamp="304231">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="528" _type="Insert" date="Wed Sep 09 08:11:13 EDT 2020" docASTNodeCount="661" docActiveCodeLength="4606" docExpressionCount="494" docLength="6973" length="1" offset="4525" starttimestamp="1599653169283" timestamp="304622">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="531" _type="Insert" date="Wed Sep 09 08:11:14 EDT 2020" docASTNodeCount="664" docActiveCodeLength="4607" docExpressionCount="496" docLength="6974" length="1" offset="4526" starttimestamp="1599653169283" timestamp="305143">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="532" _type="Insert" date="Wed Sep 09 08:11:14 EDT 2020" docASTNodeCount="664" docActiveCodeLength="4608" docExpressionCount="496" docLength="6975" length="1" offset="4527" starttimestamp="1599653169283" timestamp="305224">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="533" _type="Insert" date="Wed Sep 09 08:11:14 EDT 2020" docASTNodeCount="664" docActiveCodeLength="4609" docExpressionCount="496" docLength="6976" length="1" offset="4528" starttimestamp="1599653169283" timestamp="305337">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="535" _type="Replace" date="Wed Sep 09 08:11:15 EDT 2020" docASTNodeCount="664" docActiveCodeLength="4612" docExpressionCount="496" docLength="6979" endLine="106" insertionLength="6" int_docASTNodeCount="661" int_docActiveCodeLength="4606" int_docExpressionCount="494" int_docLength="6973" length="3" offset="4526" startLine="106" starttimestamp="1599653169283" timestamp="305736">
    <deletedText><![CDATA[len]]></deletedText>
    <insertedText><![CDATA[length]]></insertedText>
  </DocumentChange>
  <Command __id="529" _type="InsertStringCommand" date="Wed Sep 09 08:11:13 EDT 2020" starttimestamp="1599653169283" timestamp="304637" timestamp2="304637">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="530" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:11:13 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="304650" />
  <Command __id="534" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:11:14 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="305712" />
  <Command __id="536" _type="InsertStringCommand" date="Wed Sep 09 08:11:15 EDT 2020" starttimestamp="1599653169283" timestamp="305758" timestamp2="305758">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="538" _type="InsertStringCommand" date="Wed Sep 09 08:11:16 EDT 2020" starttimestamp="1599653169283" timestamp="306839" timestamp2="306839">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="537" _type="Insert" date="Wed Sep 09 08:11:16 EDT 2020" docASTNodeCount="664" docActiveCodeLength="4613" docExpressionCount="496" docLength="6980" length="1" offset="4532" starttimestamp="1599653169283" timestamp="306816">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="539" _type="MoveCaretCommand" caretOffset="2329" date="Wed Sep 09 08:11:17 EDT 2020" docOffset="4547" starttimestamp="1599653169283" timestamp="308469" />
  <Command __id="541" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:11:22 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="312979" />
  <Command __id="542" _type="SelectTextCommand" caretOffset="2174" date="Wed Sep 09 08:11:26 EDT 2020" end="2174" start="1982" starttimestamp="1599653169283" timestamp="317121" />
  <Command __id="543" _type="SelectTextCommand" caretOffset="2174" date="Wed Sep 09 08:11:26 EDT 2020" end="2174" start="1982" starttimestamp="1599653169283" timestamp="317441" />
  <Command __id="540" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:11:22 EDT 2020" docASTNodeCount="619" docActiveCodeLength="4457" docExpressionCount="474" docLength="6824" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="312771">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractSocialDistanceUitilityStaticFunctionCallTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
public abstract class AbstractSocialDistanceUitilityStaticFunctionCallTest extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 100; // secs
	
	protected abstract Object[][] getArguments();
	protected abstract Object[] getResults();
	protected abstract Class[] getParameterTypes();

	public AbstractSocialDistanceUitilityStaticFunctionCallTest() {
	}

	protected abstract String methodName();
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = getParameterTypes();
		    Method aMethod = aUilityClass.getMethod(methodName(), aParameterTypes);
		    Object[][] anArguments = getArguments();
		    Object[] aResults = getResults();
		    int aNumSuccesses = 0;
		    for (int anIndex = 0; anIndex < anArguments.length; anIndex++ ) {
		    	Object[] anInputCombination = anArguments[anIndex];
		    	Object anExpectedResult = aResults[anIndex];
			    Boolean aRetVal =  (Boolean) BasicProjectExecution.timedInvoke(aUilityClass, aMethod, anInputCombination, TIME_OUT_MSECS);
			    if (!anExpectedResult.equals(aRetVal )) {
		    		System.out.println("Expected retVal with args " + Arrays.toString(anInputCombination) + " did not return " + anExpectedResult);
			    } else {
			    	aNumSuccesses++;
			    }

		    }
		    double aPercentage = ((double) aNumSuccesses)/aResults.length;
		    return aPercentage == 1?pass():partialPass(aPercentage, aNumSuccesses + " tests passed out of " +   aResults.length);  

		  

		} catch ( Throwable e) {
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="544" _type="CopyCommand" date="Wed Sep 09 08:11:30 EDT 2020" starttimestamp="1599653169283" timestamp="321606" />
  <Command __id="546" _type="MoveCaretCommand" caretOffset="2329" date="Wed Sep 09 08:11:32 EDT 2020" docOffset="4547" starttimestamp="1599653169283" timestamp="322777" />
  <Command __id="545" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:11:31 EDT 2020" docASTNodeCount="664" docActiveCodeLength="4613" docExpressionCount="496" docLength="6980" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="322644">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\IsInferredSafeTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶public class IsInferredSafeTest extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 100; // secs¶	¶	protected Class[] parameterTypes= {Integer.TYPE,Integer.TYPE,Integer.TYPE};¶	protected Object[][] arguments={¶		{1,1,1}"), Diff(DELETE,"¶	};¶	protected String methodName="isInferredSafe";¶	"), Diff(INSERT,",¶		{255,255,255},¶		¶	};¶	protected Object[] results={¶		true,¶		false,¶	¶	};¶	¶	protected String methodName="isInferredSafe";¶	¶	protected Object[] getResult() {¶		return results;¶	}"), Diff(EQUAL,"¶	¶	protected Object[][] getArguments(){¶		return arguments;		¶	};¶	protected Class[] getParameterTypes() {¶		return parameterTypes;¶	};¶¶	public IsInferredSafeTest() {¶	}¶¶	¶	protected String methodName() {¶		return methodName;¶	};¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = getParameterTypes();¶		    Method aMethod = aUilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[][] anArguments = getArguments();¶		    Object[] aResults"), Diff(INSERT,"=getResult()"), Diff(EQUAL,";¶"), Diff(DELETE,""), Diff(EQUAL,"		    int aNumSuccesses = 0;¶"), Diff(DELETE,"//"), Diff(EQUAL,"		    for (int anIndex = 0; anIndex < anArguments.length; anIndex++ ) {¶"), Diff(DELETE,"//"), Diff(EQUAL,"		    	Object[] anInputCombination = anArguments[anIndex];¶"), Diff(DELETE,"//"), Diff(EQUAL,"		    	Object anExpectedResult = aResults[anIndex];¶"), Diff(DELETE,"//"), Diff(EQUAL,"			    Boolean aRetVal =  (Boolean) BasicProjectExecution.timedInvoke(aUilityClass, aMethod, anInputCombination, TIME_OUT_MSECS);¶"), Diff(DELETE,"//"), Diff(INSERT,"			    ¶"), Diff(EQUAL,"			    if (!anExpectedResult.equals(aRetVal )) {¶"), Diff(DELETE,"//"), Diff(EQUAL,"		    		System.out.println("Expected retVal with args " + Arrays.toString(anInputCombination) + " did not return " + anExpectedResult);¶"), Diff(DELETE,"//"), Diff(EQUAL,"			    } else {¶"), Diff(DELETE,"//"), Diff(EQUAL,"			    	aNumSuccesses++;¶"), Diff(DELETE,"//"), Diff(EQUAL,"			    }¶"), Diff(DELETE,"//¶//"), Diff(INSERT,"¶"), Diff(EQUAL,"		    }¶		    "), Diff(INSERT,"double percentage=((double)aNumSuccesses)/aResults.length;"), Diff(EQUAL,"¶		   return pass();¶¶		} catch ( Throwable e) {¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
public class IsInferredSafeTest extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 100; // secs
	
	protected Class[] parameterTypes= {Integer.TYPE,Integer.TYPE,Integer.TYPE};
	protected Object[][] arguments={
		{1,1,1},
		{255,255,255},
		
	};
	protected Object[] results={
		true,
		false,
	
	};
	
	protected String methodName="isInferredSafe";
	
	protected Object[] getResult() {
		return results;
	}
	
	protected Object[][] getArguments(){
		return arguments;		
	};
	protected Class[] getParameterTypes() {
		return parameterTypes;
	};

	public IsInferredSafeTest() {
	}

	
	protected String methodName() {
		return methodName;
	};
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = getParameterTypes();
		    Method aMethod = aUilityClass.getMethod(methodName(), aParameterTypes);
		    Object[][] anArguments = getArguments();
		    Object[] aResults=getResult();
		    int aNumSuccesses = 0;
		    for (int anIndex = 0; anIndex < anArguments.length; anIndex++ ) {
		    	Object[] anInputCombination = anArguments[anIndex];
		    	Object anExpectedResult = aResults[anIndex];
			    Boolean aRetVal =  (Boolean) BasicProjectExecution.timedInvoke(aUilityClass, aMethod, anInputCombination, TIME_OUT_MSECS);
			    
			    if (!anExpectedResult.equals(aRetVal )) {
		    		System.out.println("Expected retVal with args " + Arrays.toString(anInputCombination) + " did not return " + anExpectedResult);
			    } else {
			    	aNumSuccesses++;
			    }

		    }
		    double percentage=((double)aNumSuccesses)/aResults.length;
		   return pass();

		} catch ( Throwable e) {
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="548" _type="Replace" date="Wed Sep 09 08:11:33 EDT 2020" docASTNodeCount="677" docActiveCodeLength="4725" docExpressionCount="509" docLength="7092" endLine="107" insertionLength="197" int_docASTNodeCount="649" int_docActiveCodeLength="4528" int_docExpressionCount="486" int_docLength="6895" length="85" offset="4469" startLine="106" starttimestamp="1599653169283" timestamp="324627">
    <deletedText><![CDATA[		    double percentage=((double)aNumSuccesses)/aResults.length;
		   return pass();]]></deletedText>
    <insertedText><![CDATA[		    double aPercentage = ((double) aNumSuccesses)/aResults.length;
		    return aPercentage == 1?pass():partialPass(aPercentage, aNumSuccesses + " tests passed out of " +   aResults.length);  
]]></insertedText>
  </DocumentChange>
  <Command __id="550" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326618" />
  <Command __id="551" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326623" />
  <Command __id="552" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326683" />
  <Command __id="553" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326683" />
  <Command __id="554" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326695" />
  <Command __id="555" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326696" />
  <Command __id="556" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:11:35 EDT 2020" starttimestamp="1599653169283" timestamp="326706" />
  <Command __id="557" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:13:38 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4864" docExpressionCount="507" docLength="7423" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="449267">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGeneratedCombinationTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class PrintGeneratedCombinationTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String methodName = "printGeneratedCombinationDerivedSafety";


	public PrintGeneratedCombinationTest() {
	}
	@Override
	protected  String methodName() {
		return methodName;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
//		    String[] anOutputLines = anOutput.split("\n");
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);

		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty()) {
		    	return fail("No Output");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
//		    Boolean aFirstValPassed = verify(anOutput1,aUtilityClass, aVerifyingMethod);
		    
		    if (verify(anOutput1,aUtilityClass, aVerifyingMethod) && verify(anOutput2, aUtilityClass, aVerifyingMethod)) {
		    	return pass();
		    }
		    return fail("One or more outputs of " + methodName() + " not consistent with result of method:" + verifyingMethodName);
//		    String[] anOutputLines = anOutput.split("\n");
		    

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="558" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:13:38 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="449469" />
  <Command __id="559" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:14:06 EDT 2020" docASTNodeCount="677" docActiveCodeLength="4725" docExpressionCount="509" docLength="7092" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="477034">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\IsInferredSafeTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶public class IsInferredSafeTest extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 100; // secs¶	¶	protected Class[] parameterTypes= {Integer.TYPE,Integer.TYPE,Integer.TYPE};¶	protected Object[][] arguments={¶		{1,1,1},¶		{255,255,255},¶		¶	};¶	protected Object[] results={¶		true,¶		false,¶	¶	};¶	¶	protected String methodName="isInferredSafe";¶	¶	protected Object[] getResult() {¶		return results;¶	}¶	¶	protected Object[][] getArguments(){¶		return arguments;		¶	};¶	protected Class[] getParameterTypes() {¶		return parameterTypes;¶	};¶¶	public IsInferredSafeTest() {¶	}¶¶	¶	protected String methodName() {¶		return methodName;¶	};¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = getParameterTypes();¶		    Method aMethod = aUilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[][] anArguments = getArguments();¶		    Object[] aResults=getResult();¶		    int aNumSuccesses = 0;¶		    for (int anIndex = 0; anIndex < anArguments.length; anIndex++ ) {¶		    	Object[] anInputCombination = anArguments[anIndex];¶		    	Object anExpectedResult = aResults[anIndex];¶			    Boolean aRetVal =  (Boolean) BasicProjectExecution.timedInvoke(aUilityClass, aMethod, anInputCombination, TIME_OUT_MSECS);¶			    ¶			    if (!anExpectedResult.equals(aRetVal )) {¶		    		System.out.println("Expected retVal with args " + Arrays.toString(anInputCombination) + " did not return " + anExpectedResult);¶			    } else {¶			    	aNumSuccesses++;¶			    }¶¶		    }¶		    double "), Diff(DELETE,"p"), Diff(INSERT,"aP"), Diff(EQUAL,"ercentage"), Diff(DELETE,"="), Diff(INSERT," = "), Diff(EQUAL,"((double)"), Diff(INSERT," "), Diff(EQUAL,"aNumSuccesses)/aResults.length;¶		   "), Diff(INSERT," "), Diff(EQUAL,"return "), Diff(DELETE,"pass();"), Diff(INSERT,"aPercentage == 1?pass():partialPass(aPercentage, aNumSuccesses + " tests passed out of " +   aResults.length);  ¶"), Diff(EQUAL,"¶¶		} catch ( Throwable e) {¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
public class IsInferredSafeTest extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 100; // secs
	
	protected Class[] parameterTypes= {Integer.TYPE,Integer.TYPE,Integer.TYPE};
	protected Object[][] arguments={
		{1,1,1},
		{255,255,255},
		
	};
	protected Object[] results={
		true,
		false,
	
	};
	
	protected String methodName="isInferredSafe";
	
	protected Object[] getResult() {
		return results;
	}
	
	protected Object[][] getArguments(){
		return arguments;		
	};
	protected Class[] getParameterTypes() {
		return parameterTypes;
	};

	public IsInferredSafeTest() {
	}

	
	protected String methodName() {
		return methodName;
	};
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = getParameterTypes();
		    Method aMethod = aUilityClass.getMethod(methodName(), aParameterTypes);
		    Object[][] anArguments = getArguments();
		    Object[] aResults=getResult();
		    int aNumSuccesses = 0;
		    for (int anIndex = 0; anIndex < anArguments.length; anIndex++ ) {
		    	Object[] anInputCombination = anArguments[anIndex];
		    	Object anExpectedResult = aResults[anIndex];
			    Boolean aRetVal =  (Boolean) BasicProjectExecution.timedInvoke(aUilityClass, aMethod, anInputCombination, TIME_OUT_MSECS);
			    
			    if (!anExpectedResult.equals(aRetVal )) {
		    		System.out.println("Expected retVal with args " + Arrays.toString(anInputCombination) + " did not return " + anExpectedResult);
			    } else {
			    	aNumSuccesses++;
			    }

		    }
		    double aPercentage = ((double) aNumSuccesses)/aResults.length;
		    return aPercentage == 1?pass():partialPass(aPercentage, aNumSuccesses + " tests passed out of " +   aResults.length);  


		} catch ( Throwable e) {
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="560" _type="MoveCaretCommand" caretOffset="2448" date="Wed Sep 09 08:14:06 EDT 2020" docOffset="4666" starttimestamp="1599653169283" timestamp="477256" />
  <Command __id="562" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:14:10 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="481131" />
  <Command __id="563" _type="CopyCommand" date="Wed Sep 09 08:14:41 EDT 2020" starttimestamp="1599653169283" timestamp="512558" />
  <Command __id="564" _type="ShellCommand" date="Wed Sep 09 08:14:45 EDT 2020" starttimestamp="1599653169283" timestamp="516252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="561" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:14:10 EDT 2020" docASTNodeCount="854" docActiveCodeLength="6594" docExpressionCount="655" docLength="9000" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="480886">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGivenAndGeneratedCombinationTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class PrintGivenAndGeneratedCombinationTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String methodName = "printGivenAndGeneratedCombinationsDerivedSafety";

	//the expected output for first 8 lines
	protected static String[] anExpectedOutput= {
			"Distance,Duration,Exhalation,IsSafe",
			"13,30,30,true",
			"6,30,10,true",
			"27,30,50,true",
			"13,15,50,true",
			"13,120,10,true",
			"27,120,30,true",
			"6,15,30,true"
	};

	public PrintGivenAndGeneratedCombinationTest() {
	}
	
	protected String[] anExpectedOutput() {
		return anExpectedOutput;
	}
	
	@Override
	protected  String methodName() {
		return methodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
		String [] anExpectedOutputList=anExpectedOutput();
	    boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }
	    return passing;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="565" _type="ShellCommand" date="Wed Sep 09 08:15:04 EDT 2020" starttimestamp="1599653169283" timestamp="535264" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="566" _type="PasteCommand" date="Wed Sep 09 08:15:04 EDT 2020" starttimestamp="1599653169283" timestamp="535616" />
  <Command __id="567" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:15:05 EDT 2020" starttimestamp="1599653169283" timestamp="535755" />
  <Command __id="568" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:15:05 EDT 2020" starttimestamp="1599653169283" timestamp="535831" />
  <Command __id="569" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:15:05 EDT 2020" starttimestamp="1599653169283" timestamp="535831" />
  <Command __id="570" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:15:05 EDT 2020" starttimestamp="1599653169283" timestamp="535847" />
  <Command __id="571" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:15:05 EDT 2020" starttimestamp="1599653169283" timestamp="535848" />
  <Command __id="572" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:15:05 EDT 2020" starttimestamp="1599653169283" timestamp="535862" />
  <Command __id="574" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:15:12 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="543031" />
  <Command __id="573" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:15:12 EDT 2020" docASTNodeCount="854" docActiveCodeLength="6578" docExpressionCount="655" docLength="8984" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="542788">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String methodName = "printGivenAndGeneratedCombinationsDerivedSafety";

	//the expected output for first 8 lines
	protected static String[] anExpectedOutput= {
			"Distance,Duration,Exhalation,IsSafe",
			"13,30,30,true",
			"6,30,10,true",
			"27,30,50,true",
			"13,15,50,true",
			"13,120,10,true",
			"27,120,30,true",
			"6,15,30,true"
	};

	public CompareSafetyComputationsTest() {
	}
	
	protected String[] anExpectedOutput() {
		return anExpectedOutput;
	}
	
	@Override
	protected  String methodName() {
		return methodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
		String [] anExpectedOutputList=anExpectedOutput();
	    boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }
	    return passing;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="575" _type="SelectTextCommand" caretOffset="651" date="Wed Sep 09 08:15:18 EDT 2020" end="651" start="412" starttimestamp="1599653169283" timestamp="549151" />
  <Command __id="577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:19 EDT 2020" starttimestamp="1599653169283" timestamp="550534" />
  <Command __id="578" _type="MoveCaretCommand" caretOffset="367" date="Wed Sep 09 08:15:21 EDT 2020" docOffset="2720" starttimestamp="1599653169283" timestamp="551898" />
  <Command __id="580" _type="InsertStringCommand" date="Wed Sep 09 08:15:21 EDT 2020" starttimestamp="1599653169283" timestamp="552612" timestamp2="552612">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="581" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:15:22 EDT 2020" starttimestamp="1599653169283" timestamp="552868" />
  <Command __id="583" _type="InsertStringCommand" date="Wed Sep 09 08:15:22 EDT 2020" starttimestamp="1599653169283" timestamp="553185" timestamp2="553185">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="585" _type="InsertStringCommand" date="Wed Sep 09 08:15:23 EDT 2020" starttimestamp="1599653169283" timestamp="554005" timestamp2="554005">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="587" _type="InsertStringCommand" date="Wed Sep 09 08:15:23 EDT 2020" starttimestamp="1599653169283" timestamp="554105" timestamp2="554105">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="589" _type="InsertStringCommand" date="Wed Sep 09 08:15:23 EDT 2020" starttimestamp="1599653169283" timestamp="554185" timestamp2="554185">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="591" _type="InsertStringCommand" date="Wed Sep 09 08:15:23 EDT 2020" starttimestamp="1599653169283" timestamp="554280" timestamp2="554280">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="593" _type="InsertStringCommand" date="Wed Sep 09 08:15:23 EDT 2020" starttimestamp="1599653169283" timestamp="554433" timestamp2="554433">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="595" _type="InsertStringCommand" date="Wed Sep 09 08:15:23 EDT 2020" starttimestamp="1599653169283" timestamp="554601" timestamp2="554601">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="597" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="554793" timestamp2="554793">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="599" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="554938" timestamp2="554938">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="601" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="555132" timestamp2="555132">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="603" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="555351" timestamp2="555351">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="605" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="555486" timestamp2="555486">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="607" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="555567" timestamp2="555567">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="609" _type="InsertStringCommand" date="Wed Sep 09 08:15:24 EDT 2020" starttimestamp="1599653169283" timestamp="555708" timestamp2="555708">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="611" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="555754" timestamp2="555754">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="613" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="555864" timestamp2="555864">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="615" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="555962" timestamp2="555962">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="617" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="556289" timestamp2="556289">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="619" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="556462" timestamp2="556462">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="621" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="556595" timestamp2="556595">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="623" _type="InsertStringCommand" date="Wed Sep 09 08:15:25 EDT 2020" starttimestamp="1599653169283" timestamp="556652" timestamp2="556652">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="576" _type="Delete" date="Wed Sep 09 08:15:19 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6339" docExpressionCount="644" docLength="8745" endLine="61" length="239" offset="2765" startLine="52" starttimestamp="1599653169283" timestamp="550519">
    <text><![CDATA[protected static String[] anExpectedOutput= {
			"Distance,Duration,Exhalation,IsSafe",
			"13,30,30,true",
			"6,30,10,true",
			"27,30,50,true",
			"13,15,50,true",
			"13,120,10,true",
			"27,120,30,true",
			"6,15,30,true"
	};]]></text>
  </DocumentChange>
  <DocumentChange __id="579" _type="Insert" date="Wed Sep 09 08:15:21 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6342" docExpressionCount="644" docLength="8748" length="3" offset="2720" starttimestamp="1599653169283" timestamp="552604">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="582" _type="Insert" date="Wed Sep 09 08:15:22 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6343" docExpressionCount="644" docLength="8749" length="1" offset="2720" starttimestamp="1599653169283" timestamp="553183">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="584" _type="Insert" date="Wed Sep 09 08:15:23 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6344" docExpressionCount="644" docLength="8750" length="1" offset="2721" starttimestamp="1599653169283" timestamp="554001">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="586" _type="Insert" date="Wed Sep 09 08:15:23 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6345" docExpressionCount="644" docLength="8751" length="1" offset="2722" starttimestamp="1599653169283" timestamp="554101">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="588" _type="Insert" date="Wed Sep 09 08:15:23 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6346" docExpressionCount="644" docLength="8752" length="1" offset="2723" starttimestamp="1599653169283" timestamp="554180">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="590" _type="Insert" date="Wed Sep 09 08:15:23 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6347" docExpressionCount="644" docLength="8753" length="1" offset="2724" starttimestamp="1599653169283" timestamp="554276">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="592" _type="Insert" date="Wed Sep 09 08:15:23 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6348" docExpressionCount="644" docLength="8754" length="1" offset="2725" starttimestamp="1599653169283" timestamp="554429">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="594" _type="Insert" date="Wed Sep 09 08:15:23 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6349" docExpressionCount="644" docLength="8755" length="1" offset="2726" starttimestamp="1599653169283" timestamp="554597">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="596" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6350" docExpressionCount="644" docLength="8756" length="1" offset="2727" starttimestamp="1599653169283" timestamp="554790">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="598" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="837" docActiveCodeLength="6351" docExpressionCount="644" docLength="8757" length="1" offset="2728" starttimestamp="1599653169283" timestamp="554934">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="600" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="838" docActiveCodeLength="6352" docExpressionCount="644" docLength="8758" length="1" offset="2729" starttimestamp="1599653169283" timestamp="555127">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="602" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="838" docActiveCodeLength="6353" docExpressionCount="644" docLength="8759" length="1" offset="2730" starttimestamp="1599653169283" timestamp="555347">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="604" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="838" docActiveCodeLength="6354" docExpressionCount="644" docLength="8760" length="1" offset="2731" starttimestamp="1599653169283" timestamp="555481">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="606" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="838" docActiveCodeLength="6355" docExpressionCount="644" docLength="8761" length="1" offset="2732" starttimestamp="1599653169283" timestamp="555563">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="608" _type="Insert" date="Wed Sep 09 08:15:24 EDT 2020" docASTNodeCount="838" docActiveCodeLength="6356" docExpressionCount="644" docLength="8762" length="1" offset="2733" starttimestamp="1599653169283" timestamp="555703">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="610" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="838" docActiveCodeLength="6357" docExpressionCount="644" docLength="8763" length="1" offset="2734" starttimestamp="1599653169283" timestamp="555749">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="612" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6358" docExpressionCount="644" docLength="8764" length="1" offset="2735" starttimestamp="1599653169283" timestamp="555860">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="614" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6359" docExpressionCount="644" docLength="8765" length="1" offset="2736" starttimestamp="1599653169283" timestamp="555957">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="616" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6360" docExpressionCount="644" docLength="8766" length="1" offset="2737" starttimestamp="1599653169283" timestamp="556285">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="618" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6361" docExpressionCount="644" docLength="8767" length="1" offset="2738" starttimestamp="1599653169283" timestamp="556457">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="620" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6362" docExpressionCount="644" docLength="8768" length="1" offset="2739" starttimestamp="1599653169283" timestamp="556590">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="622" _type="Insert" date="Wed Sep 09 08:15:25 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6363" docExpressionCount="644" docLength="8769" length="1" offset="2740" starttimestamp="1599653169283" timestamp="556649">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="624" _type="Insert" date="Wed Sep 09 08:15:26 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6364" docExpressionCount="644" docLength="8770" length="1" offset="2741" starttimestamp="1599653169283" timestamp="556796">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="625" _type="InsertStringCommand" date="Wed Sep 09 08:15:26 EDT 2020" starttimestamp="1599653169283" timestamp="556800" timestamp2="556800">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="626" _type="Insert" date="Wed Sep 09 08:15:26 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6365" docExpressionCount="644" docLength="8771" length="1" offset="2742" starttimestamp="1599653169283" timestamp="556856">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="627" _type="InsertStringCommand" date="Wed Sep 09 08:15:26 EDT 2020" starttimestamp="1599653169283" timestamp="556862" timestamp2="556862">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="628" _type="Insert" date="Wed Sep 09 08:15:26 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6366" docExpressionCount="644" docLength="8772" length="1" offset="2743" starttimestamp="1599653169283" timestamp="557129">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="629" _type="InsertStringCommand" date="Wed Sep 09 08:15:26 EDT 2020" starttimestamp="1599653169283" timestamp="557134" timestamp2="557134">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="630" _type="Insert" date="Wed Sep 09 08:15:29 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6367" docExpressionCount="646" docLength="8773" length="1" offset="2744" starttimestamp="1599653169283" timestamp="559817">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="631" _type="InsertStringCommand" date="Wed Sep 09 08:15:29 EDT 2020" starttimestamp="1599653169283" timestamp="559822" timestamp2="559822">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="632" _type="Insert" date="Wed Sep 09 08:15:29 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6368" docExpressionCount="646" docLength="8774" length="1" offset="2745" starttimestamp="1599653169283" timestamp="560530">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="633" _type="InsertStringCommand" date="Wed Sep 09 08:15:29 EDT 2020" starttimestamp="1599653169283" timestamp="560536" timestamp2="560536">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="634" _type="Insert" date="Wed Sep 09 08:15:30 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6369" docExpressionCount="646" docLength="8775" length="1" offset="2746" starttimestamp="1599653169283" timestamp="560826">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="635" _type="InsertStringCommand" date="Wed Sep 09 08:15:30 EDT 2020" starttimestamp="1599653169283" timestamp="560830" timestamp2="560830">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="636" _type="Insert" date="Wed Sep 09 08:15:30 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6370" docExpressionCount="646" docLength="8776" length="1" offset="2747" starttimestamp="1599653169283" timestamp="560985">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="637" _type="InsertStringCommand" date="Wed Sep 09 08:15:30 EDT 2020" starttimestamp="1599653169283" timestamp="560990" timestamp2="560990">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="638" _type="Delete" date="Wed Sep 09 08:15:31 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6369" docExpressionCount="646" docLength="8775" endLine="50" length="1" offset="2747" startLine="50" starttimestamp="1599653169283" timestamp="562092">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="639" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:31 EDT 2020" starttimestamp="1599653169283" timestamp="562095" />
  <DocumentChange __id="640" _type="Delete" date="Wed Sep 09 08:15:31 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6368" docExpressionCount="646" docLength="8774" endLine="50" length="1" offset="2746" startLine="50" starttimestamp="1599653169283" timestamp="562270">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="641" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:31 EDT 2020" starttimestamp="1599653169283" timestamp="562273" />
  <DocumentChange __id="642" _type="Delete" date="Wed Sep 09 08:15:32 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6367" docExpressionCount="646" docLength="8773" endLine="50" length="1" offset="2745" startLine="50" starttimestamp="1599653169283" timestamp="562780">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="643" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:32 EDT 2020" starttimestamp="1599653169283" timestamp="562783" />
  <Command __id="645" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:32 EDT 2020" starttimestamp="1599653169283" timestamp="562958" />
  <DocumentChange __id="644" _type="Delete" date="Wed Sep 09 08:15:32 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6366" docExpressionCount="644" docLength="8772" endLine="50" length="1" offset="2744" startLine="50" starttimestamp="1599653169283" timestamp="562956">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="647" _type="Insert" date="Wed Sep 09 08:15:38 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6367" docExpressionCount="644" docLength="8773" length="1" offset="2655" starttimestamp="1599653169283" timestamp="569432">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="649" _type="Insert" date="Wed Sep 09 08:15:39 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6368" docExpressionCount="644" docLength="8774" length="1" offset="2656" starttimestamp="1599653169283" timestamp="569784">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="651" _type="Insert" date="Wed Sep 09 08:15:39 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6369" docExpressionCount="644" docLength="8775" length="1" offset="2657" starttimestamp="1599653169283" timestamp="569960">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="653" _type="Insert" date="Wed Sep 09 08:15:39 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6370" docExpressionCount="644" docLength="8776" length="1" offset="2658" starttimestamp="1599653169283" timestamp="570638">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="655" _type="Insert" date="Wed Sep 09 08:15:40 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6371" docExpressionCount="644" docLength="8777" length="1" offset="2659" starttimestamp="1599653169283" timestamp="570979">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="657" _type="Insert" date="Wed Sep 09 08:15:40 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6372" docExpressionCount="644" docLength="8778" length="1" offset="2660" starttimestamp="1599653169283" timestamp="571135">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="659" _type="Insert" date="Wed Sep 09 08:15:40 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6373" docExpressionCount="644" docLength="8779" length="1" offset="2661" starttimestamp="1599653169283" timestamp="571329">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="661" _type="Delete" date="Wed Sep 09 08:15:41 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6372" docExpressionCount="644" docLength="8778" endLine="49" length="1" offset="2662" startLine="49" starttimestamp="1599653169283" timestamp="572112">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="663" _type="Insert" date="Wed Sep 09 08:15:42 EDT 2020" docASTNodeCount="839" docActiveCodeLength="6373" docExpressionCount="644" docLength="8779" length="1" offset="2662" starttimestamp="1599653169283" timestamp="573241">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="646" _type="MoveCaretCommand" caretOffset="302" date="Wed Sep 09 08:15:37 EDT 2020" docOffset="2655" starttimestamp="1599653169283" timestamp="568652" />
  <Command __id="648" _type="InsertStringCommand" date="Wed Sep 09 08:15:38 EDT 2020" starttimestamp="1599653169283" timestamp="569438" timestamp2="569438">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="650" _type="InsertStringCommand" date="Wed Sep 09 08:15:39 EDT 2020" starttimestamp="1599653169283" timestamp="569800" timestamp2="569800">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="652" _type="InsertStringCommand" date="Wed Sep 09 08:15:39 EDT 2020" starttimestamp="1599653169283" timestamp="569971" timestamp2="569971">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="654" _type="InsertStringCommand" date="Wed Sep 09 08:15:39 EDT 2020" starttimestamp="1599653169283" timestamp="570651" timestamp2="570651">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="656" _type="InsertStringCommand" date="Wed Sep 09 08:15:40 EDT 2020" starttimestamp="1599653169283" timestamp="570984" timestamp2="570984">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="658" _type="InsertStringCommand" date="Wed Sep 09 08:15:40 EDT 2020" starttimestamp="1599653169283" timestamp="571142" timestamp2="571142">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="660" _type="InsertStringCommand" date="Wed Sep 09 08:15:40 EDT 2020" starttimestamp="1599653169283" timestamp="571339" timestamp2="571339">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="662" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Sep 09 08:15:41 EDT 2020" starttimestamp="1599653169283" timestamp="572116" />
  <Command __id="664" _type="InsertStringCommand" date="Wed Sep 09 08:15:42 EDT 2020" starttimestamp="1599653169283" timestamp="573245" timestamp2="573245">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="665" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:15:42 EDT 2020" starttimestamp="1599653169283" timestamp="573595" />
  <Command __id="667" _type="InsertStringCommand" date="Wed Sep 09 08:15:45 EDT 2020" starttimestamp="1599653169283" timestamp="576188" timestamp2="576188">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="669" _type="InsertStringCommand" date="Wed Sep 09 08:15:45 EDT 2020" starttimestamp="1599653169283" timestamp="576372" timestamp2="576372">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="671" _type="InsertStringCommand" date="Wed Sep 09 08:15:45 EDT 2020" starttimestamp="1599653169283" timestamp="576552" timestamp2="576552">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="673" _type="InsertStringCommand" date="Wed Sep 09 08:15:46 EDT 2020" starttimestamp="1599653169283" timestamp="576720" timestamp2="576720">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="675" _type="InsertStringCommand" date="Wed Sep 09 08:15:46 EDT 2020" starttimestamp="1599653169283" timestamp="576971" timestamp2="576971">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="677" _type="InsertStringCommand" date="Wed Sep 09 08:15:46 EDT 2020" starttimestamp="1599653169283" timestamp="577141" timestamp2="577141">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="679" _type="InsertStringCommand" date="Wed Sep 09 08:15:46 EDT 2020" starttimestamp="1599653169283" timestamp="577282" timestamp2="577282">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="681" _type="InsertStringCommand" date="Wed Sep 09 08:15:46 EDT 2020" starttimestamp="1599653169283" timestamp="577443" timestamp2="577443">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="683" _type="InsertStringCommand" date="Wed Sep 09 08:15:47 EDT 2020" starttimestamp="1599653169283" timestamp="577885" timestamp2="577885">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="685" _type="InsertStringCommand" date="Wed Sep 09 08:15:47 EDT 2020" starttimestamp="1599653169283" timestamp="578002" timestamp2="578002">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="687" _type="InsertStringCommand" date="Wed Sep 09 08:15:47 EDT 2020" starttimestamp="1599653169283" timestamp="578163" timestamp2="578163">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="689" _type="InsertStringCommand" date="Wed Sep 09 08:15:47 EDT 2020" starttimestamp="1599653169283" timestamp="578213" timestamp2="578213">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="691" _type="InsertStringCommand" date="Wed Sep 09 08:15:47 EDT 2020" starttimestamp="1599653169283" timestamp="578371" timestamp2="578371">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="666" _type="Insert" date="Wed Sep 09 08:15:45 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6374" docExpressionCount="646" docLength="8780" length="1" offset="2751" starttimestamp="1599653169283" timestamp="576176">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="668" _type="Insert" date="Wed Sep 09 08:15:45 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6375" docExpressionCount="646" docLength="8781" length="1" offset="2752" starttimestamp="1599653169283" timestamp="576359">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="670" _type="Insert" date="Wed Sep 09 08:15:45 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6376" docExpressionCount="646" docLength="8782" length="1" offset="2753" starttimestamp="1599653169283" timestamp="576539">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="672" _type="Insert" date="Wed Sep 09 08:15:45 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6377" docExpressionCount="646" docLength="8783" length="1" offset="2754" starttimestamp="1599653169283" timestamp="576704">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="674" _type="Insert" date="Wed Sep 09 08:15:46 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6378" docExpressionCount="646" docLength="8784" length="1" offset="2755" starttimestamp="1599653169283" timestamp="576963">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="676" _type="Insert" date="Wed Sep 09 08:15:46 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6379" docExpressionCount="646" docLength="8785" length="1" offset="2756" starttimestamp="1599653169283" timestamp="577128">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="678" _type="Insert" date="Wed Sep 09 08:15:46 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6380" docExpressionCount="646" docLength="8786" length="1" offset="2757" starttimestamp="1599653169283" timestamp="577275">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="680" _type="Insert" date="Wed Sep 09 08:15:46 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6381" docExpressionCount="646" docLength="8787" length="1" offset="2758" starttimestamp="1599653169283" timestamp="577431">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="682" _type="Insert" date="Wed Sep 09 08:15:47 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6382" docExpressionCount="646" docLength="8788" length="1" offset="2759" starttimestamp="1599653169283" timestamp="577874">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="684" _type="Insert" date="Wed Sep 09 08:15:47 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6383" docExpressionCount="646" docLength="8789" length="1" offset="2760" starttimestamp="1599653169283" timestamp="577995">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="686" _type="Insert" date="Wed Sep 09 08:15:47 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6384" docExpressionCount="646" docLength="8790" length="1" offset="2761" starttimestamp="1599653169283" timestamp="578149">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="688" _type="Insert" date="Wed Sep 09 08:15:47 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6385" docExpressionCount="646" docLength="8791" length="1" offset="2762" starttimestamp="1599653169283" timestamp="578201">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="690" _type="Insert" date="Wed Sep 09 08:15:47 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6386" docExpressionCount="646" docLength="8792" length="1" offset="2763" starttimestamp="1599653169283" timestamp="578357">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="692" _type="Insert" date="Wed Sep 09 08:15:47 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6387" docExpressionCount="646" docLength="8793" length="1" offset="2764" starttimestamp="1599653169283" timestamp="578475">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="694" _type="Insert" date="Wed Sep 09 08:15:48 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6388" docExpressionCount="646" docLength="8794" length="1" offset="2765" starttimestamp="1599653169283" timestamp="578849">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <DocumentChange __id="696" _type="Insert" date="Wed Sep 09 08:15:48 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6389" docExpressionCount="646" docLength="8795" length="1" offset="2766" starttimestamp="1599653169283" timestamp="578919">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="698" _type="Insert" date="Wed Sep 09 08:15:48 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6390" docExpressionCount="646" docLength="8796" length="1" offset="2767" starttimestamp="1599653169283" timestamp="579034">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="700" _type="Insert" date="Wed Sep 09 08:15:48 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6391" docExpressionCount="646" docLength="8797" length="1" offset="2768" starttimestamp="1599653169283" timestamp="579141">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="702" _type="Insert" date="Wed Sep 09 08:15:48 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6392" docExpressionCount="646" docLength="8798" length="1" offset="2769" starttimestamp="1599653169283" timestamp="579672">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="704" _type="Delete" date="Wed Sep 09 08:15:49 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6391" docExpressionCount="646" docLength="8797" endLine="50" length="1" offset="2769" startLine="50" starttimestamp="1599653169283" timestamp="580368">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="706" _type="Insert" date="Wed Sep 09 08:15:49 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6392" docExpressionCount="646" docLength="8798" length="1" offset="2769" starttimestamp="1599653169283" timestamp="580557">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="708" _type="Insert" date="Wed Sep 09 08:15:49 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6393" docExpressionCount="646" docLength="8799" length="1" offset="2770" starttimestamp="1599653169283" timestamp="580622">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="710" _type="Insert" date="Wed Sep 09 08:15:49 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6394" docExpressionCount="646" docLength="8800" length="1" offset="2771" starttimestamp="1599653169283" timestamp="580644">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="712" _type="Delete" date="Wed Sep 09 08:15:50 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6393" docExpressionCount="646" docLength="8799" endLine="50" length="1" offset="2771" startLine="50" starttimestamp="1599653169283" timestamp="581284">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="714" _type="Insert" date="Wed Sep 09 08:15:51 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6394" docExpressionCount="646" docLength="8800" length="1" offset="2771" starttimestamp="1599653169283" timestamp="581759">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="716" _type="Insert" date="Wed Sep 09 08:15:51 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6396" docExpressionCount="647" docLength="8802" length="2" offset="2772" starttimestamp="1599653169283" timestamp="582121">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="718" _type="Insert" date="Wed Sep 09 08:15:58 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6397" docExpressionCount="647" docLength="8803" length="1" offset="2773" starttimestamp="1599653169283" timestamp="589007">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="720" _type="Insert" date="Wed Sep 09 08:15:58 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6398" docExpressionCount="647" docLength="8804" length="1" offset="2774" starttimestamp="1599653169283" timestamp="589097">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="722" _type="Insert" date="Wed Sep 09 08:15:59 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6399" docExpressionCount="647" docLength="8805" length="1" offset="2775" starttimestamp="1599653169283" timestamp="590167">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="724" _type="Insert" date="Wed Sep 09 08:15:59 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6400" docExpressionCount="647" docLength="8806" length="1" offset="2776" starttimestamp="1599653169283" timestamp="590440">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="726" _type="Insert" date="Wed Sep 09 08:16:00 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6401" docExpressionCount="647" docLength="8807" length="1" offset="2777" starttimestamp="1599653169283" timestamp="591500">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="693" _type="InsertStringCommand" date="Wed Sep 09 08:15:47 EDT 2020" starttimestamp="1599653169283" timestamp="578491" timestamp2="578491">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="695" _type="InsertStringCommand" date="Wed Sep 09 08:15:48 EDT 2020" starttimestamp="1599653169283" timestamp="578858" timestamp2="578858">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="697" _type="InsertStringCommand" date="Wed Sep 09 08:15:48 EDT 2020" starttimestamp="1599653169283" timestamp="578923" timestamp2="578923">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Wed Sep 09 08:15:48 EDT 2020" starttimestamp="1599653169283" timestamp="579038" timestamp2="579038">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Wed Sep 09 08:15:48 EDT 2020" starttimestamp="1599653169283" timestamp="579155" timestamp2="579155">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="703" _type="InsertStringCommand" date="Wed Sep 09 08:15:48 EDT 2020" starttimestamp="1599653169283" timestamp="579679" timestamp2="579679">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="705" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:49 EDT 2020" starttimestamp="1599653169283" timestamp="580370" />
  <Command __id="707" _type="InsertStringCommand" date="Wed Sep 09 08:15:49 EDT 2020" starttimestamp="1599653169283" timestamp="580568" timestamp2="580568">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="709" _type="InsertStringCommand" date="Wed Sep 09 08:15:49 EDT 2020" starttimestamp="1599653169283" timestamp="580635" timestamp2="580635">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="711" _type="InsertStringCommand" date="Wed Sep 09 08:15:49 EDT 2020" starttimestamp="1599653169283" timestamp="580656" timestamp2="580656">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="713" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:15:50 EDT 2020" starttimestamp="1599653169283" timestamp="581292" />
  <Command __id="715" _type="InsertStringCommand" date="Wed Sep 09 08:15:51 EDT 2020" starttimestamp="1599653169283" timestamp="581780" timestamp2="581780">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="717" _type="InsertStringCommand" date="Wed Sep 09 08:15:51 EDT 2020" starttimestamp="1599653169283" timestamp="582124" timestamp2="582124">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="719" _type="InsertStringCommand" date="Wed Sep 09 08:15:58 EDT 2020" starttimestamp="1599653169283" timestamp="589014" timestamp2="589014">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="721" _type="InsertStringCommand" date="Wed Sep 09 08:15:58 EDT 2020" starttimestamp="1599653169283" timestamp="589099" timestamp2="589099">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="723" _type="InsertStringCommand" date="Wed Sep 09 08:15:59 EDT 2020" starttimestamp="1599653169283" timestamp="590168" timestamp2="590168">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="725" _type="InsertStringCommand" date="Wed Sep 09 08:15:59 EDT 2020" starttimestamp="1599653169283" timestamp="590444" timestamp2="590444">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="727" _type="InsertStringCommand" date="Wed Sep 09 08:16:00 EDT 2020" starttimestamp="1599653169283" timestamp="591506" timestamp2="591506">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="729" _type="InsertStringCommand" date="Wed Sep 09 08:16:01 EDT 2020" starttimestamp="1599653169283" timestamp="592538" timestamp2="592538">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="731" _type="InsertStringCommand" date="Wed Sep 09 08:16:02 EDT 2020" starttimestamp="1599653169283" timestamp="592900" timestamp2="592900">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="733" _type="InsertStringCommand" date="Wed Sep 09 08:16:02 EDT 2020" starttimestamp="1599653169283" timestamp="593070" timestamp2="593070">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="735" _type="InsertStringCommand" date="Wed Sep 09 08:16:02 EDT 2020" starttimestamp="1599653169283" timestamp="593216" timestamp2="593216">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="737" _type="InsertStringCommand" date="Wed Sep 09 08:16:02 EDT 2020" starttimestamp="1599653169283" timestamp="593383" timestamp2="593383">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="739" _type="InsertStringCommand" date="Wed Sep 09 08:16:03 EDT 2020" starttimestamp="1599653169283" timestamp="593726" timestamp2="593726">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="741" _type="InsertStringCommand" date="Wed Sep 09 08:16:03 EDT 2020" starttimestamp="1599653169283" timestamp="593855" timestamp2="593855">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="743" _type="InsertStringCommand" date="Wed Sep 09 08:16:03 EDT 2020" starttimestamp="1599653169283" timestamp="594036" timestamp2="594036">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="745" _type="InsertStringCommand" date="Wed Sep 09 08:16:03 EDT 2020" starttimestamp="1599653169283" timestamp="594166" timestamp2="594166">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="747" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:16:04 EDT 2020" starttimestamp="1599653169283" timestamp="594788" />
  <Command __id="749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:16:04 EDT 2020" starttimestamp="1599653169283" timestamp="594930" />
  <Command __id="751" _type="InsertStringCommand" date="Wed Sep 09 08:16:04 EDT 2020" starttimestamp="1599653169283" timestamp="595019" timestamp2="595019">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="753" _type="InsertStringCommand" date="Wed Sep 09 08:16:04 EDT 2020" starttimestamp="1599653169283" timestamp="595157" timestamp2="595157">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="754" _type="MoveCaretCommand" caretOffset="435" date="Wed Sep 09 08:16:15 EDT 2020" docOffset="2788" starttimestamp="1599653169283" timestamp="606077" />
  <Command __id="756" _type="InsertStringCommand" date="Wed Sep 09 08:16:15 EDT 2020" starttimestamp="1599653169283" timestamp="606716" timestamp2="606716">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="728" _type="Insert" date="Wed Sep 09 08:16:01 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6402" docExpressionCount="647" docLength="8808" length="1" offset="2778" starttimestamp="1599653169283" timestamp="592533">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="730" _type="Insert" date="Wed Sep 09 08:16:02 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6403" docExpressionCount="647" docLength="8809" length="1" offset="2779" starttimestamp="1599653169283" timestamp="592896">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="732" _type="Insert" date="Wed Sep 09 08:16:02 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6404" docExpressionCount="647" docLength="8810" length="1" offset="2780" starttimestamp="1599653169283" timestamp="593065">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="734" _type="Insert" date="Wed Sep 09 08:16:02 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6405" docExpressionCount="647" docLength="8811" length="1" offset="2781" starttimestamp="1599653169283" timestamp="593215">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="736" _type="Insert" date="Wed Sep 09 08:16:02 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6406" docExpressionCount="647" docLength="8812" length="1" offset="2782" starttimestamp="1599653169283" timestamp="593381">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="738" _type="Insert" date="Wed Sep 09 08:16:03 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6407" docExpressionCount="647" docLength="8813" length="1" offset="2783" starttimestamp="1599653169283" timestamp="593722">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="740" _type="Insert" date="Wed Sep 09 08:16:03 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6408" docExpressionCount="647" docLength="8814" length="1" offset="2784" starttimestamp="1599653169283" timestamp="593851">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="742" _type="Insert" date="Wed Sep 09 08:16:03 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6409" docExpressionCount="647" docLength="8815" length="1" offset="2785" starttimestamp="1599653169283" timestamp="594032">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="744" _type="Insert" date="Wed Sep 09 08:16:03 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6410" docExpressionCount="647" docLength="8816" length="1" offset="2786" starttimestamp="1599653169283" timestamp="594162">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="746" _type="Delete" date="Wed Sep 09 08:16:04 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6409" docExpressionCount="647" docLength="8815" endLine="50" length="1" offset="2786" startLine="50" starttimestamp="1599653169283" timestamp="594783">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="748" _type="Delete" date="Wed Sep 09 08:16:04 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6408" docExpressionCount="647" docLength="8814" endLine="50" length="1" offset="2785" startLine="50" starttimestamp="1599653169283" timestamp="594924">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="750" _type="Insert" date="Wed Sep 09 08:16:04 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6409" docExpressionCount="647" docLength="8815" length="1" offset="2785" starttimestamp="1599653169283" timestamp="595014">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="752" _type="Insert" date="Wed Sep 09 08:16:04 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6410" docExpressionCount="647" docLength="8816" length="1" offset="2786" starttimestamp="1599653169283" timestamp="595155">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="755" _type="Insert" date="Wed Sep 09 08:16:15 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6411" docExpressionCount="647" docLength="8817" length="1" offset="2788" starttimestamp="1599653169283" timestamp="606703">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="757" _type="MoveCaretCommand" caretOffset="346" date="Wed Sep 09 08:16:17 EDT 2020" docOffset="2699" starttimestamp="1599653169283" timestamp="608276" />
  <Command __id="758" _type="SelectTextCommand" caretOffset="370" date="Wed Sep 09 08:16:17 EDT 2020" end="370" start="323" starttimestamp="1599653169283" timestamp="608416" />
  <DocumentChange __id="759" _type="Replace" date="Wed Sep 09 08:16:38 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6365" docExpressionCount="647" docLength="8771" endLine="49" insertionLength="1" int_docASTNodeCount="845" int_docActiveCodeLength="6364" int_docExpressionCount="647" int_docLength="8770" length="47" offset="2676" startLine="49" starttimestamp="1599653169283" timestamp="629236">
    <deletedText><![CDATA[printGivenAndGeneratedCombinationsDerivedSafety]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <Command __id="760" _type="InsertStringCommand" date="Wed Sep 09 08:16:38 EDT 2020" starttimestamp="1599653169283" timestamp="629255" timestamp2="629255">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="761" _type="Insert" date="Wed Sep 09 08:16:38 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6366" docExpressionCount="647" docLength="8772" length="1" offset="2677" starttimestamp="1599653169283" timestamp="629341">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="762" _type="InsertStringCommand" date="Wed Sep 09 08:16:38 EDT 2020" starttimestamp="1599653169283" timestamp="629344" timestamp2="629344">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="763" _type="Insert" date="Wed Sep 09 08:16:39 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6367" docExpressionCount="647" docLength="8773" length="1" offset="2678" starttimestamp="1599653169283" timestamp="629839">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="764" _type="InsertStringCommand" date="Wed Sep 09 08:16:39 EDT 2020" starttimestamp="1599653169283" timestamp="629849" timestamp2="629849">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="765" _type="Insert" date="Wed Sep 09 08:16:39 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6368" docExpressionCount="647" docLength="8774" length="1" offset="2679" starttimestamp="1599653169283" timestamp="630012">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="766" _type="InsertStringCommand" date="Wed Sep 09 08:16:39 EDT 2020" starttimestamp="1599653169283" timestamp="630022" timestamp2="630022">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="767" _type="Insert" date="Wed Sep 09 08:16:39 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6369" docExpressionCount="647" docLength="8775" length="1" offset="2680" starttimestamp="1599653169283" timestamp="630150">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="768" _type="InsertStringCommand" date="Wed Sep 09 08:16:39 EDT 2020" starttimestamp="1599653169283" timestamp="630153" timestamp2="630153">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="769" _type="Insert" date="Wed Sep 09 08:16:40 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6370" docExpressionCount="647" docLength="8776" length="1" offset="2681" starttimestamp="1599653169283" timestamp="630739">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="770" _type="InsertStringCommand" date="Wed Sep 09 08:16:40 EDT 2020" starttimestamp="1599653169283" timestamp="630754" timestamp2="630754">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="771" _type="Insert" date="Wed Sep 09 08:16:40 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6371" docExpressionCount="647" docLength="8777" length="1" offset="2682" starttimestamp="1599653169283" timestamp="630850">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="772" _type="InsertStringCommand" date="Wed Sep 09 08:16:40 EDT 2020" starttimestamp="1599653169283" timestamp="630856" timestamp2="630856">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="773" _type="Insert" date="Wed Sep 09 08:16:40 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6372" docExpressionCount="647" docLength="8778" length="1" offset="2683" starttimestamp="1599653169283" timestamp="631051">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="774" _type="InsertStringCommand" date="Wed Sep 09 08:16:40 EDT 2020" starttimestamp="1599653169283" timestamp="631064" timestamp2="631064">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="775" _type="Insert" date="Wed Sep 09 08:16:40 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6373" docExpressionCount="647" docLength="8779" length="1" offset="2684" starttimestamp="1599653169283" timestamp="631217">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="776" _type="InsertStringCommand" date="Wed Sep 09 08:16:40 EDT 2020" starttimestamp="1599653169283" timestamp="631228" timestamp2="631228">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="777" _type="Insert" date="Wed Sep 09 08:16:40 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6374" docExpressionCount="647" docLength="8780" length="1" offset="2685" starttimestamp="1599653169283" timestamp="631515">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="778" _type="InsertStringCommand" date="Wed Sep 09 08:16:40 EDT 2020" starttimestamp="1599653169283" timestamp="631524" timestamp2="631524">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="779" _type="Insert" date="Wed Sep 09 08:16:40 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6375" docExpressionCount="647" docLength="8781" length="1" offset="2686" starttimestamp="1599653169283" timestamp="631640">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="780" _type="InsertStringCommand" date="Wed Sep 09 08:16:40 EDT 2020" starttimestamp="1599653169283" timestamp="631649" timestamp2="631649">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="781" _type="Insert" date="Wed Sep 09 08:16:41 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6376" docExpressionCount="647" docLength="8782" length="1" offset="2687" starttimestamp="1599653169283" timestamp="631826">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="782" _type="InsertStringCommand" date="Wed Sep 09 08:16:41 EDT 2020" starttimestamp="1599653169283" timestamp="631838" timestamp2="631838">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="783" _type="Insert" date="Wed Sep 09 08:16:41 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6377" docExpressionCount="647" docLength="8783" length="1" offset="2688" starttimestamp="1599653169283" timestamp="631935">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="784" _type="InsertStringCommand" date="Wed Sep 09 08:16:41 EDT 2020" starttimestamp="1599653169283" timestamp="631947" timestamp2="631947">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="785" _type="Delete" date="Wed Sep 09 08:16:42 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6376" docExpressionCount="647" docLength="8782" endLine="49" length="1" offset="2688" startLine="49" starttimestamp="1599653169283" timestamp="633159">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="786" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:16:42 EDT 2020" starttimestamp="1599653169283" timestamp="633165" />
  <DocumentChange __id="787" _type="Insert" date="Wed Sep 09 08:16:42 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6377" docExpressionCount="647" docLength="8783" length="1" offset="2688" starttimestamp="1599653169283" timestamp="633353">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="788" _type="InsertStringCommand" date="Wed Sep 09 08:16:42 EDT 2020" starttimestamp="1599653169283" timestamp="633364" timestamp2="633364">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="789" _type="Delete" date="Wed Sep 09 08:16:42 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6376" docExpressionCount="647" docLength="8782" endLine="49" length="1" offset="2688" startLine="49" starttimestamp="1599653169283" timestamp="633601">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="790" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:16:42 EDT 2020" starttimestamp="1599653169283" timestamp="633604" />
  <DocumentChange __id="791" _type="Delete" date="Wed Sep 09 08:16:43 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6375" docExpressionCount="647" docLength="8781" endLine="49" length="1" offset="2687" startLine="49" starttimestamp="1599653169283" timestamp="633826">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="792" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:16:43 EDT 2020" starttimestamp="1599653169283" timestamp="633834" />
  <DocumentChange __id="793" _type="Insert" date="Wed Sep 09 08:16:43 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6376" docExpressionCount="647" docLength="8782" length="1" offset="2687" starttimestamp="1599653169283" timestamp="633845">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="794" _type="InsertStringCommand" date="Wed Sep 09 08:16:43 EDT 2020" starttimestamp="1599653169283" timestamp="633852" timestamp2="633852">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="796" _type="InsertStringCommand" date="Wed Sep 09 08:16:43 EDT 2020" starttimestamp="1599653169283" timestamp="633934" timestamp2="633934">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="795" _type="Insert" date="Wed Sep 09 08:16:43 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6377" docExpressionCount="647" docLength="8783" length="1" offset="2688" starttimestamp="1599653169283" timestamp="633925">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="797" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637432" />
  <Command __id="798" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637527" />
  <Command __id="799" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637593" />
  <Command __id="800" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637594" />
  <Command __id="801" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637622" />
  <Command __id="802" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637622" />
  <Command __id="803" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:16:46 EDT 2020" starttimestamp="1599653169283" timestamp="637642" />
  <Command __id="805" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:16:50 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="641197" />
  <Command __id="804" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:16:50 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="640941">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;

public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 300; // secs
	

	protected static  String verifyingMethodName = "isDerivedSafe";
	protected static Class[] NO_ARG_TYPES = {};
	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};

	protected static Object[] NO_ARGS = {};

	protected  abstract String methodName();
	
	protected  String verifyingMethodName() {
		return verifyingMethodName;
	}
	
	protected  Class[] argumentTypes() {
		return NO_ARG_TYPES;
	}
	
	protected  Class[] verifyingArgumentTypes() {
		return VERIFYING_ARG_TYPES;
	}
	
	
	protected  Object[] getArguments() {
		return NO_ARGS;
	}

	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	

	@Override
	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException;
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="806" _type="MoveCaretCommand" caretOffset="2034" date="Wed Sep 09 08:17:14 EDT 2020" docOffset="4387" starttimestamp="1599653169283" timestamp="665074" />
  <Command __id="807" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:17:33 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6377" docExpressionCount="647" docLength="8783" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="684231">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String "), Diff(DELETE,"m"), Diff(INSERT,"derivedM"), Diff(EQUAL,"ethodName = ""), Diff(DELETE,"printGivenAndGeneratedCombination"), Diff(INSERT,"i"), Diff(EQUAL,"sDerivedSafe"), Diff(DELETE,"ty"), Diff(EQUAL,"";¶"), Diff(DELETE,"¶	//the expected output for first 8 lines¶	protected static String[] anExpectedOutput= {¶			"Distance,Duration,Exhalation,Is"), Diff(INSERT,"	protected final String inferredMethodName = "isInferred"), Diff(EQUAL,"Safe""), Diff(DELETE,","), Diff(INSERT,";"), Diff(EQUAL,"¶	"), Diff(DELETE,"		"13,30,30,true",¶			"6,30,10,true",¶			"27,30,50,true",¶			"13,15,50,true",¶			"13,120,10,true",¶			"27,120,30,true",¶			"6,15,30,true""), Diff(INSERT,"¶	//the expected output for first 8 lines"), Diff(EQUAL,"¶	"), Diff(DELETE,"};"), Diff(EQUAL,"¶¶	public CompareSafetyComputationsTest() {¶	}¶	¶	protected String[] anExpectedOutput() {¶		return anExpectedOutput;¶	}¶	¶	@Override¶	protected  String methodName() {¶		return methodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {¶		String [] anExpectedOutputList=anExpectedOutput();¶	    boolean passing=true;¶	    for(int i=0;i<anOutputLines.length;i++) {¶	    	if(i<anExpectedOutputList.length) {¶	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {¶	    			passing=false;¶	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");¶	    		}¶	    	}else if (i==anExpectedOutputList.length) {¶	    		if(!anOutputLines[i].matches("-+?")) {¶	    			passing=false;¶		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");¶	    		}¶	    	}else {¶	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){¶	    			passing=false;¶	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");¶	    		}¶	    	}¶	    }¶	    return passing;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	//the expected output for first 8 lines
	

	public CompareSafetyComputationsTest() {
	}
	
	protected String[] anExpectedOutput() {
		return anExpectedOutput;
	}
	
	@Override
	protected  String methodName() {
		return methodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
		String [] anExpectedOutputList=anExpectedOutput();
	    boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }
	    return passing;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="808" _type="MoveCaretCommand" caretOffset="336" date="Wed Sep 09 08:17:33 EDT 2020" docOffset="2689" starttimestamp="1599653169283" timestamp="684319" />
  <Command __id="810" _type="MoveCaretCommand" caretOffset="2034" date="Wed Sep 09 08:17:35 EDT 2020" docOffset="4387" starttimestamp="1599653169283" timestamp="686028" />
  <Command __id="811" _type="MoveCaretCommand" caretOffset="191" date="Wed Sep 09 08:17:41 EDT 2020" docOffset="2544" starttimestamp="1599653169283" timestamp="692301" />
  <Command __id="812" _type="SelectTextCommand" caretOffset="204" date="Wed Sep 09 08:17:41 EDT 2020" end="204" start="183" starttimestamp="1599653169283" timestamp="692434" />
  <Command __id="813" _type="CopyCommand" date="Wed Sep 09 08:17:42 EDT 2020" starttimestamp="1599653169283" timestamp="692962" />
  <Command __id="815" _type="MoveCaretCommand" caretOffset="336" date="Wed Sep 09 08:17:43 EDT 2020" docOffset="2689" starttimestamp="1599653169283" timestamp="693888" />
  <Command __id="816" _type="MoveCaretCommand" caretOffset="205" date="Wed Sep 09 08:17:44 EDT 2020" docOffset="2558" starttimestamp="1599653169283" timestamp="694813" />
  <Command __id="817" _type="SelectTextCommand" caretOffset="215" date="Wed Sep 09 08:17:44 EDT 2020" end="215" start="180" starttimestamp="1599653169283" timestamp="694954" />
  <Command __id="819" _type="PasteCommand" date="Wed Sep 09 08:17:44 EDT 2020" starttimestamp="1599653169283" timestamp="695145" />
  <Command __id="820" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697244" />
  <Command __id="821" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697337" />
  <Command __id="822" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697399" />
  <Command __id="823" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697400" />
  <Command __id="824" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697439" />
  <Command __id="825" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697439" />
  <Command __id="826" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:17:46 EDT 2020" starttimestamp="1599653169283" timestamp="697453" />
  <Command __id="827" _type="MoveCaretCommand" caretOffset="297" date="Wed Sep 09 08:17:55 EDT 2020" docOffset="2650" starttimestamp="1599653169283" timestamp="705871" />
  <Command __id="828" _type="SelectTextCommand" caretOffset="305" date="Wed Sep 09 08:17:55 EDT 2020" end="305" start="288" starttimestamp="1599653169283" timestamp="705996" />
  <Command __id="829" _type="CopyCommand" date="Wed Sep 09 08:17:56 EDT 2020" starttimestamp="1599653169283" timestamp="707032" />
  <Command __id="830" _type="MoveCaretCommand" caretOffset="602" date="Wed Sep 09 08:17:56 EDT 2020" docOffset="2955" starttimestamp="1599653169283" timestamp="707667" />
  <Command __id="831" _type="SelectTextCommand" caretOffset="608" date="Wed Sep 09 08:17:57 EDT 2020" end="608" start="598" starttimestamp="1599653169283" timestamp="707799" />
  <Command __id="833" _type="PasteCommand" date="Wed Sep 09 08:17:57 EDT 2020" starttimestamp="1599653169283" timestamp="707944" />
  <Command __id="834" _type="MoveCaretCommand" caretOffset="635" date="Wed Sep 09 08:17:58 EDT 2020" docOffset="2988" starttimestamp="1599653169283" timestamp="709250" />
  <Command __id="835" _type="SelectTextCommand" caretOffset="640" date="Wed Sep 09 08:17:58 EDT 2020" end="640" start="630" starttimestamp="1599653169283" timestamp="709409" />
  <Command __id="837" _type="PasteCommand" date="Wed Sep 09 08:17:59 EDT 2020" starttimestamp="1599653169283" timestamp="710416" />
  <Command __id="838" _type="SelectTextCommand" caretOffset="577" date="Wed Sep 09 08:18:03 EDT 2020" end="577" start="568" starttimestamp="1599653169283" timestamp="714342" />
  <Command __id="840" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:04 EDT 2020" starttimestamp="1599653169283" timestamp="715021" />
  <Command __id="842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:04 EDT 2020" starttimestamp="1599653169283" timestamp="715215" />
  <Command __id="844" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:04 EDT 2020" starttimestamp="1599653169283" timestamp="715348" />
  <Command __id="846" _type="InsertStringCommand" date="Wed Sep 09 08:18:05 EDT 2020" starttimestamp="1599653169283" timestamp="716047" timestamp2="716047">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="847" _type="SelectTextCommand" caretOffset="570" date="Wed Sep 09 08:18:07 EDT 2020" end="643" start="570" starttimestamp="1599653169283" timestamp="717842" />
  <Command __id="848" _type="CopyCommand" date="Wed Sep 09 08:18:07 EDT 2020" starttimestamp="1599653169283" timestamp="718327" />
  <Command __id="849" _type="MoveCaretCommand" caretOffset="643" date="Wed Sep 09 08:18:08 EDT 2020" docOffset="2996" starttimestamp="1599653169283" timestamp="719296" />
  <Command __id="851" _type="InsertStringCommand" date="Wed Sep 09 08:18:09 EDT 2020" starttimestamp="1599653169283" timestamp="719782" timestamp2="719782">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="853" _type="InsertStringCommand" date="Wed Sep 09 08:18:09 EDT 2020" starttimestamp="1599653169283" timestamp="719923" timestamp2="719923">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="855" _type="PasteCommand" date="Wed Sep 09 08:18:09 EDT 2020" starttimestamp="1599653169283" timestamp="720614" />
  <Command __id="856" _type="MoveCaretCommand" caretOffset="355" date="Wed Sep 09 08:18:11 EDT 2020" docOffset="2708" starttimestamp="1599653169283" timestamp="722158" />
  <Command __id="857" _type="SelectTextCommand" caretOffset="368" date="Wed Sep 09 08:18:11 EDT 2020" end="368" start="350" starttimestamp="1599653169283" timestamp="722281" />
  <Command __id="858" _type="CopyCommand" date="Wed Sep 09 08:18:12 EDT 2020" starttimestamp="1599653169283" timestamp="722850" />
  <Command __id="859" _type="MoveCaretCommand" caretOffset="646" date="Wed Sep 09 08:18:12 EDT 2020" docOffset="2999" starttimestamp="1599653169283" timestamp="723385" />
  <Command __id="860" _type="MoveCaretCommand" caretOffset="673" date="Wed Sep 09 08:18:13 EDT 2020" docOffset="3026" starttimestamp="1599653169283" timestamp="723875" />
  <Command __id="861" _type="SelectTextCommand" caretOffset="684" date="Wed Sep 09 08:18:13 EDT 2020" end="684" start="667" starttimestamp="1599653169283" timestamp="724024" />
  <Command __id="863" _type="PasteCommand" date="Wed Sep 09 08:18:13 EDT 2020" starttimestamp="1599653169283" timestamp="724308" />
  <Command __id="864" _type="MoveCaretCommand" caretOffset="711" date="Wed Sep 09 08:18:14 EDT 2020" docOffset="3064" starttimestamp="1599653169283" timestamp="724833" />
  <Command __id="865" _type="SelectTextCommand" caretOffset="717" date="Wed Sep 09 08:18:14 EDT 2020" end="717" start="700" starttimestamp="1599653169283" timestamp="724967" />
  <Command __id="867" _type="PasteCommand" date="Wed Sep 09 08:18:14 EDT 2020" starttimestamp="1599653169283" timestamp="725095" />
  <Command __id="868" _type="SelectTextCommand" caretOffset="487" date="Wed Sep 09 08:18:16 EDT 2020" end="562" start="487" starttimestamp="1599653169283" timestamp="727345" />
  <Command __id="870" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:17 EDT 2020" starttimestamp="1599653169283" timestamp="727906" />
  <Command __id="871" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:18:17 EDT 2020" starttimestamp="1599653169283" timestamp="728194" />
  <Command __id="873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:17 EDT 2020" starttimestamp="1599653169283" timestamp="728428" />
  <Command __id="875" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:17 EDT 2020" starttimestamp="1599653169283" timestamp="728617" />
  <Command __id="809" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:17:35 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="685929">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="814" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:17:42 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6377" docExpressionCount="647" docLength="8783" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="693540">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	//the expected output for first 8 lines¶	¶¶	public CompareSafetyComputationsTest() {¶	}¶	¶	protected String[] anExpectedOutput() {¶		return anExpectedOutput;¶	}¶	¶	@Override¶	protected  String methodName() {¶		return methodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {¶		String [] anExpectedOutputList=anExpectedOutput();¶	    boolean passing=true;¶	    for(int i=0;i<anOutputLines.length;i++) {¶	    	if(i<anExpectedOutputList.length) {¶	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {¶	    			passing=false;¶	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");¶	    		}¶	    	}else if (i==anExpectedOutputList.length) {¶	    		if(!anOutputLines[i].matches("-+?")) {¶	    			passing=false;¶		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");¶	    		}¶	    	}else {¶	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){¶	    			passing=false;¶	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");¶	    		}¶	    	}¶	    }¶	    return passing;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="818" _type="Replace" date="Wed Sep 09 08:17:44 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6363" docExpressionCount="647" docLength="8769" endLine="46" insertionLength="21" int_docASTNodeCount="843" int_docActiveCodeLength="6342" int_docExpressionCount="646" int_docLength="8748" length="35" offset="2533" startLine="46" starttimestamp="1599653169283" timestamp="695114">
    <deletedText><![CDATA[AbstractPrintDerivedSafetyValidator]]></deletedText>
    <insertedText><![CDATA[PassFailJUnitTestCase]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="832" _type="Replace" date="Wed Sep 09 08:17:57 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6370" docExpressionCount="647" docLength="8776" endLine="63" insertionLength="17" int_docASTNodeCount="843" int_docActiveCodeLength="6353" int_docExpressionCount="646" int_docLength="8759" length="10" offset="2951" startLine="63" starttimestamp="1599653169283" timestamp="707931">
    <deletedText><![CDATA[methodName]]></deletedText>
    <insertedText><![CDATA[derivedMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="836" _type="Replace" date="Wed Sep 09 08:17:59 EDT 2020" docASTNodeCount="845" docActiveCodeLength="6377" docExpressionCount="647" docLength="8783" endLine="64" insertionLength="17" int_docASTNodeCount="844" int_docActiveCodeLength="6360" int_docExpressionCount="646" int_docLength="8766" length="10" offset="2983" startLine="64" starttimestamp="1599653169283" timestamp="710407">
    <deletedText><![CDATA[methodName]]></deletedText>
    <insertedText><![CDATA[derivedMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="839" _type="Delete" date="Wed Sep 09 08:18:04 EDT 2020" docASTNodeCount="843" docActiveCodeLength="6368" docExpressionCount="645" docLength="8774" endLine="62" length="9" offset="2921" startLine="62" starttimestamp="1599653169283" timestamp="715017">
    <text><![CDATA[@Override]]></text>
  </DocumentChange>
  <DocumentChange __id="841" _type="Delete" date="Wed Sep 09 08:18:04 EDT 2020" docASTNodeCount="843" docActiveCodeLength="6367" docExpressionCount="645" docLength="8773" endLine="62" length="1" offset="2920" startLine="62" starttimestamp="1599653169283" timestamp="715213">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="843" _type="Delete" date="Wed Sep 09 08:18:04 EDT 2020" docASTNodeCount="843" docActiveCodeLength="6365" docExpressionCount="645" docLength="8771" endLine="62" length="2" offset="2918" startLine="61" starttimestamp="1599653169283" timestamp="715341">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="845" _type="Insert" date="Wed Sep 09 08:18:05 EDT 2020" docASTNodeCount="843" docActiveCodeLength="6368" docExpressionCount="645" docLength="8774" length="3" offset="2918" starttimestamp="1599653169283" timestamp="716038">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="850" _type="Insert" date="Wed Sep 09 08:18:09 EDT 2020" docASTNodeCount="843" docActiveCodeLength="6371" docExpressionCount="645" docLength="8777" length="3" offset="2996" starttimestamp="1599653169283" timestamp="719775">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="852" _type="Insert" date="Wed Sep 09 08:18:09 EDT 2020" docASTNodeCount="843" docActiveCodeLength="6374" docExpressionCount="645" docLength="8780" length="3" offset="2999" starttimestamp="1599653169283" timestamp="719916">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="854" _type="Replace" date="Wed Sep 09 08:18:09 EDT 2020" docASTNodeCount="851" docActiveCodeLength="6446" docExpressionCount="648" docLength="8852" endLine="67" insertionLength="73" int_docASTNodeCount="843" int_docActiveCodeLength="6373" int_docExpressionCount="645" int_docLength="8779" length="1" offset="3001" startLine="67" starttimestamp="1599653169283" timestamp="720603">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected  String derivedMethodName() {
		return derivedMethodName;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="862" _type="Replace" date="Wed Sep 09 08:18:13 EDT 2020" docASTNodeCount="851" docActiveCodeLength="6447" docExpressionCount="648" docLength="8853" endLine="67" insertionLength="18" int_docASTNodeCount="849" int_docActiveCodeLength="6429" int_docExpressionCount="647" int_docLength="8835" length="17" offset="3020" startLine="67" starttimestamp="1599653169283" timestamp="724294">
    <deletedText><![CDATA[derivedMethodName]]></deletedText>
    <insertedText><![CDATA[inferredMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="866" _type="Replace" date="Wed Sep 09 08:18:14 EDT 2020" docASTNodeCount="851" docActiveCodeLength="6448" docExpressionCount="648" docLength="8854" endLine="68" insertionLength="18" int_docASTNodeCount="850" int_docActiveCodeLength="6430" int_docExpressionCount="647" int_docLength="8836" length="17" offset="3053" startLine="68" starttimestamp="1599653169283" timestamp="725089">
    <deletedText><![CDATA[derivedMethodName]]></deletedText>
    <insertedText><![CDATA[inferredMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="869" _type="Delete" date="Wed Sep 09 08:18:17 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6373" docExpressionCount="645" docLength="8779" endLine="60" length="75" offset="2840" startLine="57" starttimestamp="1599653169283" timestamp="727901">
    <text><![CDATA[	
	protected String[] anExpectedOutput() {
		return anExpectedOutput;
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="872" _type="Delete" date="Wed Sep 09 08:18:17 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6371" docExpressionCount="645" docLength="8777" endLine="58" length="2" offset="2840" startLine="57" starttimestamp="1599653169283" timestamp="728422">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="874" _type="Delete" date="Wed Sep 09 08:18:17 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6369" docExpressionCount="645" docLength="8775" endLine="57" length="2" offset="2838" startLine="56" starttimestamp="1599653169283" timestamp="728608">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="877" _type="Delete" date="Wed Sep 09 08:18:24 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6366" docExpressionCount="645" docLength="8733" endLine="53" length="42" offset="2747" startLine="52" starttimestamp="1599653169283" timestamp="734880">
    <text><![CDATA[//the expected output for first 8 lines
	]]></text>
  </DocumentChange>
  <DocumentChange __id="879" _type="Delete" date="Wed Sep 09 08:18:24 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6365" docExpressionCount="645" docLength="8732" endLine="52" length="1" offset="2746" startLine="52" starttimestamp="1599653169283" timestamp="735138">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="881" _type="Delete" date="Wed Sep 09 08:18:24 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6363" docExpressionCount="645" docLength="8730" endLine="52" length="2" offset="2744" startLine="51" starttimestamp="1599653169283" timestamp="735444">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="883" _type="Delete" date="Wed Sep 09 08:18:25 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6362" docExpressionCount="645" docLength="8729" endLine="51" length="1" offset="2743" startLine="51" starttimestamp="1599653169283" timestamp="736002">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="885" _type="Delete" date="Wed Sep 09 08:18:25 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6360" docExpressionCount="645" docLength="8727" endLine="51" length="2" offset="2741" startLine="50" starttimestamp="1599653169283" timestamp="736365">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="876" _type="SelectTextCommand" caretOffset="436" date="Wed Sep 09 08:18:23 EDT 2020" end="436" start="394" starttimestamp="1599653169283" timestamp="734259" />
  <Command __id="878" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:24 EDT 2020" starttimestamp="1599653169283" timestamp="734890" />
  <Command __id="880" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:24 EDT 2020" starttimestamp="1599653169283" timestamp="735144" />
  <Command __id="882" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:24 EDT 2020" starttimestamp="1599653169283" timestamp="735460" />
  <Command __id="884" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:25 EDT 2020" starttimestamp="1599653169283" timestamp="736008" />
  <Command __id="886" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:25 EDT 2020" starttimestamp="1599653169283" timestamp="736380" />
  <Command __id="888" _type="SelectTextCommand" caretOffset="204" date="Wed Sep 09 08:18:27 EDT 2020" end="204" start="183" starttimestamp="1599653169283" timestamp="738076" />
  <Command __id="889" _type="SelectTextCommand" caretOffset="472" date="Wed Sep 09 08:18:45 EDT 2020" end="472" start="336" starttimestamp="1599653169283" timestamp="756304" />
  <Command __id="890" _type="SelectTextCommand" caretOffset="472" date="Wed Sep 09 08:18:45 EDT 2020" end="472" start="336" starttimestamp="1599653169283" timestamp="756623" />
  <Command __id="891" _type="CopyCommand" date="Wed Sep 09 08:18:47 EDT 2020" starttimestamp="1599653169283" timestamp="758405" />
  <Command __id="893" _type="MoveCaretCommand" caretOffset="388" date="Wed Sep 09 08:18:48 EDT 2020" docOffset="2741" starttimestamp="1599653169283" timestamp="759396" />
  <Command __id="887" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:18:27 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="737974">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="892" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:18:48 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6360" docExpressionCount="645" docLength="8727" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="759312">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends "), Diff(DELETE,"AbstractPrintDerivedSafetyValidator"), Diff(INSERT,"PassFailJUnitTestCase"), Diff(EQUAL," {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";"), Diff(DELETE,"¶	¶	//the expected output for first 8 lines¶	"), Diff(EQUAL,"¶¶	public CompareSafetyComputationsTest() {¶	}"), Diff(INSERT,"	"), Diff(EQUAL,"¶	¶	protected "), Diff(INSERT," "), Diff(EQUAL,"String"), Diff(DELETE,"[] anExpectedOutput() {¶		return anExpectedOutput;¶	}¶	¶	@Override"), Diff(INSERT," derivedMethodName() {¶		return derivedMethodName;¶	}¶	"), Diff(EQUAL,"¶	protected  String "), Diff(DELETE,"m"), Diff(INSERT,"inferredM"), Diff(EQUAL,"ethodName() {¶		return "), Diff(DELETE,"m"), Diff(INSERT,"inferredM"), Diff(EQUAL,"ethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {¶		String [] anExpectedOutputList=anExpectedOutput();¶	    boolean passing=true;¶	    for(int i=0;i<anOutputLines.length;i++) {¶	    	if(i<anExpectedOutputList.length) {¶	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {¶	    			passing=false;¶	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");¶	    		}¶	    	}else if (i==anExpectedOutputList.length) {¶	    		if(!anOutputLines[i].matches("-+?")) {¶	    			passing=false;¶		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");¶	    		}¶	    	}else {¶	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){¶	    			passing=false;¶	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");¶	    		}¶	    	}¶	    }¶	    return passing;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";

	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
		String [] anExpectedOutputList=anExpectedOutput();
	    boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }
	    return passing;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="895" _type="Insert" date="Wed Sep 09 08:18:50 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6363" docExpressionCount="645" docLength="8730" length="3" offset="2743" starttimestamp="1599653169283" timestamp="760966">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="897" _type="Insert" date="Wed Sep 09 08:18:50 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6366" docExpressionCount="645" docLength="8733" length="3" offset="2746" starttimestamp="1599653169283" timestamp="761102">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="900" _type="Replace" date="Wed Sep 09 08:18:51 EDT 2020" docASTNodeCount="869" docActiveCodeLength="6502" docExpressionCount="660" docLength="8869" endLine="52" insertionLength="137" int_docASTNodeCount="842" int_docActiveCodeLength="6365" int_docExpressionCount="645" int_docLength="8732" length="1" offset="2745" startLine="52" starttimestamp="1599653169283" timestamp="762244">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected static Class[] NO_ARG_TYPES = {};
	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="902" _type="Replace" date="Wed Sep 09 08:18:55 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6366" docExpressionCount="645" docLength="8733" endLine="53" insertionLength="1" int_docASTNodeCount="842" int_docActiveCodeLength="6365" int_docExpressionCount="645" int_docLength="8732" length="137" offset="2745" startLine="52" starttimestamp="1599653169283" timestamp="766495">
    <deletedText><![CDATA[	protected static Class[] NO_ARG_TYPES = {};
	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};]]></deletedText>
    <insertedText><![CDATA[	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="904" _type="Delete" date="Wed Sep 09 08:18:57 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6365" docExpressionCount="645" docLength="8732" endLine="52" length="1" offset="2745" startLine="52" starttimestamp="1599653169283" timestamp="768308">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="906" _type="Delete" date="Wed Sep 09 08:18:57 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6363" docExpressionCount="645" docLength="8730" endLine="52" length="2" offset="2743" startLine="51" starttimestamp="1599653169283" timestamp="768483">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="908" _type="Delete" date="Wed Sep 09 08:18:58 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6361" docExpressionCount="645" docLength="8728" endLine="51" length="2" offset="2741" startLine="50" starttimestamp="1599653169283" timestamp="768995">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="894" _type="MoveCaretCommand" caretOffset="390" date="Wed Sep 09 08:18:49 EDT 2020" docOffset="2743" starttimestamp="1599653169283" timestamp="760427" />
  <Command __id="896" _type="InsertStringCommand" date="Wed Sep 09 08:18:50 EDT 2020" starttimestamp="1599653169283" timestamp="760985" timestamp2="760985">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="898" _type="InsertStringCommand" date="Wed Sep 09 08:18:50 EDT 2020" starttimestamp="1599653169283" timestamp="761111" timestamp2="761111">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:18:50 EDT 2020" starttimestamp="1599653169283" timestamp="761332" />
  <Command __id="901" _type="PasteCommand" date="Wed Sep 09 08:18:51 EDT 2020" starttimestamp="1599653169283" timestamp="762431" />
  <Command __id="903" _type="UndoCommand" date="Wed Sep 09 08:18:55 EDT 2020" starttimestamp="1599653169283" timestamp="766577" />
  <Command __id="905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:57 EDT 2020" starttimestamp="1599653169283" timestamp="768318" />
  <Command __id="907" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:57 EDT 2020" starttimestamp="1599653169283" timestamp="768495" />
  <Command __id="909" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:18:58 EDT 2020" starttimestamp="1599653169283" timestamp="769010" />
  <Command __id="911" _type="SelectTextCommand" caretOffset="472" date="Wed Sep 09 08:18:59 EDT 2020" end="472" start="336" starttimestamp="1599653169283" timestamp="770103" />
  <Command __id="912" _type="MoveCaretCommand" caretOffset="159" date="Wed Sep 09 08:19:01 EDT 2020" docOffset="2512" starttimestamp="1599653169283" timestamp="772054" />
  <Command __id="913" _type="SelectTextCommand" caretOffset="174" date="Wed Sep 09 08:19:01 EDT 2020" end="174" start="139" starttimestamp="1599653169283" timestamp="772178" />
  <Command __id="914" _type="CopyCommand" date="Wed Sep 09 08:19:02 EDT 2020" starttimestamp="1599653169283" timestamp="772729" />
  <Command __id="916" _type="MoveCaretCommand" caretOffset="388" date="Wed Sep 09 08:19:02 EDT 2020" docOffset="2741" starttimestamp="1599653169283" timestamp="773397" />
  <Command __id="917" _type="MoveCaretCommand" caretOffset="195" date="Wed Sep 09 08:19:03 EDT 2020" docOffset="2548" starttimestamp="1599653169283" timestamp="773991" />
  <Command __id="918" _type="SelectTextCommand" caretOffset="201" date="Wed Sep 09 08:19:03 EDT 2020" end="201" start="180" starttimestamp="1599653169283" timestamp="774107" />
  <Command __id="920" _type="PasteCommand" date="Wed Sep 09 08:19:03 EDT 2020" starttimestamp="1599653169283" timestamp="774375" />
  <Command __id="921" _type="ShellCommand" date="Wed Sep 09 08:19:07 EDT 2020" starttimestamp="1599653169283" timestamp="778353" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="922" _type="ShellCommand" date="Wed Sep 09 08:19:07 EDT 2020" starttimestamp="1599653169283" timestamp="778449" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="927" _type="SelectTextCommand" caretOffset="6388" date="Wed Sep 09 08:19:15 EDT 2020" end="6490" start="6388" starttimestamp="1599653169283" timestamp="786271" />
  <Command __id="929" _type="CutCommand" date="Wed Sep 09 08:19:16 EDT 2020" starttimestamp="1599653169283" timestamp="787255" />
  <Command __id="930" _type="MoveCaretCommand" caretOffset="534" date="Wed Sep 09 08:19:19 EDT 2020" docOffset="2887" starttimestamp="1599653169283" timestamp="790035" />
  <Command __id="932" _type="InsertStringCommand" date="Wed Sep 09 08:19:19 EDT 2020" starttimestamp="1599653169283" timestamp="790637" timestamp2="790637">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="934" _type="InsertStringCommand" date="Wed Sep 09 08:19:20 EDT 2020" starttimestamp="1599653169283" timestamp="790785" timestamp2="790785">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="935" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:19:20 EDT 2020" starttimestamp="1599653169283" timestamp="790918" />
  <Command __id="937" _type="PasteCommand" date="Wed Sep 09 08:19:20 EDT 2020" starttimestamp="1599653169283" timestamp="791555" />
  <Command __id="938" _type="MoveCaretCommand" caretOffset="371" date="Wed Sep 09 08:19:23 EDT 2020" docOffset="2724" starttimestamp="1599653169283" timestamp="793979" />
  <Command __id="939" _type="SelectTextCommand" caretOffset="382" date="Wed Sep 09 08:19:23 EDT 2020" end="382" start="364" starttimestamp="1599653169283" timestamp="794157" />
  <Command __id="940" _type="CopyCommand" date="Wed Sep 09 08:19:24 EDT 2020" starttimestamp="1599653169283" timestamp="794866" />
  <Command __id="941" _type="MoveCaretCommand" caretOffset="630" date="Wed Sep 09 08:19:25 EDT 2020" docOffset="2983" starttimestamp="1599653169283" timestamp="796334" />
  <Command __id="942" _type="SelectTextCommand" caretOffset="633" date="Wed Sep 09 08:19:25 EDT 2020" end="633" start="629" starttimestamp="1599653169283" timestamp="796466" />
  <Command __id="944" _type="PasteCommand" date="Wed Sep 09 08:19:26 EDT 2020" starttimestamp="1599653169283" timestamp="797089" />
  <Command __id="945" _type="SelectTextCommand" caretOffset="618" date="Wed Sep 09 08:19:28 EDT 2020" end="618" start="584" starttimestamp="1599653169283" timestamp="798847" />
  <Command __id="947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:28 EDT 2020" starttimestamp="1599653169283" timestamp="799366" />
  <Command __id="949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:28 EDT 2020" starttimestamp="1599653169283" timestamp="799488" />
  <Command __id="951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:28 EDT 2020" starttimestamp="1599653169283" timestamp="799639" />
  <Command __id="953" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:29 EDT 2020" starttimestamp="1599653169283" timestamp="799975" />
  <Command __id="954" _type="SelectTextCommand" caretOffset="871" date="Wed Sep 09 08:19:35 EDT 2020" end="871" start="821" starttimestamp="1599653169283" timestamp="805909" />
  <Command __id="956" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:35 EDT 2020" starttimestamp="1599653169283" timestamp="806683" />
  <Command __id="958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:36 EDT 2020" starttimestamp="1599653169283" timestamp="806838" />
  <Command __id="960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:36 EDT 2020" starttimestamp="1599653169283" timestamp="807179" />
  <Command __id="962" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:36 EDT 2020" starttimestamp="1599653169283" timestamp="807647" />
  <Command __id="963" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:19:37 EDT 2020" starttimestamp="1599653169283" timestamp="808259" />
  <Command __id="964" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:19:37 EDT 2020" starttimestamp="1599653169283" timestamp="808612" />
  <Command __id="965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:19:38 EDT 2020" starttimestamp="1599653169283" timestamp="808866" />
  <Command __id="966" _type="SelectTextCommand" caretOffset="1695" date="Wed Sep 09 08:19:52 EDT 2020" end="1695" start="824" starttimestamp="1599653169283" timestamp="822794" />
  <Command __id="967" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_LINE_UP" date="Wed Sep 09 08:19:54 EDT 2020" starttimestamp="1599653169283" timestamp="825180" />
  <Command __id="969" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:19:54 EDT 2020" starttimestamp="1599653169283" timestamp="825628" />
  <Command __id="910" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:18:59 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="770027">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="915" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:19:02 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6361" docExpressionCount="645" docLength="8728" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="773308">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {¶		String [] anExpectedOutputList=anExpectedOutput();¶	    boolean passing=true;¶	    for(int i=0;i<anOutputLines.length;i++) {¶	    	if(i<anExpectedOutputList.length) {¶	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {¶	    			passing=false;¶	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");¶	    		}¶	    	}else if (i==anExpectedOutputList.length) {¶	    		if(!anOutputLines[i].matches("-+?")) {¶	    			passing=false;¶		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");¶	    		}¶	    	}else {¶	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){¶	    			passing=false;¶	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");¶	    		}¶	    	}¶	    }¶	    return passing;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends PassFailJUnitTestCase {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
		String [] anExpectedOutputList=anExpectedOutput();
	    boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }
	    return passing;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="919" _type="Replace" date="Wed Sep 09 08:19:03 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6375" docExpressionCount="645" docLength="8742" endLine="46" insertionLength="35" int_docASTNodeCount="840" int_docActiveCodeLength="6340" int_docExpressionCount="644" int_docLength="8707" length="21" offset="2533" startLine="46" starttimestamp="1599653169283" timestamp="774351">
    <deletedText><![CDATA[PassFailJUnitTestCase]]></deletedText>
    <insertedText><![CDATA[AbstractPrintDerivedSafetyValidator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="923" _type="Insert" date="Wed Sep 09 08:19:07 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6379" docExpressionCount="645" docLength="8746" length="4" offset="8737" starttimestamp="1599653169283" timestamp="778597">
    <text><![CDATA[
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="924" _type="Insert" date="Wed Sep 09 08:19:07 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6395" docExpressionCount="645" docLength="8796" length="50" offset="8737" starttimestamp="1599653169283" timestamp="778600">
    <text><![CDATA[// TODO Auto-generated method stub
		return null;]]></text>
  </DocumentChange>
  <DocumentChange __id="925" _type="Insert" date="Wed Sep 09 08:19:07 EDT 2020" docASTNodeCount="850" docActiveCodeLength="6433" docExpressionCount="648" docLength="8843" length="47" offset="8737" starttimestamp="1599653169283" timestamp="778601">
    <text><![CDATA[@Override
	protected String methodName() {
		]]></text>
  </DocumentChange>
  <DocumentChange __id="926" _type="Insert" date="Wed Sep 09 08:19:07 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6447" docExpressionCount="650" docLength="8848" length="5" offset="8737" starttimestamp="1599653169283" timestamp="778625">
    <text><![CDATA[

	]]></text>
  </DocumentChange>
  <DocumentChange __id="928" _type="Delete" date="Wed Sep 09 08:19:16 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6379" docExpressionCount="645" docLength="8746" endLine="191" length="102" offset="8741" startLine="187" starttimestamp="1599653169283" timestamp="787225">
    <text><![CDATA[	@Override
	protected String methodName() {
		// TODO Auto-generated method stub
		return null;
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="931" _type="Insert" date="Wed Sep 09 08:19:19 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6382" docExpressionCount="645" docLength="8749" length="3" offset="2887" starttimestamp="1599653169283" timestamp="790615">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="933" _type="Insert" date="Wed Sep 09 08:19:20 EDT 2020" docASTNodeCount="842" docActiveCodeLength="6385" docExpressionCount="645" docLength="8752" length="3" offset="2890" starttimestamp="1599653169283" timestamp="790764">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="936" _type="Replace" date="Wed Sep 09 08:19:20 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6452" docExpressionCount="650" docLength="8853" endLine="59" insertionLength="102" int_docASTNodeCount="842" int_docActiveCodeLength="6384" int_docExpressionCount="645" int_docLength="8751" length="1" offset="2889" startLine="59" starttimestamp="1599653169283" timestamp="791508">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	protected String methodName() {
		// TODO Auto-generated method stub
		return null;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="943" _type="Replace" date="Wed Sep 09 08:19:26 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6466" docExpressionCount="650" docLength="8867" endLine="62" insertionLength="18" int_docASTNodeCount="851" int_docActiveCodeLength="6448" int_docExpressionCount="649" int_docLength="8849" length="4" offset="2982" startLine="62" starttimestamp="1599653169283" timestamp="797068">
    <deletedText><![CDATA[null]]></deletedText>
    <insertedText><![CDATA[inferredMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="946" _type="Delete" date="Wed Sep 09 08:19:28 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6466" docExpressionCount="650" docLength="8833" endLine="61" length="34" offset="2937" startLine="61" starttimestamp="1599653169283" timestamp="799352">
    <text><![CDATA[// TODO Auto-generated method stub]]></text>
  </DocumentChange>
  <DocumentChange __id="948" _type="Delete" date="Wed Sep 09 08:19:28 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6465" docExpressionCount="650" docLength="8832" endLine="61" length="1" offset="2936" startLine="61" starttimestamp="1599653169283" timestamp="799482">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="950" _type="Delete" date="Wed Sep 09 08:19:28 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6464" docExpressionCount="650" docLength="8831" endLine="61" length="1" offset="2935" startLine="61" starttimestamp="1599653169283" timestamp="799632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="952" _type="Delete" date="Wed Sep 09 08:19:29 EDT 2020" docASTNodeCount="852" docActiveCodeLength="6462" docExpressionCount="650" docLength="8829" endLine="61" length="2" offset="2933" startLine="60" starttimestamp="1599653169283" timestamp="799954">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="955" _type="Delete" date="Wed Sep 09 08:19:35 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6412" docExpressionCount="646" docLength="8779" endLine="69" length="50" offset="3174" startLine="69" starttimestamp="1599653169283" timestamp="806674">
    <text><![CDATA[String [] anExpectedOutputList=anExpectedOutput();]]></text>
  </DocumentChange>
  <DocumentChange __id="957" _type="Delete" date="Wed Sep 09 08:19:36 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6411" docExpressionCount="646" docLength="8778" endLine="69" length="1" offset="3173" startLine="69" starttimestamp="1599653169283" timestamp="806833">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="959" _type="Delete" date="Wed Sep 09 08:19:36 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6410" docExpressionCount="646" docLength="8777" endLine="69" length="1" offset="3172" startLine="69" starttimestamp="1599653169283" timestamp="807174">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="961" _type="Delete" date="Wed Sep 09 08:19:36 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6408" docExpressionCount="646" docLength="8775" endLine="69" length="2" offset="3170" startLine="68" starttimestamp="1599653169283" timestamp="807606">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="968" _type="Delete" date="Wed Sep 09 08:19:54 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5559" docExpressionCount="551" docLength="7926" endLine="87" length="849" offset="3177" startLine="69" starttimestamp="1599653169283" timestamp="825603">
    <text><![CDATA[boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }]]></text>
  </DocumentChange>
  <DocumentChange __id="973" _type="Replace" date="Wed Sep 09 08:19:58 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5553" docExpressionCount="551" docLength="7920" endLine="70" insertionLength="1" int_docASTNodeCount="724" int_docActiveCodeLength="5552" int_docExpressionCount="550" int_docLength="7919" length="7" offset="3191" startLine="70" starttimestamp="1599653169283" timestamp="829299">
    <deletedText><![CDATA[passing]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="975" _type="Insert" date="Wed Sep 09 08:19:58 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5554" docExpressionCount="551" docLength="7921" length="1" offset="3192" starttimestamp="1599653169283" timestamp="829450">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="977" _type="Insert" date="Wed Sep 09 08:19:58 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5555" docExpressionCount="551" docLength="7922" length="1" offset="3193" starttimestamp="1599653169283" timestamp="829544">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="970" _type="MoveCaretCommand" caretOffset="850" date="Wed Sep 09 08:19:57 EDT 2020" docOffset="3203" starttimestamp="1599653169283" timestamp="827958" />
  <Command __id="971" _type="MoveCaretCommand" caretOffset="840" date="Wed Sep 09 08:19:57 EDT 2020" docOffset="3193" starttimestamp="1599653169283" timestamp="828518" />
  <Command __id="972" _type="SelectTextCommand" caretOffset="845" date="Wed Sep 09 08:19:57 EDT 2020" end="845" start="838" starttimestamp="1599653169283" timestamp="828706" />
  <Command __id="974" _type="InsertStringCommand" date="Wed Sep 09 08:19:58 EDT 2020" starttimestamp="1599653169283" timestamp="829319" timestamp2="829319">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="976" _type="InsertStringCommand" date="Wed Sep 09 08:19:58 EDT 2020" starttimestamp="1599653169283" timestamp="829454" timestamp2="829454">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="978" _type="InsertStringCommand" date="Wed Sep 09 08:19:58 EDT 2020" starttimestamp="1599653169283" timestamp="829546" timestamp2="829546">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="980" _type="InsertStringCommand" date="Wed Sep 09 08:19:58 EDT 2020" starttimestamp="1599653169283" timestamp="829619" timestamp2="829619">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="979" _type="Insert" date="Wed Sep 09 08:19:58 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5556" docExpressionCount="551" docLength="7923" length="1" offset="3194" starttimestamp="1599653169283" timestamp="829613">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="981" _type="MoveCaretCommand" caretOffset="1466" date="Wed Sep 09 08:20:19 EDT 2020" docOffset="3819" starttimestamp="1599653169283" timestamp="850047" />
  <Command __id="982" _type="MoveCaretCommand" caretOffset="1507" date="Wed Sep 09 08:20:19 EDT 2020" docOffset="3860" starttimestamp="1599653169283" timestamp="850685" />
  <Command __id="983" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:20:24 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="855074">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="984" _type="SelectTextCommand" caretOffset="174" date="Wed Sep 09 08:20:24 EDT 2020" end="174" start="139" starttimestamp="1599653169283" timestamp="855186" />
  <Command __id="986" _type="MoveCaretCommand" caretOffset="1507" date="Wed Sep 09 08:20:29 EDT 2020" docOffset="3860" starttimestamp="1599653169283" timestamp="859731" />
  <Command __id="987" _type="MoveCaretCommand" caretOffset="1570" date="Wed Sep 09 08:20:42 EDT 2020" docOffset="3923" starttimestamp="1599653169283" timestamp="872786" />
  <Command __id="988" _type="SelectTextCommand" caretOffset="1575" date="Wed Sep 09 08:20:42 EDT 2020" end="1575" start="1565" starttimestamp="1599653169283" timestamp="872934" />
  <Command __id="985" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:20:28 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5556" docExpressionCount="551" docLength="7923" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="859628">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends "), Diff(DELETE,"PassFailJUnitTestCase"), Diff(INSERT,"AbstractPrintDerivedSafetyValidator"), Diff(EQUAL," {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	"), Diff(INSERT,"@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	"), Diff(EQUAL,"protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {¶	"), Diff(DELETE,"	String [] anExpectedOutputList=anExpectedOutput();¶	    boolean passing=true;¶	    for(int i=0;i<anOutputLines.length;i++) {¶	    	if(i<anExpectedOutputList.length) {¶	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {¶	    			passing=false;¶	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");¶	    		}¶	    	}else if (i==anExpectedOutputList.length) {¶	    		if(!anOutputLines[i].matches("-+?")) {¶	    			passing=false;¶		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");¶	    		}¶	    	}else {¶	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){¶	    			passing=false;¶	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");¶	    		}¶	    	}¶	    }¶	    return passing"), Diff(INSERT,"    ¶	    return true"), Diff(EQUAL,";¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶"), Diff(INSERT,"¶¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
	    
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="989" _type="SelectTextCommand" caretOffset="2054" date="Wed Sep 09 08:21:18 EDT 2020" end="2055" start="2054" starttimestamp="1599653169283" timestamp="909513" />
  <Command __id="991" _type="InsertStringCommand" date="Wed Sep 09 08:21:19 EDT 2020" starttimestamp="1599653169283" timestamp="910554" timestamp2="910554">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="992" _type="SelectTextCommand" caretOffset="2554" date="Wed Sep 09 08:21:31 EDT 2020" end="2554" start="2553" starttimestamp="1599653169283" timestamp="921911" />
  <Command __id="994" _type="InsertStringCommand" date="Wed Sep 09 08:21:31 EDT 2020" starttimestamp="1599653169283" timestamp="922624" timestamp2="922624">
    <data><![CDATA[1]]></data>
  </Command>
  <DocumentChange __id="990" _type="Replace" date="Wed Sep 09 08:21:19 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5556" docExpressionCount="551" docLength="7923" endLine="95" insertionLength="1" int_docASTNodeCount="725" int_docActiveCodeLength="5555" int_docExpressionCount="551" int_docLength="7922" length="1" offset="4407" startLine="95" starttimestamp="1599653169283" timestamp="910533">
    <deletedText><![CDATA[9]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="993" _type="Replace" date="Wed Sep 09 08:21:31 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5556" docExpressionCount="551" docLength="7923" endLine="107" insertionLength="1" int_docASTNodeCount="725" int_docActiveCodeLength="5555" int_docExpressionCount="551" int_docLength="7922" length="1" offset="4906" startLine="107" starttimestamp="1599653169283" timestamp="922608">
    <deletedText><![CDATA[9]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <Command __id="995" _type="MoveCaretCommand" caretOffset="2792" date="Wed Sep 09 08:21:51 EDT 2020" docOffset="5145" starttimestamp="1599653169283" timestamp="942333" />
  <Command __id="996" _type="MoveCaretCommand" caretOffset="2793" date="Wed Sep 09 08:21:52 EDT 2020" docOffset="5146" starttimestamp="1599653169283" timestamp="943134" />
  <DocumentChange __id="997" _type="Insert" date="Wed Sep 09 08:21:54 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5557" docExpressionCount="551" docLength="7924" length="1" offset="5146" starttimestamp="1599653169283" timestamp="945354">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="998" _type="InsertStringCommand" date="Wed Sep 09 08:21:54 EDT 2020" starttimestamp="1599653169283" timestamp="945371" timestamp2="945371">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="999" _type="Insert" date="Wed Sep 09 08:21:54 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5558" docExpressionCount="551" docLength="7925" length="1" offset="5147" starttimestamp="1599653169283" timestamp="945533">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1000" _type="InsertStringCommand" date="Wed Sep 09 08:21:54 EDT 2020" starttimestamp="1599653169283" timestamp="945546" timestamp2="945546">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1001" _type="Insert" date="Wed Sep 09 08:21:54 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5559" docExpressionCount="551" docLength="7926" length="1" offset="5148" starttimestamp="1599653169283" timestamp="945696">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1002" _type="InsertStringCommand" date="Wed Sep 09 08:21:54 EDT 2020" starttimestamp="1599653169283" timestamp="945713" timestamp2="945713">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1003" _type="Insert" date="Wed Sep 09 08:21:55 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5560" docExpressionCount="551" docLength="7927" length="1" offset="5149" starttimestamp="1599653169283" timestamp="946231">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1004" _type="InsertStringCommand" date="Wed Sep 09 08:21:55 EDT 2020" starttimestamp="1599653169283" timestamp="946243" timestamp2="946243">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1005" _type="Insert" date="Wed Sep 09 08:21:55 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5561" docExpressionCount="551" docLength="7928" length="1" offset="5150" starttimestamp="1599653169283" timestamp="946312">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="1006" _type="InsertStringCommand" date="Wed Sep 09 08:21:55 EDT 2020" starttimestamp="1599653169283" timestamp="946328" timestamp2="946328">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="1007" _type="Insert" date="Wed Sep 09 08:21:55 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5562" docExpressionCount="551" docLength="7929" length="1" offset="5151" starttimestamp="1599653169283" timestamp="946524">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1008" _type="InsertStringCommand" date="Wed Sep 09 08:21:55 EDT 2020" starttimestamp="1599653169283" timestamp="946537" timestamp2="946537">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1009" _type="Insert" date="Wed Sep 09 08:21:55 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5563" docExpressionCount="551" docLength="7930" length="1" offset="5152" starttimestamp="1599653169283" timestamp="946710">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1010" _type="InsertStringCommand" date="Wed Sep 09 08:21:56 EDT 2020" starttimestamp="1599653169283" timestamp="946724" timestamp2="946724">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1011" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:21:56 EDT 2020" starttimestamp="1599653169283" timestamp="947142" />
  <DocumentChange __id="1012" _type="Insert" date="Wed Sep 09 08:21:57 EDT 2020" docASTNodeCount="725" docActiveCodeLength="5571" docExpressionCount="551" docLength="7938" length="8" offset="5239" starttimestamp="1599653169283" timestamp="947837">
    <text><![CDATA[
		    ]]></text>
  </DocumentChange>
  <Command __id="1013" _type="InsertStringCommand" date="Wed Sep 09 08:21:57 EDT 2020" starttimestamp="1599653169283" timestamp="947845" timestamp2="947845">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1014" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:21:57 EDT 2020" starttimestamp="1599653169283" timestamp="948010" />
  <DocumentChange __id="1015" _type="Insert" date="Wed Sep 09 08:21:58 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5572" docExpressionCount="552" docLength="7939" length="1" offset="5239" starttimestamp="1599653169283" timestamp="948878">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="1016" _type="InsertStringCommand" date="Wed Sep 09 08:21:58 EDT 2020" starttimestamp="1599653169283" timestamp="948889" timestamp2="948889">
    <data><![CDATA[M]]></data>
  </Command>
  <DocumentChange __id="1017" _type="Insert" date="Wed Sep 09 08:21:58 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5573" docExpressionCount="552" docLength="7940" length="1" offset="5240" starttimestamp="1599653169283" timestamp="948964">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1018" _type="InsertStringCommand" date="Wed Sep 09 08:21:58 EDT 2020" starttimestamp="1599653169283" timestamp="948977" timestamp2="948977">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1019" _type="Insert" date="Wed Sep 09 08:21:58 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5574" docExpressionCount="552" docLength="7941" length="1" offset="5241" starttimestamp="1599653169283" timestamp="949099">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1020" _type="InsertStringCommand" date="Wed Sep 09 08:21:58 EDT 2020" starttimestamp="1599653169283" timestamp="949114" timestamp2="949114">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1021" _type="Insert" date="Wed Sep 09 08:21:58 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5575" docExpressionCount="552" docLength="7942" length="1" offset="5242" starttimestamp="1599653169283" timestamp="949177">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="1022" _type="InsertStringCommand" date="Wed Sep 09 08:21:58 EDT 2020" starttimestamp="1599653169283" timestamp="949192" timestamp2="949192">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="1023" _type="Insert" date="Wed Sep 09 08:21:58 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5576" docExpressionCount="552" docLength="7943" length="1" offset="5243" starttimestamp="1599653169283" timestamp="949332">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1024" _type="InsertStringCommand" date="Wed Sep 09 08:21:58 EDT 2020" starttimestamp="1599653169283" timestamp="949342" timestamp2="949342">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1025" _type="Insert" date="Wed Sep 09 08:21:58 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5577" docExpressionCount="552" docLength="7944" length="1" offset="5244" starttimestamp="1599653169283" timestamp="949429">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1026" _type="InsertStringCommand" date="Wed Sep 09 08:21:58 EDT 2020" starttimestamp="1599653169283" timestamp="949440" timestamp2="949440">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="1027" _type="Insert" date="Wed Sep 09 08:21:59 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5578" docExpressionCount="552" docLength="7945" length="1" offset="5245" starttimestamp="1599653169283" timestamp="949886">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1028" _type="InsertStringCommand" date="Wed Sep 09 08:21:59 EDT 2020" starttimestamp="1599653169283" timestamp="949899" timestamp2="949899">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1030" _type="InsertStringCommand" date="Wed Sep 09 08:21:59 EDT 2020" starttimestamp="1599653169283" timestamp="950277" timestamp2="950277">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1031" _type="MoveCaretCommand" caretOffset="2792" date="Wed Sep 09 08:22:01 EDT 2020" docOffset="5145" starttimestamp="1599653169283" timestamp="951877" />
  <Command __id="1032" _type="SelectTextCommand" caretOffset="2800" date="Wed Sep 09 08:22:01 EDT 2020" end="2800" start="2777" starttimestamp="1599653169283" timestamp="952024" />
  <Command __id="1033" _type="CopyCommand" date="Wed Sep 09 08:22:01 EDT 2020" starttimestamp="1599653169283" timestamp="952620" />
  <Command __id="1034" _type="MoveCaretCommand" caretOffset="2782" date="Wed Sep 09 08:22:02 EDT 2020" docOffset="5135" starttimestamp="1599653169283" timestamp="953116" />
  <Command __id="1035" _type="MoveCaretCommand" caretOffset="2894" date="Wed Sep 09 08:22:02 EDT 2020" docOffset="5247" starttimestamp="1599653169283" timestamp="953517" />
  <Command __id="1037" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:03 EDT 2020" starttimestamp="1599653169283" timestamp="954202" />
  <Command __id="1039" _type="PasteCommand" date="Wed Sep 09 08:22:03 EDT 2020" starttimestamp="1599653169283" timestamp="954421" />
  <Command __id="1041" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="954847" />
  <Command __id="1043" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="954991" />
  <Command __id="1045" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="955117" />
  <Command __id="1047" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="955235" />
  <Command __id="1049" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="955353" />
  <Command __id="1051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="955485" />
  <Command __id="1053" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:04 EDT 2020" starttimestamp="1599653169283" timestamp="955612" />
  <Command __id="1055" _type="InsertStringCommand" date="Wed Sep 09 08:22:05 EDT 2020" starttimestamp="1599653169283" timestamp="956034" timestamp2="956034">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1057" _type="InsertStringCommand" date="Wed Sep 09 08:22:05 EDT 2020" starttimestamp="1599653169283" timestamp="956224" timestamp2="956224">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1059" _type="InsertStringCommand" date="Wed Sep 09 08:22:05 EDT 2020" starttimestamp="1599653169283" timestamp="956352" timestamp2="956352">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1061" _type="InsertStringCommand" date="Wed Sep 09 08:22:05 EDT 2020" starttimestamp="1599653169283" timestamp="956514" timestamp2="956514">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1063" _type="InsertStringCommand" date="Wed Sep 09 08:22:05 EDT 2020" starttimestamp="1599653169283" timestamp="956713" timestamp2="956713">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1065" _type="InsertStringCommand" date="Wed Sep 09 08:22:06 EDT 2020" starttimestamp="1599653169283" timestamp="956835" timestamp2="956835">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1067" _type="InsertStringCommand" date="Wed Sep 09 08:22:06 EDT 2020" starttimestamp="1599653169283" timestamp="956946" timestamp2="956946">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1069" _type="InsertStringCommand" date="Wed Sep 09 08:22:06 EDT 2020" starttimestamp="1599653169283" timestamp="957087" timestamp2="957087">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1070" _type="SelectTextCommand" caretOffset="2801" date="Wed Sep 09 08:22:17 EDT 2020" end="2877" start="2801" starttimestamp="1599653169283" timestamp="968208" />
  <Command __id="1071" _type="CopyCommand" date="Wed Sep 09 08:22:17 EDT 2020" starttimestamp="1599653169283" timestamp="968576" />
  <Command __id="1072" _type="MoveCaretCommand" caretOffset="2917" date="Wed Sep 09 08:22:18 EDT 2020" docOffset="5270" starttimestamp="1599653169283" timestamp="968963" />
  <Command __id="1074" _type="PasteCommand" date="Wed Sep 09 08:22:18 EDT 2020" starttimestamp="1599653169283" timestamp="969641" />
  <Command __id="1075" _type="MoveCaretCommand" caretOffset="490" date="Wed Sep 09 08:22:28 EDT 2020" docOffset="2843" starttimestamp="1599653169283" timestamp="978853" />
  <Command __id="1076" _type="SelectTextCommand" caretOffset="494" date="Wed Sep 09 08:22:28 EDT 2020" end="494" start="477" starttimestamp="1599653169283" timestamp="978916" />
  <Command __id="1077" _type="CopyCommand" date="Wed Sep 09 08:22:29 EDT 2020" starttimestamp="1599653169283" timestamp="979797" />
  <Command __id="1078" _type="MoveCaretCommand" caretOffset="2839" date="Wed Sep 09 08:22:36 EDT 2020" docOffset="5192" starttimestamp="1599653169283" timestamp="987181" />
  <Command __id="1079" _type="SelectTextCommand" caretOffset="2847" date="Wed Sep 09 08:22:36 EDT 2020" end="2847" start="2828" starttimestamp="1599653169283" timestamp="987321" />
  <Command __id="1081" _type="PasteCommand" date="Wed Sep 09 08:22:37 EDT 2020" starttimestamp="1599653169283" timestamp="987797" />
  <DocumentChange __id="1029" _type="Insert" date="Wed Sep 09 08:21:59 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5579" docExpressionCount="553" docLength="7946" length="1" offset="5246" starttimestamp="1599653169283" timestamp="950264">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1036" _type="Delete" date="Wed Sep 09 08:22:03 EDT 2020" docASTNodeCount="727" docActiveCodeLength="5578" docExpressionCount="552" docLength="7945" endLine="116" length="1" offset="5246" startLine="116" starttimestamp="1599653169283" timestamp="954197">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1038" _type="Insert" date="Wed Sep 09 08:22:03 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5601" docExpressionCount="553" docLength="7968" length="23" offset="5246" starttimestamp="1599653169283" timestamp="954410">
    <text><![CDATA[aVerifyingMethodDerived]]></text>
  </DocumentChange>
  <DocumentChange __id="1040" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5600" docExpressionCount="553" docLength="7967" endLine="116" length="1" offset="5268" startLine="116" starttimestamp="1599653169283" timestamp="954841">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1042" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5599" docExpressionCount="553" docLength="7966" endLine="116" length="1" offset="5267" startLine="116" starttimestamp="1599653169283" timestamp="954985">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1044" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5598" docExpressionCount="553" docLength="7965" endLine="116" length="1" offset="5266" startLine="116" starttimestamp="1599653169283" timestamp="955112">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="1046" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5597" docExpressionCount="553" docLength="7964" endLine="116" length="1" offset="5265" startLine="116" starttimestamp="1599653169283" timestamp="955230">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1048" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5596" docExpressionCount="553" docLength="7963" endLine="116" length="1" offset="5264" startLine="116" starttimestamp="1599653169283" timestamp="955347">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1050" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5595" docExpressionCount="553" docLength="7962" endLine="116" length="1" offset="5263" startLine="116" starttimestamp="1599653169283" timestamp="955479">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1052" _type="Delete" date="Wed Sep 09 08:22:04 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5594" docExpressionCount="553" docLength="7961" endLine="116" length="1" offset="5262" startLine="116" starttimestamp="1599653169283" timestamp="955606">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="1054" _type="Insert" date="Wed Sep 09 08:22:05 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5595" docExpressionCount="553" docLength="7962" length="1" offset="5262" starttimestamp="1599653169283" timestamp="956024">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="1056" _type="Insert" date="Wed Sep 09 08:22:05 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5596" docExpressionCount="553" docLength="7963" length="1" offset="5263" starttimestamp="1599653169283" timestamp="956214">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1058" _type="Insert" date="Wed Sep 09 08:22:05 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5597" docExpressionCount="553" docLength="7964" length="1" offset="5264" starttimestamp="1599653169283" timestamp="956342">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1060" _type="Insert" date="Wed Sep 09 08:22:05 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5598" docExpressionCount="553" docLength="7965" length="1" offset="5265" starttimestamp="1599653169283" timestamp="956504">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1062" _type="Insert" date="Wed Sep 09 08:22:05 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5599" docExpressionCount="553" docLength="7966" length="1" offset="5266" starttimestamp="1599653169283" timestamp="956702">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1064" _type="Insert" date="Wed Sep 09 08:22:06 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5600" docExpressionCount="553" docLength="7967" length="1" offset="5267" starttimestamp="1599653169283" timestamp="956825">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1066" _type="Insert" date="Wed Sep 09 08:22:06 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5601" docExpressionCount="553" docLength="7968" length="1" offset="5268" starttimestamp="1599653169283" timestamp="956936">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1068" _type="Insert" date="Wed Sep 09 08:22:06 EDT 2020" docASTNodeCount="730" docActiveCodeLength="5602" docExpressionCount="553" docLength="7969" length="1" offset="5269" starttimestamp="1599653169283" timestamp="957076">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1073" _type="Insert" date="Wed Sep 09 08:22:18 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5678" docExpressionCount="560" docLength="8045" length="76" offset="5270" starttimestamp="1599653169283" timestamp="969636">
    <text><![CDATA[=  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes());]]></text>
  </DocumentChange>
  <DocumentChange __id="1080" _type="Replace" date="Wed Sep 09 08:22:37 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5676" docExpressionCount="560" docLength="8043" endLine="115" insertionLength="17" int_docASTNodeCount="676" int_docActiveCodeLength="5659" int_docExpressionCount="515" int_docLength="8026" length="19" offset="5181" startLine="115" starttimestamp="1599653169283" timestamp="987776">
    <deletedText><![CDATA[verifyingMethodName]]></deletedText>
    <insertedText><![CDATA[derivedMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1084" _type="Replace" date="Wed Sep 09 08:22:39 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5674" docExpressionCount="560" docLength="8041" endLine="116" insertionLength="17" int_docASTNodeCount="688" int_docActiveCodeLength="5657" int_docExpressionCount="524" int_docLength="8024" length="19" offset="5295" startLine="116" starttimestamp="1599653169283" timestamp="990412">
    <deletedText><![CDATA[verifyingMethodName]]></deletedText>
    <insertedText><![CDATA[derivedMethodName]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1087" _type="Delete" date="Wed Sep 09 08:22:41 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5673" docExpressionCount="560" docLength="8040" endLine="116" length="1" offset="5302" startLine="116" starttimestamp="1599653169283" timestamp="992046">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="1089" _type="Delete" date="Wed Sep 09 08:22:41 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5672" docExpressionCount="560" docLength="8039" endLine="116" length="1" offset="5301" startLine="116" starttimestamp="1599653169283" timestamp="992605">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1091" _type="Delete" date="Wed Sep 09 08:22:42 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5671" docExpressionCount="560" docLength="8038" endLine="116" length="1" offset="5300" startLine="116" starttimestamp="1599653169283" timestamp="992743">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1082" _type="MoveCaretCommand" caretOffset="2950" date="Wed Sep 09 08:22:39 EDT 2020" docOffset="5303" starttimestamp="1599653169283" timestamp="989778" />
  <Command __id="1083" _type="SelectTextCommand" caretOffset="2961" date="Wed Sep 09 08:22:39 EDT 2020" end="2961" start="2942" starttimestamp="1599653169283" timestamp="989903" />
  <Command __id="1085" _type="PasteCommand" date="Wed Sep 09 08:22:39 EDT 2020" starttimestamp="1599653169283" timestamp="990432" />
  <Command __id="1086" _type="MoveCaretCommand" caretOffset="2949" date="Wed Sep 09 08:22:40 EDT 2020" docOffset="5302" starttimestamp="1599653169283" timestamp="991351" />
  <Command __id="1088" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Sep 09 08:22:41 EDT 2020" starttimestamp="1599653169283" timestamp="992055" />
  <Command __id="1090" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:41 EDT 2020" starttimestamp="1599653169283" timestamp="992611" />
  <Command __id="1092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:42 EDT 2020" starttimestamp="1599653169283" timestamp="992749" />
  <Command __id="1094" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:42 EDT 2020" starttimestamp="1599653169283" timestamp="992962" />
  <Command __id="1096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:42 EDT 2020" starttimestamp="1599653169283" timestamp="993028" />
  <Command __id="1098" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:42 EDT 2020" starttimestamp="1599653169283" timestamp="993168" />
  <Command __id="1100" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:42 EDT 2020" starttimestamp="1599653169283" timestamp="993303" />
  <Command __id="1102" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:22:42 EDT 2020" starttimestamp="1599653169283" timestamp="993592" />
  <Command __id="1104" _type="InsertStringCommand" date="Wed Sep 09 08:22:43 EDT 2020" starttimestamp="1599653169283" timestamp="993983" timestamp2="993983">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1106" _type="InsertStringCommand" date="Wed Sep 09 08:22:43 EDT 2020" starttimestamp="1599653169283" timestamp="994132" timestamp2="994132">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1108" _type="InsertStringCommand" date="Wed Sep 09 08:22:43 EDT 2020" starttimestamp="1599653169283" timestamp="994201" timestamp2="994201">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1110" _type="InsertStringCommand" date="Wed Sep 09 08:22:43 EDT 2020" starttimestamp="1599653169283" timestamp="994626" timestamp2="994626">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1112" _type="InsertStringCommand" date="Wed Sep 09 08:22:44 EDT 2020" starttimestamp="1599653169283" timestamp="994786" timestamp2="994786">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1114" _type="InsertStringCommand" date="Wed Sep 09 08:22:44 EDT 2020" starttimestamp="1599653169283" timestamp="994937" timestamp2="994937">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1116" _type="InsertStringCommand" date="Wed Sep 09 08:22:44 EDT 2020" starttimestamp="1599653169283" timestamp="995064" timestamp2="995064">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1118" _type="InsertStringCommand" date="Wed Sep 09 08:22:44 EDT 2020" starttimestamp="1599653169283" timestamp="995197" timestamp2="995197">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1119" _type="ShellCommand" date="Wed Sep 09 08:22:49 EDT 2020" starttimestamp="1599653169283" timestamp="1000089" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1120" _type="ShellCommand" date="Wed Sep 09 08:22:49 EDT 2020" starttimestamp="1599653169283" timestamp="1000235" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1122" _type="MoveCaretCommand" caretOffset="3153" date="Wed Sep 09 08:23:00 EDT 2020" docOffset="5506" starttimestamp="1599653169283" timestamp="1011666" />
  <Command __id="1123" _type="SelectTextCommand" caretOffset="3153" date="Wed Sep 09 08:23:02 EDT 2020" end="3153" start="3006" starttimestamp="1599653169283" timestamp="1013051" />
  <Command __id="1124" _type="MoveCaretCommand" caretOffset="3153" date="Wed Sep 09 08:23:02 EDT 2020" docOffset="5506" starttimestamp="1599653169283" timestamp="1013244" />
  <Command __id="1125" _type="MoveCaretCommand" caretOffset="2788" date="Wed Sep 09 08:23:11 EDT 2020" docOffset="5141" starttimestamp="1599653169283" timestamp="1021861" />
  <Command __id="1126" _type="SelectTextCommand" caretOffset="2800" date="Wed Sep 09 08:23:11 EDT 2020" end="2800" start="2777" starttimestamp="1599653169283" timestamp="1022001" />
  <DocumentChange __id="1093" _type="Delete" date="Wed Sep 09 08:22:42 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5670" docExpressionCount="560" docLength="8037" endLine="116" length="1" offset="5299" startLine="116" starttimestamp="1599653169283" timestamp="992951">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="1095" _type="Delete" date="Wed Sep 09 08:22:42 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5669" docExpressionCount="560" docLength="8036" endLine="116" length="1" offset="5298" startLine="116" starttimestamp="1599653169283" timestamp="993025">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1097" _type="Delete" date="Wed Sep 09 08:22:42 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5668" docExpressionCount="560" docLength="8035" endLine="116" length="1" offset="5297" startLine="116" starttimestamp="1599653169283" timestamp="993162">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1099" _type="Delete" date="Wed Sep 09 08:22:42 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5667" docExpressionCount="560" docLength="8034" endLine="116" length="1" offset="5296" startLine="116" starttimestamp="1599653169283" timestamp="993297">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1101" _type="Delete" date="Wed Sep 09 08:22:42 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5666" docExpressionCount="560" docLength="8033" endLine="116" length="1" offset="5295" startLine="116" starttimestamp="1599653169283" timestamp="993583">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1103" _type="Insert" date="Wed Sep 09 08:22:43 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5667" docExpressionCount="560" docLength="8034" length="1" offset="5295" starttimestamp="1599653169283" timestamp="993967">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1105" _type="Insert" date="Wed Sep 09 08:22:43 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5668" docExpressionCount="560" docLength="8035" length="1" offset="5296" starttimestamp="1599653169283" timestamp="994124">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1107" _type="Insert" date="Wed Sep 09 08:22:43 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5669" docExpressionCount="560" docLength="8036" length="1" offset="5297" starttimestamp="1599653169283" timestamp="994197">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1109" _type="Insert" date="Wed Sep 09 08:22:43 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5670" docExpressionCount="560" docLength="8037" length="1" offset="5298" starttimestamp="1599653169283" timestamp="994614">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1111" _type="Insert" date="Wed Sep 09 08:22:44 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5671" docExpressionCount="560" docLength="8038" length="1" offset="5299" starttimestamp="1599653169283" timestamp="994774">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1113" _type="Insert" date="Wed Sep 09 08:22:44 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5672" docExpressionCount="560" docLength="8039" length="1" offset="5300" starttimestamp="1599653169283" timestamp="994926">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1115" _type="Insert" date="Wed Sep 09 08:22:44 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5673" docExpressionCount="560" docLength="8040" length="1" offset="5301" starttimestamp="1599653169283" timestamp="995051">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1117" _type="Insert" date="Wed Sep 09 08:22:44 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5674" docExpressionCount="560" docLength="8041" length="1" offset="5302" starttimestamp="1599653169283" timestamp="995184">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1121" _type="Replace" date="Wed Sep 09 08:22:49 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5675" docExpressionCount="560" docLength="8042" endLine="116" insertionLength="18" int_docASTNodeCount="688" int_docActiveCodeLength="5657" int_docExpressionCount="524" int_docLength="8024" length="17" offset="5295" startLine="116" starttimestamp="1599653169283" timestamp="1000250">
    <deletedText><![CDATA[inferredethodName]]></deletedText>
    <insertedText><![CDATA[inferredMethodName]]></insertedText>
  </DocumentChange>
  <Command __id="1127" _type="MoveCaretCommand" caretOffset="782" date="Wed Sep 09 08:23:27 EDT 2020" docOffset="3135" starttimestamp="1599653169283" timestamp="1037811" />
  <DocumentChange __id="1128" _type="Insert" date="Wed Sep 09 08:23:28 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5676" docExpressionCount="560" docLength="8043" length="1" offset="3135" starttimestamp="1599653169283" timestamp="1038885">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="1129" _type="InsertStringCommand" date="Wed Sep 09 08:23:28 EDT 2020" starttimestamp="1599653169283" timestamp="1038899" timestamp2="1038899">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="1130" _type="Insert" date="Wed Sep 09 08:23:28 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5677" docExpressionCount="560" docLength="8044" length="1" offset="3136" starttimestamp="1599653169283" timestamp="1039043">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1131" _type="InsertStringCommand" date="Wed Sep 09 08:23:28 EDT 2020" starttimestamp="1599653169283" timestamp="1039052" timestamp2="1039052">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1132" _type="Insert" date="Wed Sep 09 08:23:28 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5678" docExpressionCount="560" docLength="8045" length="1" offset="3137" starttimestamp="1599653169283" timestamp="1039176">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1133" _type="InsertStringCommand" date="Wed Sep 09 08:23:28 EDT 2020" starttimestamp="1599653169283" timestamp="1039186" timestamp2="1039186">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1134" _type="Insert" date="Wed Sep 09 08:23:28 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5679" docExpressionCount="560" docLength="8046" length="1" offset="3138" starttimestamp="1599653169283" timestamp="1039486">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="1135" _type="InsertStringCommand" date="Wed Sep 09 08:23:28 EDT 2020" starttimestamp="1599653169283" timestamp="1039496" timestamp2="1039496">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="1136" _type="Delete" date="Wed Sep 09 08:23:29 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5678" docExpressionCount="560" docLength="8045" endLine="68" length="1" offset="3138" startLine="68" starttimestamp="1599653169283" timestamp="1040319">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="1137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:29 EDT 2020" starttimestamp="1599653169283" timestamp="1040327" />
  <DocumentChange __id="1138" _type="Insert" date="Wed Sep 09 08:23:31 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5679" docExpressionCount="560" docLength="8046" length="1" offset="3138" starttimestamp="1599653169283" timestamp="1041964">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1139" _type="InsertStringCommand" date="Wed Sep 09 08:23:31 EDT 2020" starttimestamp="1599653169283" timestamp="1041974" timestamp2="1041974">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1140" _type="Insert" date="Wed Sep 09 08:23:31 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5680" docExpressionCount="560" docLength="8047" length="1" offset="3139" starttimestamp="1599653169283" timestamp="1042060">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="1141" _type="InsertStringCommand" date="Wed Sep 09 08:23:31 EDT 2020" starttimestamp="1599653169283" timestamp="1042069" timestamp2="1042069">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="1142" _type="Insert" date="Wed Sep 09 08:23:31 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5681" docExpressionCount="560" docLength="8048" length="1" offset="3140" starttimestamp="1599653169283" timestamp="1042234">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1143" _type="InsertStringCommand" date="Wed Sep 09 08:23:31 EDT 2020" starttimestamp="1599653169283" timestamp="1042244" timestamp2="1042244">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1145" _type="InsertStringCommand" date="Wed Sep 09 08:23:31 EDT 2020" starttimestamp="1599653169283" timestamp="1042412" timestamp2="1042412">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1146" _type="SelectTextCommand" caretOffset="831" date="Wed Sep 09 08:23:36 EDT 2020" end="831" start="773" starttimestamp="1599653169283" timestamp="1047173" />
  <Command __id="1147" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:23:37 EDT 2020" starttimestamp="1599653169283" timestamp="1047892" />
  <Command __id="1148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:37 EDT 2020" starttimestamp="1599653169283" timestamp="1048442" />
  <Command __id="1149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1048718" />
  <Command __id="1150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1048890" />
  <Command __id="1151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1049031" />
  <Command __id="1152" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1049538" />
  <Command __id="1153" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1049567" />
  <Command __id="1154" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1049607" />
  <Command __id="1155" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1049664" />
  <Command __id="1156" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:38 EDT 2020" starttimestamp="1599653169283" timestamp="1049687" />
  <Command __id="1157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049725" />
  <Command __id="1158" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049755" />
  <Command __id="1159" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049786" />
  <Command __id="1160" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049814" />
  <Command __id="1161" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049848" />
  <Command __id="1162" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049880" />
  <Command __id="1163" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049909" />
  <Command __id="1164" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049943" />
  <Command __id="1165" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1049973" />
  <Command __id="1166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050055" />
  <Command __id="1167" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050057" />
  <Command __id="1168" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050060" />
  <Command __id="1169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050095" />
  <DocumentChange __id="1144" _type="Insert" date="Wed Sep 09 08:23:31 EDT 2020" docASTNodeCount="737" docActiveCodeLength="5682" docExpressionCount="560" docLength="8049" length="1" offset="3141" starttimestamp="1599653169283" timestamp="1042402">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1170" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050122" />
  <Command __id="1171" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050154" />
  <Command __id="1172" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050188" />
  <Command __id="1173" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050222" />
  <Command __id="1174" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050255" />
  <Command __id="1175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050281" />
  <Command __id="1176" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:23:39 EDT 2020" starttimestamp="1599653169283" timestamp="1050629" />
  <Command __id="1177" _type="CopyCommand" date="Wed Sep 09 08:23:40 EDT 2020" starttimestamp="1599653169283" timestamp="1051296" />
  <Command __id="1178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:23:40 EDT 2020" starttimestamp="1599653169283" timestamp="1051686" />
  <Command __id="1180" _type="PasteCommand" date="Wed Sep 09 08:23:42 EDT 2020" starttimestamp="1599653169283" timestamp="1052982" />
  <Command __id="1181" _type="MoveCaretCommand" caretOffset="820" date="Wed Sep 09 08:23:43 EDT 2020" docOffset="3173" starttimestamp="1599653169283" timestamp="1054523" />
  <Command __id="1183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:44 EDT 2020" starttimestamp="1599653169283" timestamp="1055072" />
  <Command __id="1185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:44 EDT 2020" starttimestamp="1599653169283" timestamp="1055098" />
  <Command __id="1187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:44 EDT 2020" starttimestamp="1599653169283" timestamp="1055353" />
  <Command __id="1189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:44 EDT 2020" starttimestamp="1599653169283" timestamp="1055478" />
  <Command __id="1191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:44 EDT 2020" starttimestamp="1599653169283" timestamp="1055627" />
  <Command __id="1193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:45 EDT 2020" starttimestamp="1599653169283" timestamp="1055773" />
  <Command __id="1195" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:23:45 EDT 2020" starttimestamp="1599653169283" timestamp="1055947" />
  <Command __id="1197" _type="InsertStringCommand" date="Wed Sep 09 08:23:45 EDT 2020" starttimestamp="1599653169283" timestamp="1056409" timestamp2="1056409">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1199" _type="InsertStringCommand" date="Wed Sep 09 08:23:45 EDT 2020" starttimestamp="1599653169283" timestamp="1056585" timestamp2="1056585">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1201" _type="InsertStringCommand" date="Wed Sep 09 08:23:46 EDT 2020" starttimestamp="1599653169283" timestamp="1056727" timestamp2="1056727">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1203" _type="InsertStringCommand" date="Wed Sep 09 08:23:46 EDT 2020" starttimestamp="1599653169283" timestamp="1056890" timestamp2="1056890">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Wed Sep 09 08:23:46 EDT 2020" starttimestamp="1599653169283" timestamp="1057067" timestamp2="1057067">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Wed Sep 09 08:23:46 EDT 2020" starttimestamp="1599653169283" timestamp="1057170" timestamp2="1057170">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1209" _type="InsertStringCommand" date="Wed Sep 09 08:23:46 EDT 2020" starttimestamp="1599653169283" timestamp="1057279" timestamp2="1057279">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1211" _type="InsertStringCommand" date="Wed Sep 09 08:23:46 EDT 2020" starttimestamp="1599653169283" timestamp="1057425" timestamp2="1057425">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1212" _type="MoveCaretCommand" caretOffset="2829" date="Wed Sep 09 08:23:58 EDT 2020" docOffset="5182" starttimestamp="1599653169283" timestamp="1069070" />
  <Command __id="1213" _type="SelectTextCommand" caretOffset="2839" date="Wed Sep 09 08:23:58 EDT 2020" end="2839" start="2816" starttimestamp="1599653169283" timestamp="1069203" />
  <Command __id="1214" _type="CopyCommand" date="Wed Sep 09 08:23:59 EDT 2020" starttimestamp="1599653169283" timestamp="1070393" />
  <Command __id="1215" _type="MoveCaretCommand" caretOffset="3108" date="Wed Sep 09 08:24:00 EDT 2020" docOffset="5461" starttimestamp="1599653169283" timestamp="1070927" />
  <Command __id="1216" _type="SelectTextCommand" caretOffset="3120" date="Wed Sep 09 08:24:00 EDT 2020" end="3120" start="3104" starttimestamp="1599653169283" timestamp="1071085" />
  <Command __id="1218" _type="PasteCommand" date="Wed Sep 09 08:24:00 EDT 2020" starttimestamp="1599653169283" timestamp="1071255" />
  <DocumentChange __id="1179" _type="Insert" date="Wed Sep 09 08:23:42 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5713" docExpressionCount="562" docLength="8080" length="31" offset="3157" starttimestamp="1599653169283" timestamp="1052959">
    <text><![CDATA[,Method aDerivedVerifyingMethod]]></text>
  </DocumentChange>
  <DocumentChange __id="1182" _type="Delete" date="Wed Sep 09 08:23:44 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5712" docExpressionCount="562" docLength="8079" endLine="68" length="1" offset="3172" startLine="68" starttimestamp="1599653169283" timestamp="1055066">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1184" _type="Delete" date="Wed Sep 09 08:23:44 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5711" docExpressionCount="562" docLength="8078" endLine="68" length="1" offset="3171" startLine="68" starttimestamp="1599653169283" timestamp="1055094">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1186" _type="Delete" date="Wed Sep 09 08:23:44 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5710" docExpressionCount="562" docLength="8077" endLine="68" length="1" offset="3170" startLine="68" starttimestamp="1599653169283" timestamp="1055347">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="1188" _type="Delete" date="Wed Sep 09 08:23:44 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5709" docExpressionCount="562" docLength="8076" endLine="68" length="1" offset="3169" startLine="68" starttimestamp="1599653169283" timestamp="1055476">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1190" _type="Delete" date="Wed Sep 09 08:23:44 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5708" docExpressionCount="562" docLength="8075" endLine="68" length="1" offset="3168" startLine="68" starttimestamp="1599653169283" timestamp="1055621">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1192" _type="Delete" date="Wed Sep 09 08:23:45 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5707" docExpressionCount="562" docLength="8074" endLine="68" length="1" offset="3167" startLine="68" starttimestamp="1599653169283" timestamp="1055767">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1194" _type="Delete" date="Wed Sep 09 08:23:45 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5706" docExpressionCount="562" docLength="8073" endLine="68" length="1" offset="3166" startLine="68" starttimestamp="1599653169283" timestamp="1055939">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="1196" _type="Insert" date="Wed Sep 09 08:23:45 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5707" docExpressionCount="562" docLength="8074" length="1" offset="3166" starttimestamp="1599653169283" timestamp="1056399">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="1198" _type="Insert" date="Wed Sep 09 08:23:45 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5708" docExpressionCount="562" docLength="8075" length="1" offset="3167" starttimestamp="1599653169283" timestamp="1056576">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1200" _type="Insert" date="Wed Sep 09 08:23:46 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5709" docExpressionCount="562" docLength="8076" length="1" offset="3168" starttimestamp="1599653169283" timestamp="1056718">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1202" _type="Insert" date="Wed Sep 09 08:23:46 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5710" docExpressionCount="562" docLength="8077" length="1" offset="3169" starttimestamp="1599653169283" timestamp="1056881">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1204" _type="Insert" date="Wed Sep 09 08:23:46 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5711" docExpressionCount="562" docLength="8078" length="1" offset="3170" starttimestamp="1599653169283" timestamp="1057057">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1206" _type="Insert" date="Wed Sep 09 08:23:46 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5712" docExpressionCount="562" docLength="8079" length="1" offset="3171" starttimestamp="1599653169283" timestamp="1057161">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1208" _type="Insert" date="Wed Sep 09 08:23:46 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5713" docExpressionCount="562" docLength="8080" length="1" offset="3172" starttimestamp="1599653169283" timestamp="1057269">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1210" _type="Insert" date="Wed Sep 09 08:23:46 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5714" docExpressionCount="562" docLength="8081" length="1" offset="3173" starttimestamp="1599653169283" timestamp="1057416">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1217" _type="Replace" date="Wed Sep 09 08:24:00 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5721" docExpressionCount="562" docLength="8088" endLine="118" insertionLength="23" int_docASTNodeCount="741" int_docActiveCodeLength="5698" int_docExpressionCount="562" int_docLength="8065" length="16" offset="5457" startLine="118" starttimestamp="1599653169283" timestamp="1071233">
    <deletedText><![CDATA[aVerifyingMethod]]></deletedText>
    <insertedText><![CDATA[aVerifyingMethodDerived]]></insertedText>
  </DocumentChange>
  <Command __id="1219" _type="MoveCaretCommand" caretOffset="2938" date="Wed Sep 09 08:24:01 EDT 2020" docOffset="5291" starttimestamp="1599653169283" timestamp="1072328" />
  <Command __id="1220" _type="SelectTextCommand" caretOffset="2954" date="Wed Sep 09 08:24:01 EDT 2020" end="2954" start="2930" starttimestamp="1599653169283" timestamp="1072468" />
  <Command __id="1221" _type="CopyCommand" date="Wed Sep 09 08:24:02 EDT 2020" starttimestamp="1599653169283" timestamp="1072991" />
  <Command __id="1222" _type="MoveCaretCommand" caretOffset="3127" date="Wed Sep 09 08:24:03 EDT 2020" docOffset="5480" starttimestamp="1599653169283" timestamp="1073798" />
  <DocumentChange __id="1223" _type="Insert" date="Wed Sep 09 08:24:04 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5722" docExpressionCount="563" docLength="8089" length="1" offset="5480" starttimestamp="1599653169283" timestamp="1075062">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1224" _type="InsertStringCommand" date="Wed Sep 09 08:24:04 EDT 2020" starttimestamp="1599653169283" timestamp="1075070" timestamp2="1075070">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1226" _type="PasteCommand" date="Wed Sep 09 08:24:04 EDT 2020" starttimestamp="1599653169283" timestamp="1075290" />
  <Command __id="1227" _type="SelectTextCommand" caretOffset="3138" date="Wed Sep 09 08:24:08 EDT 2020" end="3138" start="3103" starttimestamp="1599653169283" timestamp="1079195" />
  <Command __id="1228" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:09 EDT 2020" starttimestamp="1599653169283" timestamp="1080476" />
  <Command __id="1229" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1080986" />
  <Command __id="1230" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081017" />
  <Command __id="1231" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081045" />
  <Command __id="1232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081076" />
  <Command __id="1233" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081110" />
  <Command __id="1234" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081139" />
  <Command __id="1235" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081173" />
  <Command __id="1236" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081483" />
  <Command __id="1237" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:10 EDT 2020" starttimestamp="1599653169283" timestamp="1081653" />
  <Command __id="1238" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:11 EDT 2020" starttimestamp="1599653169283" timestamp="1081812" />
  <Command __id="1239" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:11 EDT 2020" starttimestamp="1599653169283" timestamp="1081946" />
  <Command __id="1240" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:11 EDT 2020" starttimestamp="1599653169283" timestamp="1082093" />
  <Command __id="1241" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_NEXT" date="Wed Sep 09 08:24:11 EDT 2020" starttimestamp="1599653169283" timestamp="1082232" />
  <Command __id="1242" _type="CopyCommand" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1082853" />
  <Command __id="1243" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083002" />
  <Command __id="1244" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083506" />
  <Command __id="1245" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083543" />
  <Command __id="1246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083569" />
  <Command __id="1247" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083600" />
  <Command __id="1248" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083631" />
  <Command __id="1249" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083663" />
  <Command __id="1250" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:12 EDT 2020" starttimestamp="1599653169283" timestamp="1083695" />
  <Command __id="1251" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083725" />
  <Command __id="1252" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083755" />
  <Command __id="1253" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083786" />
  <Command __id="1254" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083816" />
  <Command __id="1255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083848" />
  <Command __id="1256" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083877" />
  <Command __id="1257" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083908" />
  <Command __id="1258" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083942" />
  <Command __id="1259" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1083974" />
  <Command __id="1260" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084002" />
  <Command __id="1261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084034" />
  <Command __id="1262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084062" />
  <Command __id="1263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084092" />
  <Command __id="1264" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084123" />
  <Command __id="1265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084154" />
  <Command __id="1266" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084184" />
  <Command __id="1267" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084215" />
  <Command __id="1268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084247" />
  <Command __id="1269" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084277" />
  <Command __id="1270" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084308" />
  <Command __id="1271" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084338" />
  <Command __id="1272" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084369" />
  <Command __id="1273" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084398" />
  <Command __id="1274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084429" />
  <Command __id="1275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084460" />
  <Command __id="1276" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084490" />
  <Command __id="1277" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084522" />
  <Command __id="1278" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084553" />
  <Command __id="1279" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084582" />
  <Command __id="1280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084612" />
  <Command __id="1281" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084642" />
  <Command __id="1282" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084674" />
  <Command __id="1283" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:13 EDT 2020" starttimestamp="1599653169283" timestamp="1084704" />
  <Command __id="1284" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084733" />
  <Command __id="1285" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084765" />
  <Command __id="1286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084795" />
  <Command __id="1287" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084827" />
  <Command __id="1288" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084858" />
  <Command __id="1289" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084889" />
  <Command __id="1290" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084921" />
  <Command __id="1291" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084950" />
  <Command __id="1292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1084981" />
  <Command __id="1293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085013" />
  <Command __id="1294" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085042" />
  <Command __id="1295" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085073" />
  <Command __id="1296" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085103" />
  <Command __id="1297" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085134" />
  <Command __id="1298" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085164" />
  <Command __id="1299" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085194" />
  <Command __id="1300" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085225" />
  <Command __id="1301" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085399" />
  <Command __id="1302" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085538" />
  <Command __id="1303" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:14 EDT 2020" starttimestamp="1599653169283" timestamp="1085691" />
  <Command __id="1304" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:15 EDT 2020" starttimestamp="1599653169283" timestamp="1085853" />
  <Command __id="1305" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:15 EDT 2020" starttimestamp="1599653169283" timestamp="1086002" />
  <Command __id="1306" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:24:15 EDT 2020" starttimestamp="1599653169283" timestamp="1086106" />
  <Command __id="1307" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:24:15 EDT 2020" starttimestamp="1599653169283" timestamp="1086612" />
  <Command __id="1309" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:16 EDT 2020" starttimestamp="1599653169283" timestamp="1087178" />
  <Command __id="1311" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:16 EDT 2020" starttimestamp="1599653169283" timestamp="1087683" />
  <Command __id="1313" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:16 EDT 2020" starttimestamp="1599653169283" timestamp="1087714" />
  <Command __id="1315" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087748" />
  <Command __id="1317" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087779" />
  <Command __id="1319" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087809" />
  <Command __id="1321" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087839" />
  <Command __id="1323" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087869" />
  <Command __id="1325" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087898" />
  <Command __id="1327" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087929" />
  <Command __id="1329" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087959" />
  <Command __id="1331" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1087990" />
  <Command __id="1333" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1088021" />
  <Command __id="1335" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1088053" />
  <Command __id="1337" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1088080" />
  <Command __id="1339" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:17 EDT 2020" starttimestamp="1599653169283" timestamp="1088236" />
  <Command __id="1344" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090387" />
  <Command __id="1345" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090394" />
  <Command __id="1346" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090460" />
  <Command __id="1347" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090460" />
  <Command __id="1348" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090479" />
  <Command __id="1349" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090479" />
  <Command __id="1350" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:19 EDT 2020" starttimestamp="1599653169283" timestamp="1090495" />
  <DocumentChange __id="1225" _type="Insert" date="Wed Sep 09 08:24:04 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5746" docExpressionCount="563" docLength="8113" length="24" offset="5481" starttimestamp="1599653169283" timestamp="1075267">
    <text><![CDATA[aVerifyingMethodInferred]]></text>
  </DocumentChange>
  <DocumentChange __id="1308" _type="Delete" date="Wed Sep 09 08:24:16 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5745" docExpressionCount="563" docLength="8112" endLine="118" length="1" offset="5566" startLine="118" starttimestamp="1599653169283" timestamp="1087172">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1310" _type="Delete" date="Wed Sep 09 08:24:16 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5744" docExpressionCount="563" docLength="8111" endLine="118" length="1" offset="5565" startLine="118" starttimestamp="1599653169283" timestamp="1087677">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1312" _type="Delete" date="Wed Sep 09 08:24:16 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5743" docExpressionCount="563" docLength="8110" endLine="118" length="1" offset="5564" startLine="118" starttimestamp="1599653169283" timestamp="1087708">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="1314" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5742" docExpressionCount="563" docLength="8109" endLine="118" length="1" offset="5563" startLine="118" starttimestamp="1599653169283" timestamp="1087742">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1316" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5741" docExpressionCount="563" docLength="8108" endLine="118" length="1" offset="5562" startLine="118" starttimestamp="1599653169283" timestamp="1087772">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1318" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5740" docExpressionCount="563" docLength="8107" endLine="118" length="1" offset="5561" startLine="118" starttimestamp="1599653169283" timestamp="1087802">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="1320" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5739" docExpressionCount="563" docLength="8106" endLine="118" length="1" offset="5560" startLine="118" starttimestamp="1599653169283" timestamp="1087832">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1322" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5738" docExpressionCount="563" docLength="8105" endLine="118" length="1" offset="5559" startLine="118" starttimestamp="1599653169283" timestamp="1087862">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1324" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5737" docExpressionCount="563" docLength="8104" endLine="118" length="1" offset="5558" startLine="118" starttimestamp="1599653169283" timestamp="1087892">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1326" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5736" docExpressionCount="563" docLength="8103" endLine="118" length="1" offset="5557" startLine="118" starttimestamp="1599653169283" timestamp="1087923">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="1328" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5735" docExpressionCount="563" docLength="8102" endLine="118" length="1" offset="5556" startLine="118" starttimestamp="1599653169283" timestamp="1087953">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1330" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5734" docExpressionCount="563" docLength="8101" endLine="118" length="1" offset="5555" startLine="118" starttimestamp="1599653169283" timestamp="1087983">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1332" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5733" docExpressionCount="563" docLength="8100" endLine="118" length="1" offset="5554" startLine="118" starttimestamp="1599653169283" timestamp="1088013">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1334" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5732" docExpressionCount="563" docLength="8099" endLine="118" length="1" offset="5553" startLine="118" starttimestamp="1599653169283" timestamp="1088044">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1336" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5731" docExpressionCount="563" docLength="8098" endLine="118" length="1" offset="5552" startLine="118" starttimestamp="1599653169283" timestamp="1088074">
    <text><![CDATA[V]]></text>
  </DocumentChange>
  <DocumentChange __id="1338" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="742" docActiveCodeLength="5730" docExpressionCount="563" docLength="8097" endLine="118" length="1" offset="5551" startLine="118" starttimestamp="1599653169283" timestamp="1088230">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1340" _type="Delete" date="Wed Sep 09 08:24:17 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5729" docExpressionCount="562" docLength="8096" endLine="118" length="1" offset="5550" startLine="118" starttimestamp="1599653169283" timestamp="1088408">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="1342" _type="Insert" date="Wed Sep 09 08:24:18 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5778" docExpressionCount="564" docLength="8145" length="49" offset="5550" starttimestamp="1599653169283" timestamp="1089138">
    <text><![CDATA[,aVerifyingMethodDerived,aVerifyingMethodInferred]]></text>
  </DocumentChange>
  <DocumentChange __id="1352" _type="Insert" date="Wed Sep 09 08:24:23 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5788" docExpressionCount="564" docLength="8155" length="10" offset="5506" starttimestamp="1599653169283" timestamp="1094537">
    <text><![CDATA[
		    		]]></text>
  </DocumentChange>
  <DocumentChange __id="1354" _type="Insert" date="Wed Sep 09 08:24:24 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5789" docExpressionCount="564" docLength="8156" length="1" offset="5516" starttimestamp="1599653169283" timestamp="1095546">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1356" _type="Insert" date="Wed Sep 09 08:24:25 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5790" docExpressionCount="564" docLength="8157" length="1" offset="5517" starttimestamp="1599653169283" timestamp="1096348">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1358" _type="Insert" date="Wed Sep 09 08:24:26 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5791" docExpressionCount="564" docLength="8158" length="1" offset="5518" starttimestamp="1599653169283" timestamp="1096734">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="1351" _type="MoveCaretCommand" caretOffset="3153" date="Wed Sep 09 08:24:23 EDT 2020" docOffset="5506" starttimestamp="1599653169283" timestamp="1093994" />
  <Command __id="1353" _type="InsertStringCommand" date="Wed Sep 09 08:24:23 EDT 2020" starttimestamp="1599653169283" timestamp="1094552" timestamp2="1094552">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1355" _type="InsertStringCommand" date="Wed Sep 09 08:24:24 EDT 2020" starttimestamp="1599653169283" timestamp="1095548" timestamp2="1095548">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1357" _type="InsertStringCommand" date="Wed Sep 09 08:24:25 EDT 2020" starttimestamp="1599653169283" timestamp="1096350" timestamp2="1096350">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1359" _type="InsertStringCommand" date="Wed Sep 09 08:24:26 EDT 2020" starttimestamp="1599653169283" timestamp="1096736" timestamp2="1096736">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1361" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:27 EDT 2020" starttimestamp="1599653169283" timestamp="1097838" />
  <Command __id="1363" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:24:27 EDT 2020" starttimestamp="1599653169283" timestamp="1098180" />
  <Command __id="1365" _type="InsertStringCommand" date="Wed Sep 09 08:24:28 EDT 2020" starttimestamp="1599653169283" timestamp="1099034" timestamp2="1099034">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1367" _type="InsertStringCommand" date="Wed Sep 09 08:24:28 EDT 2020" starttimestamp="1599653169283" timestamp="1099199" timestamp2="1099199">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1368" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105267" />
  <Command __id="1369" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105362" />
  <Command __id="1370" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105409" />
  <Command __id="1371" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105409" />
  <Command __id="1372" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105424" />
  <Command __id="1373" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105424" />
  <Command __id="1374" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:24:34 EDT 2020" starttimestamp="1599653169283" timestamp="1105440" />
  <DocumentChange __id="1360" _type="Delete" date="Wed Sep 09 08:24:27 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5790" docExpressionCount="564" docLength="8157" endLine="119" length="1" offset="5518" startLine="119" starttimestamp="1599653169283" timestamp="1097827">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1362" _type="Delete" date="Wed Sep 09 08:24:27 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5789" docExpressionCount="564" docLength="8156" endLine="119" length="1" offset="5517" startLine="119" starttimestamp="1599653169283" timestamp="1098178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1364" _type="Insert" date="Wed Sep 09 08:24:28 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5790" docExpressionCount="564" docLength="8157" length="1" offset="5517" starttimestamp="1599653169283" timestamp="1099030">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1366" _type="Insert" date="Wed Sep 09 08:24:28 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5791" docExpressionCount="564" docLength="8158" length="1" offset="5518" starttimestamp="1599653169283" timestamp="1099196">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1375" _type="MoveCaretCommand" caretOffset="863" date="Wed Sep 09 08:24:49 EDT 2020" docOffset="3216" starttimestamp="1599653169283" timestamp="1119881" />
  <DocumentChange __id="1376" _type="Insert" date="Wed Sep 09 08:24:51 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5795" docExpressionCount="564" docLength="8162" length="4" offset="3216" starttimestamp="1599653169283" timestamp="1122051">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1377" _type="InsertStringCommand" date="Wed Sep 09 08:24:51 EDT 2020" starttimestamp="1599653169283" timestamp="1122060" timestamp2="1122060">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1378" _type="Insert" date="Wed Sep 09 08:24:51 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5799" docExpressionCount="564" docLength="8166" length="4" offset="3220" starttimestamp="1599653169283" timestamp="1122195">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1379" _type="InsertStringCommand" date="Wed Sep 09 08:24:51 EDT 2020" starttimestamp="1599653169283" timestamp="1122204" timestamp2="1122204">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1380" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:25:01 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1131992">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1381" _type="SelectTextCommand" caretOffset="174" date="Wed Sep 09 08:25:01 EDT 2020" end="174" start="139" starttimestamp="1599653169283" timestamp="1132069" />
  <Command __id="1382" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:25:13 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5799" docExpressionCount="564" docLength="8166" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1144515">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method a"), Diff(INSERT,"DerivedVerifyingMethod,Method aInferred"), Diff(EQUAL,"VerifyingMethod) throws Throwable {¶	    ¶	"), Diff(INSERT,"	¶		¶	"), Diff(EQUAL,"    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 1"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,") {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 1"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,") {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod"), Diff(INSERT,"Derived"), Diff(EQUAL," =  aUtilityClass.getMethod("), Diff(DELETE,"verifying"), Diff(INSERT,"derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferred"), Diff(EQUAL,"MethodName(), verifyingArgumentTypes());"), Diff(DELETE," "), Diff(EQUAL,"¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod"), Diff(DELETE,")"), Diff(INSERT,"Derived,aVerifyingMethodInferred)¶		    			  "), Diff(EQUAL,"&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod"), Diff(INSERT,"Derived,aVerifyingMethodInferred"), Diff(EQUAL,");¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
	    
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="1383" _type="MoveCaretCommand" caretOffset="871" date="Wed Sep 09 08:25:13 EDT 2020" docOffset="3224" starttimestamp="1599653169283" timestamp="1144624" />
  <Command __id="1384" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:25:14 EDT 2020" docASTNodeCount="854" docActiveCodeLength="6594" docExpressionCount="655" docLength="9000" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1145153">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGivenAndGeneratedCombinationTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class PrintGivenAndGeneratedCombinationTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String methodName = "printGivenAndGeneratedCombinationsDerivedSafety";¶¶	//the expected output for first 8 lines¶	protected static String[] anExpectedOutput= {¶			"Distance,Duration,Exhalation,IsSafe",¶			"13,30,30,true",¶			"6,30,10,true",¶			"27,30,50,true",¶			"13,15,50,true",¶			"13,120,10,true",¶			"27,120,30,true",¶			"6,15,30,true"¶	};¶¶	public PrintGivenAndGeneratedCombinationTest() {¶	}¶	¶	protected String[] anExpectedOutput() {¶		return anExpectedOutput;¶	}¶	¶	@Override¶	protected  String methodName() {¶		return methodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {¶		String [] anExpectedOutputList=anExpectedOutput();¶	    boolean passing=true;¶	    for(int i=0;i<anOutputLines.length;i++) {¶	    	if(i<anExpectedOutputList.length) {¶	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {¶	    			passing=false;¶	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");¶	    		}¶	    	}else if (i==anExpectedOutputList.length) {¶	    		if(!anOutputLines[i].matches("-+?")) {¶	    			passing=false;¶		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");¶	    		}¶	    	}else {¶	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){¶	    			passing=false;¶	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");¶	    		}¶	    	}¶	    }¶	    return passing;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 19) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1385" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:25:14 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="1145262" />
  <Command __id="1386" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:25:43 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5799" docExpressionCount="564" docLength="8166" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1174202">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶	    ¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1387" _type="MoveCaretCommand" caretOffset="871" date="Wed Sep 09 08:25:43 EDT 2020" docOffset="3224" starttimestamp="1599653169283" timestamp="1174294" />
  <Command __id="1388" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:25:44 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1175563">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1389" _type="SelectTextCommand" caretOffset="174" date="Wed Sep 09 08:25:44 EDT 2020" end="174" start="139" starttimestamp="1599653169283" timestamp="1175655" />
  <Command __id="1391" _type="MoveCaretCommand" caretOffset="871" date="Wed Sep 09 08:26:23 EDT 2020" docOffset="3224" starttimestamp="1599653169283" timestamp="1214636" />
  <Command __id="1392" _type="MoveCaretCommand" caretOffset="863" date="Wed Sep 09 08:26:26 EDT 2020" docOffset="3216" starttimestamp="1599653169283" timestamp="1217666" />
  <Command __id="1393" _type="MoveCaretCommand" caretOffset="863" date="Wed Sep 09 08:26:29 EDT 2020" docOffset="3216" starttimestamp="1599653169283" timestamp="1220660" />
  <Command __id="1394" _type="SelectTextCommand" caretOffset="707" date="Wed Sep 09 08:26:31 EDT 2020" end="863" start="707" starttimestamp="1599653169283" timestamp="1222657" />
  <Command __id="1395" _type="MoveCaretCommand" caretOffset="863" date="Wed Sep 09 08:26:32 EDT 2020" docOffset="3216" starttimestamp="1599653169283" timestamp="1223241" />
  <Command __id="1397" _type="InsertStringCommand" date="Wed Sep 09 08:26:33 EDT 2020" starttimestamp="1599653169283" timestamp="1223873" timestamp2="1223873">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1399" _type="InsertStringCommand" date="Wed Sep 09 08:26:33 EDT 2020" starttimestamp="1599653169283" timestamp="1224026" timestamp2="1224026">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:26:33 EDT 2020" starttimestamp="1599653169283" timestamp="1224294" />
  <Command __id="1403" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:26:33 EDT 2020" starttimestamp="1599653169283" timestamp="1224457" />
  <Command __id="1405" _type="InsertStringCommand" date="Wed Sep 09 08:26:33 EDT 2020" starttimestamp="1599653169283" timestamp="1224639" timestamp2="1224639">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1407" _type="InsertStringCommand" date="Wed Sep 09 08:26:34 EDT 2020" starttimestamp="1599653169283" timestamp="1224720" timestamp2="1224720">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1409" _type="InsertStringCommand" date="Wed Sep 09 08:26:34 EDT 2020" starttimestamp="1599653169283" timestamp="1224810" timestamp2="1224810">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1390" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:26:23 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5799" docExpressionCount="564" docLength="8166" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1214490">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶	    ¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1396" _type="Insert" date="Wed Sep 09 08:26:33 EDT 2020" docASTNodeCount="745" docActiveCodeLength="5800" docExpressionCount="565" docLength="8167" length="1" offset="3216" starttimestamp="1599653169283" timestamp="1223863">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1398" _type="Insert" date="Wed Sep 09 08:26:33 EDT 2020" docASTNodeCount="745" docActiveCodeLength="5801" docExpressionCount="565" docLength="8168" length="1" offset="3217" starttimestamp="1599653169283" timestamp="1224015">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1400" _type="Delete" date="Wed Sep 09 08:26:33 EDT 2020" docASTNodeCount="745" docActiveCodeLength="5800" docExpressionCount="565" docLength="8167" endLine="69" length="1" offset="3217" startLine="69" starttimestamp="1599653169283" timestamp="1224288">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1402" _type="Delete" date="Wed Sep 09 08:26:33 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5799" docExpressionCount="564" docLength="8166" endLine="69" length="1" offset="3216" startLine="69" starttimestamp="1599653169283" timestamp="1224451">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1404" _type="Insert" date="Wed Sep 09 08:26:33 EDT 2020" docASTNodeCount="745" docActiveCodeLength="5800" docExpressionCount="565" docLength="8167" length="1" offset="3216" starttimestamp="1599653169283" timestamp="1224629">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1406" _type="Insert" date="Wed Sep 09 08:26:33 EDT 2020" docASTNodeCount="745" docActiveCodeLength="5801" docExpressionCount="565" docLength="8168" length="1" offset="3217" starttimestamp="1599653169283" timestamp="1224707">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1408" _type="Insert" date="Wed Sep 09 08:26:34 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5802" docExpressionCount="564" docLength="8169" length="1" offset="3218" starttimestamp="1599653169283" timestamp="1224799">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1413" _type="Insert" date="Wed Sep 09 08:26:36 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5806" docExpressionCount="564" docLength="8173" length="4" offset="3216" starttimestamp="1599653169283" timestamp="1226835">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="1418" _type="Insert" date="Wed Sep 09 08:26:37 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5808" docExpressionCount="563" docLength="8175" length="2" offset="3223" starttimestamp="1599653169283" timestamp="1228459">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="1420" _type="Insert" date="Wed Sep 09 08:26:37 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5809" docExpressionCount="563" docLength="8176" length="1" offset="3224" starttimestamp="1599653169283" timestamp="1228632">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1422" _type="Insert" date="Wed Sep 09 08:26:38 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5810" docExpressionCount="563" docLength="8177" length="1" offset="3225" starttimestamp="1599653169283" timestamp="1228778">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1424" _type="Insert" date="Wed Sep 09 08:26:38 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5811" docExpressionCount="563" docLength="8178" length="1" offset="3226" starttimestamp="1599653169283" timestamp="1228855">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1426" _type="Insert" date="Wed Sep 09 08:26:38 EDT 2020" docASTNodeCount="741" docActiveCodeLength="5812" docExpressionCount="563" docLength="8179" length="1" offset="3227" starttimestamp="1599653169283" timestamp="1229015">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1428" _type="Insert" date="Wed Sep 09 08:26:38 EDT 2020" docASTNodeCount="747" docActiveCodeLength="5813" docExpressionCount="565" docLength="8180" length="1" offset="3228" starttimestamp="1599653169283" timestamp="1229188">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1430" _type="Insert" date="Wed Sep 09 08:26:38 EDT 2020" docASTNodeCount="743" docActiveCodeLength="5814" docExpressionCount="564" docLength="8181" length="1" offset="3229" starttimestamp="1599653169283" timestamp="1229442">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="1432" _type="Insert" date="Wed Sep 09 08:26:39 EDT 2020" docASTNodeCount="748" docActiveCodeLength="5815" docExpressionCount="566" docLength="8182" length="1" offset="3230" starttimestamp="1599653169283" timestamp="1230425">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1434" _type="Insert" date="Wed Sep 09 08:26:39 EDT 2020" docASTNodeCount="749" docActiveCodeLength="5816" docExpressionCount="567" docLength="8183" length="1" offset="3231" starttimestamp="1599653169283" timestamp="1230658">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1410" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:26:35 EDT 2020" starttimestamp="1599653169283" timestamp="1226259" />
  <Command __id="1411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:26:35 EDT 2020" starttimestamp="1599653169283" timestamp="1226471" />
  <Command __id="1412" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:26:35 EDT 2020" starttimestamp="1599653169283" timestamp="1226639" />
  <Command __id="1414" _type="InsertStringCommand" date="Wed Sep 09 08:26:36 EDT 2020" starttimestamp="1599653169283" timestamp="1226854" timestamp2="1226854">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:26:36 EDT 2020" starttimestamp="1599653169283" timestamp="1227297" />
  <Command __id="1416" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:26:36 EDT 2020" starttimestamp="1599653169283" timestamp="1227449" />
  <Command __id="1417" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:26:37 EDT 2020" starttimestamp="1599653169283" timestamp="1227824" />
  <Command __id="1419" _type="InsertStringCommand" date="Wed Sep 09 08:26:37 EDT 2020" starttimestamp="1599653169283" timestamp="1228469" timestamp2="1228469">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1421" _type="InsertStringCommand" date="Wed Sep 09 08:26:37 EDT 2020" starttimestamp="1599653169283" timestamp="1228647" timestamp2="1228647">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1423" _type="InsertStringCommand" date="Wed Sep 09 08:26:38 EDT 2020" starttimestamp="1599653169283" timestamp="1228781" timestamp2="1228781">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1425" _type="InsertStringCommand" date="Wed Sep 09 08:26:38 EDT 2020" starttimestamp="1599653169283" timestamp="1228859" timestamp2="1228859">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1427" _type="InsertStringCommand" date="Wed Sep 09 08:26:38 EDT 2020" starttimestamp="1599653169283" timestamp="1229019" timestamp2="1229019">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1429" _type="InsertStringCommand" date="Wed Sep 09 08:26:38 EDT 2020" starttimestamp="1599653169283" timestamp="1229191" timestamp2="1229191">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1431" _type="InsertStringCommand" date="Wed Sep 09 08:26:38 EDT 2020" starttimestamp="1599653169283" timestamp="1229447" timestamp2="1229447">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1433" _type="InsertStringCommand" date="Wed Sep 09 08:26:39 EDT 2020" starttimestamp="1599653169283" timestamp="1230429" timestamp2="1230429">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1435" _type="InsertStringCommand" date="Wed Sep 09 08:26:39 EDT 2020" starttimestamp="1599653169283" timestamp="1230662" timestamp2="1230662">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1437" _type="InsertStringCommand" date="Wed Sep 09 08:26:41 EDT 2020" starttimestamp="1599653169283" timestamp="1231817" timestamp2="1231817">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1439" _type="InsertStringCommand" date="Wed Sep 09 08:26:41 EDT 2020" starttimestamp="1599653169283" timestamp="1232280" timestamp2="1232280">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="1441" _type="InsertStringCommand" date="Wed Sep 09 08:26:42 EDT 2020" starttimestamp="1599653169283" timestamp="1233257" timestamp2="1233257">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1443" _type="InsertStringCommand" date="Wed Sep 09 08:26:42 EDT 2020" starttimestamp="1599653169283" timestamp="1233364" timestamp2="1233364">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1445" _type="InsertStringCommand" date="Wed Sep 09 08:26:43 EDT 2020" starttimestamp="1599653169283" timestamp="1233720" timestamp2="1233720">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1447" _type="InsertStringCommand" date="Wed Sep 09 08:26:43 EDT 2020" starttimestamp="1599653169283" timestamp="1233897" timestamp2="1233897">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1449" _type="InsertStringCommand" date="Wed Sep 09 08:26:43 EDT 2020" starttimestamp="1599653169283" timestamp="1233987" timestamp2="1233987">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1451" _type="InsertStringCommand" date="Wed Sep 09 08:26:43 EDT 2020" starttimestamp="1599653169283" timestamp="1234130" timestamp2="1234130">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="1436" _type="Insert" date="Wed Sep 09 08:26:41 EDT 2020" docASTNodeCount="750" docActiveCodeLength="5817" docExpressionCount="568" docLength="8184" length="1" offset="3232" starttimestamp="1599653169283" timestamp="1231808">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1438" _type="Insert" date="Wed Sep 09 08:26:41 EDT 2020" docASTNodeCount="750" docActiveCodeLength="5818" docExpressionCount="568" docLength="8185" length="1" offset="3233" starttimestamp="1599653169283" timestamp="1232223">
    <text><![CDATA[<]]></text>
  </DocumentChange>
  <DocumentChange __id="1440" _type="Insert" date="Wed Sep 09 08:26:42 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5819" docExpressionCount="570" docLength="8186" length="1" offset="3234" starttimestamp="1599653169283" timestamp="1233250">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1442" _type="Insert" date="Wed Sep 09 08:26:42 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5820" docExpressionCount="570" docLength="8187" length="1" offset="3235" starttimestamp="1599653169283" timestamp="1233361">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1444" _type="Insert" date="Wed Sep 09 08:26:42 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5821" docExpressionCount="570" docLength="8188" length="1" offset="3236" starttimestamp="1599653169283" timestamp="1233715">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="1446" _type="Insert" date="Wed Sep 09 08:26:43 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5822" docExpressionCount="570" docLength="8189" length="1" offset="3237" starttimestamp="1599653169283" timestamp="1233893">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1448" _type="Insert" date="Wed Sep 09 08:26:43 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5823" docExpressionCount="570" docLength="8190" length="1" offset="3238" starttimestamp="1599653169283" timestamp="1233984">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1450" _type="Insert" date="Wed Sep 09 08:26:43 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5824" docExpressionCount="570" docLength="8191" length="1" offset="3239" starttimestamp="1599653169283" timestamp="1234127">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1452" _type="Insert" date="Wed Sep 09 08:26:43 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5825" docExpressionCount="570" docLength="8192" length="1" offset="3240" starttimestamp="1599653169283" timestamp="1234351">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1454" _type="Insert" date="Wed Sep 09 08:26:43 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5826" docExpressionCount="570" docLength="8193" length="1" offset="3241" starttimestamp="1599653169283" timestamp="1234454">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1456" _type="Insert" date="Wed Sep 09 08:26:44 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5827" docExpressionCount="570" docLength="8194" length="1" offset="3242" starttimestamp="1599653169283" timestamp="1234979">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="1458" _type="Insert" date="Wed Sep 09 08:26:44 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5828" docExpressionCount="570" docLength="8195" length="1" offset="3243" starttimestamp="1599653169283" timestamp="1235177">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1460" _type="Insert" date="Wed Sep 09 08:26:44 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5829" docExpressionCount="570" docLength="8196" length="1" offset="3244" starttimestamp="1599653169283" timestamp="1235321">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1462" _type="Insert" date="Wed Sep 09 08:26:44 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5830" docExpressionCount="570" docLength="8197" length="1" offset="3245" starttimestamp="1599653169283" timestamp="1235411">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1464" _type="Insert" date="Wed Sep 09 08:26:44 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5831" docExpressionCount="570" docLength="8198" length="1" offset="3246" starttimestamp="1599653169283" timestamp="1235557">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1466" _type="Insert" date="Wed Sep 09 08:26:45 EDT 2020" docASTNodeCount="752" docActiveCodeLength="5832" docExpressionCount="570" docLength="8199" length="1" offset="3247" starttimestamp="1599653169283" timestamp="1236229">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1469" _type="Insert" date="Wed Sep 09 08:26:45 EDT 2020" docASTNodeCount="754" docActiveCodeLength="5833" docExpressionCount="572" docLength="8200" length="1" offset="3248" starttimestamp="1599653169283" timestamp="1236447">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1471" _type="Replace" date="Wed Sep 09 08:26:46 EDT 2020" docASTNodeCount="754" docActiveCodeLength="5838" docExpressionCount="572" docLength="8205" endLine="70" insertionLength="6" int_docASTNodeCount="752" int_docActiveCodeLength="5832" int_docExpressionCount="570" int_docLength="8199" length="1" offset="3248" startLine="70" starttimestamp="1599653169283" timestamp="1237010">
    <deletedText><![CDATA[l]]></deletedText>
    <insertedText><![CDATA[length]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1473" _type="Insert" date="Wed Sep 09 08:26:47 EDT 2020" docASTNodeCount="754" docActiveCodeLength="5839" docExpressionCount="572" docLength="8206" length="1" offset="3254" starttimestamp="1599653169283" timestamp="1238186">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1475" _type="Insert" date="Wed Sep 09 08:26:47 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5840" docExpressionCount="575" docLength="8207" length="1" offset="3255" starttimestamp="1599653169283" timestamp="1238401">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1477" _type="Insert" date="Wed Sep 09 08:26:48 EDT 2020" docASTNodeCount="756" docActiveCodeLength="5841" docExpressionCount="574" docLength="8208" length="1" offset="3256" starttimestamp="1599653169283" timestamp="1238786">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="1479" _type="Insert" date="Wed Sep 09 08:26:48 EDT 2020" docASTNodeCount="756" docActiveCodeLength="5842" docExpressionCount="574" docLength="8209" length="1" offset="3257" starttimestamp="1599653169283" timestamp="1238932">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="1482" _type="Insert" date="Wed Sep 09 08:26:49 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5844" docExpressionCount="574" docLength="8211" length="2" offset="3259" starttimestamp="1599653169283" timestamp="1239798">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="1484" _type="Insert" date="Wed Sep 09 08:26:49 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5854" docExpressionCount="574" docLength="8221" length="10" offset="3261" starttimestamp="1599653169283" timestamp="1239979">
    <text><![CDATA[
			
		}]]></text>
  </DocumentChange>
  <Command __id="1453" _type="InsertStringCommand" date="Wed Sep 09 08:26:43 EDT 2020" starttimestamp="1599653169283" timestamp="1234355" timestamp2="1234355">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1455" _type="InsertStringCommand" date="Wed Sep 09 08:26:43 EDT 2020" starttimestamp="1599653169283" timestamp="1234455" timestamp2="1234455">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1457" _type="InsertStringCommand" date="Wed Sep 09 08:26:44 EDT 2020" starttimestamp="1599653169283" timestamp="1234984" timestamp2="1234984">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1459" _type="InsertStringCommand" date="Wed Sep 09 08:26:44 EDT 2020" starttimestamp="1599653169283" timestamp="1235181" timestamp2="1235181">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1461" _type="InsertStringCommand" date="Wed Sep 09 08:26:44 EDT 2020" starttimestamp="1599653169283" timestamp="1235324" timestamp2="1235324">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1463" _type="InsertStringCommand" date="Wed Sep 09 08:26:44 EDT 2020" starttimestamp="1599653169283" timestamp="1235415" timestamp2="1235415">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1465" _type="InsertStringCommand" date="Wed Sep 09 08:26:44 EDT 2020" starttimestamp="1599653169283" timestamp="1235562" timestamp2="1235562">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1467" _type="InsertStringCommand" date="Wed Sep 09 08:26:45 EDT 2020" starttimestamp="1599653169283" timestamp="1236234" timestamp2="1236234">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1468" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:26:45 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1236240" />
  <Command __id="1470" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:26:46 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1236996" />
  <Command __id="1472" _type="InsertStringCommand" date="Wed Sep 09 08:26:46 EDT 2020" starttimestamp="1599653169283" timestamp="1237031" timestamp2="1237031">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1474" _type="InsertStringCommand" date="Wed Sep 09 08:26:47 EDT 2020" starttimestamp="1599653169283" timestamp="1238194" timestamp2="1238194">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1476" _type="InsertStringCommand" date="Wed Sep 09 08:26:47 EDT 2020" starttimestamp="1599653169283" timestamp="1238403" timestamp2="1238403">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1478" _type="InsertStringCommand" date="Wed Sep 09 08:26:48 EDT 2020" starttimestamp="1599653169283" timestamp="1238790" timestamp2="1238790">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="1480" _type="InsertStringCommand" date="Wed Sep 09 08:26:48 EDT 2020" starttimestamp="1599653169283" timestamp="1238936" timestamp2="1238936">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="1481" _type="InsertStringCommand" date="Wed Sep 09 08:26:48 EDT 2020" starttimestamp="1599653169283" timestamp="1239456" timestamp2="1239456">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1483" _type="InsertStringCommand" date="Wed Sep 09 08:26:49 EDT 2020" starttimestamp="1599653169283" timestamp="1239809" timestamp2="1239809">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1485" _type="InsertStringCommand" date="Wed Sep 09 08:26:49 EDT 2020" starttimestamp="1599653169283" timestamp="1239993" timestamp2="1239993">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1487" _type="SelectTextCommand" caretOffset="174" date="Wed Sep 09 08:27:04 EDT 2020" end="174" start="139" starttimestamp="1599653169283" timestamp="1255338" />
  <Command __id="1489" _type="MoveCaretCommand" caretOffset="913" date="Wed Sep 09 08:27:05 EDT 2020" docOffset="3266" starttimestamp="1599653169283" timestamp="1256075" />
  <Command __id="1490" _type="MoveCaretCommand" caretOffset="696" date="Wed Sep 09 08:27:06 EDT 2020" docOffset="3049" starttimestamp="1599653169283" timestamp="1256941" />
  <Command __id="1492" _type="InsertStringCommand" date="Wed Sep 09 08:27:06 EDT 2020" starttimestamp="1599653169283" timestamp="1257675" timestamp2="1257675">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1494" _type="InsertStringCommand" date="Wed Sep 09 08:27:07 EDT 2020" starttimestamp="1599653169283" timestamp="1257815" timestamp2="1257815">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1496" _type="InsertStringCommand" date="Wed Sep 09 08:27:07 EDT 2020" starttimestamp="1599653169283" timestamp="1257979" timestamp2="1257979">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1486" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:27:04 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1255248">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1488" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:27:05 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5854" docExpressionCount="574" docLength="8221" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1256012">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶	    ¶		"), Diff(INSERT,"for(int i=0;i<anOutputLines.length;i++) {¶			¶		}¶		"), Diff(EQUAL,"¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
	    
		for(int i=0;i<anOutputLines.length;i++) {
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1491" _type="Insert" date="Wed Sep 09 08:27:06 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5857" docExpressionCount="574" docLength="8224" length="3" offset="3049" starttimestamp="1599653169283" timestamp="1257656">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1493" _type="Insert" date="Wed Sep 09 08:27:07 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5860" docExpressionCount="574" docLength="8227" length="3" offset="3052" starttimestamp="1599653169283" timestamp="1257806">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1495" _type="Insert" date="Wed Sep 09 08:27:07 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5863" docExpressionCount="574" docLength="8230" length="3" offset="3055" starttimestamp="1599653169283" timestamp="1257960">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="1497" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:27:07 EDT 2020" starttimestamp="1599653169283" timestamp="1258156" />
  <Command __id="1498" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:27:07 EDT 2020" starttimestamp="1599653169283" timestamp="1258366" />
  <DocumentChange __id="1499" _type="Insert" date="Wed Sep 09 08:27:08 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5864" docExpressionCount="574" docLength="8231" length="1" offset="3052" starttimestamp="1599653169283" timestamp="1259650">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="1500" _type="InsertStringCommand" date="Wed Sep 09 08:27:08 EDT 2020" starttimestamp="1599653169283" timestamp="1259662" timestamp2="1259662">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="1501" _type="Insert" date="Wed Sep 09 08:27:09 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5865" docExpressionCount="574" docLength="8232" length="1" offset="3053" starttimestamp="1599653169283" timestamp="1259798">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1502" _type="InsertStringCommand" date="Wed Sep 09 08:27:09 EDT 2020" starttimestamp="1599653169283" timestamp="1259811" timestamp2="1259811">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1503" _type="Insert" date="Wed Sep 09 08:27:09 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5866" docExpressionCount="574" docLength="8233" length="1" offset="3054" starttimestamp="1599653169283" timestamp="1259882">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1504" _type="InsertStringCommand" date="Wed Sep 09 08:27:09 EDT 2020" starttimestamp="1599653169283" timestamp="1259894" timestamp2="1259894">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1505" _type="Insert" date="Wed Sep 09 08:27:09 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5867" docExpressionCount="574" docLength="8234" length="1" offset="3055" starttimestamp="1599653169283" timestamp="1260066">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1506" _type="InsertStringCommand" date="Wed Sep 09 08:27:09 EDT 2020" starttimestamp="1599653169283" timestamp="1260078" timestamp2="1260078">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1507" _type="Insert" date="Wed Sep 09 08:27:09 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5868" docExpressionCount="574" docLength="8235" length="1" offset="3056" starttimestamp="1599653169283" timestamp="1260227">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1508" _type="InsertStringCommand" date="Wed Sep 09 08:27:09 EDT 2020" starttimestamp="1599653169283" timestamp="1260238" timestamp2="1260238">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1509" _type="Insert" date="Wed Sep 09 08:27:09 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5869" docExpressionCount="574" docLength="8236" length="1" offset="3057" starttimestamp="1599653169283" timestamp="1260408">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1510" _type="InsertStringCommand" date="Wed Sep 09 08:27:09 EDT 2020" starttimestamp="1599653169283" timestamp="1260419" timestamp2="1260419">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="1511" _type="Insert" date="Wed Sep 09 08:27:09 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5870" docExpressionCount="574" docLength="8237" length="1" offset="3058" starttimestamp="1599653169283" timestamp="1260611">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1512" _type="InsertStringCommand" date="Wed Sep 09 08:27:09 EDT 2020" starttimestamp="1599653169283" timestamp="1260622" timestamp2="1260622">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1513" _type="Insert" date="Wed Sep 09 08:27:10 EDT 2020" docASTNodeCount="757" docActiveCodeLength="5871" docExpressionCount="574" docLength="8238" length="1" offset="3059" starttimestamp="1599653169283" timestamp="1260762">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1514" _type="InsertStringCommand" date="Wed Sep 09 08:27:10 EDT 2020" starttimestamp="1599653169283" timestamp="1260775" timestamp2="1260775">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1515" _type="Insert" date="Wed Sep 09 08:27:10 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5872" docExpressionCount="574" docLength="8239" length="1" offset="3060" starttimestamp="1599653169283" timestamp="1260974">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1516" _type="InsertStringCommand" date="Wed Sep 09 08:27:10 EDT 2020" starttimestamp="1599653169283" timestamp="1260986" timestamp2="1260986">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="1517" _type="Insert" date="Wed Sep 09 08:27:24 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5873" docExpressionCount="574" docLength="8240" length="1" offset="3061" starttimestamp="1599653169283" timestamp="1275009">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1518" _type="InsertStringCommand" date="Wed Sep 09 08:27:24 EDT 2020" starttimestamp="1599653169283" timestamp="1275017" timestamp2="1275017">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1519" _type="Insert" date="Wed Sep 09 08:27:27 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5874" docExpressionCount="574" docLength="8241" length="1" offset="3062" starttimestamp="1599653169283" timestamp="1278124">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="1520" _type="InsertStringCommand" date="Wed Sep 09 08:27:27 EDT 2020" starttimestamp="1599653169283" timestamp="1278127" timestamp2="1278127">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="1521" _type="Insert" date="Wed Sep 09 08:27:27 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5875" docExpressionCount="574" docLength="8242" length="1" offset="3063" starttimestamp="1599653169283" timestamp="1278348">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1522" _type="InsertStringCommand" date="Wed Sep 09 08:27:27 EDT 2020" starttimestamp="1599653169283" timestamp="1278351" timestamp2="1278351">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1523" _type="Insert" date="Wed Sep 09 08:27:27 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5876" docExpressionCount="574" docLength="8243" length="1" offset="3064" starttimestamp="1599653169283" timestamp="1278491">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1524" _type="InsertStringCommand" date="Wed Sep 09 08:27:27 EDT 2020" starttimestamp="1599653169283" timestamp="1278495" timestamp2="1278495">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1525" _type="Insert" date="Wed Sep 09 08:27:27 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5877" docExpressionCount="574" docLength="8244" length="1" offset="3065" starttimestamp="1599653169283" timestamp="1278623">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="1526" _type="InsertStringCommand" date="Wed Sep 09 08:27:27 EDT 2020" starttimestamp="1599653169283" timestamp="1278626" timestamp2="1278626">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="1527" _type="Insert" date="Wed Sep 09 08:27:27 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5878" docExpressionCount="574" docLength="8245" length="1" offset="3066" starttimestamp="1599653169283" timestamp="1278715">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1528" _type="InsertStringCommand" date="Wed Sep 09 08:27:28 EDT 2020" starttimestamp="1599653169283" timestamp="1278719" timestamp2="1278719">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1529" _type="Insert" date="Wed Sep 09 08:27:28 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5879" docExpressionCount="574" docLength="8246" length="1" offset="3067" starttimestamp="1599653169283" timestamp="1278853">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1530" _type="InsertStringCommand" date="Wed Sep 09 08:27:28 EDT 2020" starttimestamp="1599653169283" timestamp="1278857" timestamp2="1278857">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="1531" _type="Insert" date="Wed Sep 09 08:27:28 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5880" docExpressionCount="574" docLength="8247" length="1" offset="3068" starttimestamp="1599653169283" timestamp="1278937">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1532" _type="InsertStringCommand" date="Wed Sep 09 08:27:28 EDT 2020" starttimestamp="1599653169283" timestamp="1278941" timestamp2="1278941">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1533" _type="Insert" date="Wed Sep 09 08:27:28 EDT 2020" docASTNodeCount="758" docActiveCodeLength="5881" docExpressionCount="574" docLength="8248" length="1" offset="3069" starttimestamp="1599653169283" timestamp="1279046">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1534" _type="InsertStringCommand" date="Wed Sep 09 08:27:28 EDT 2020" starttimestamp="1599653169283" timestamp="1279050" timestamp2="1279050">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1535" _type="Insert" date="Wed Sep 09 08:27:29 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5882" docExpressionCount="575" docLength="8249" length="1" offset="3070" starttimestamp="1599653169283" timestamp="1280619">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="1536" _type="InsertStringCommand" date="Wed Sep 09 08:27:29 EDT 2020" starttimestamp="1599653169283" timestamp="1280622" timestamp2="1280622">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="1537" _type="Insert" date="Wed Sep 09 08:27:30 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5883" docExpressionCount="575" docLength="8250" length="1" offset="3071" starttimestamp="1599653169283" timestamp="1280782">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1538" _type="InsertStringCommand" date="Wed Sep 09 08:27:30 EDT 2020" starttimestamp="1599653169283" timestamp="1280786" timestamp2="1280786">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1539" _type="Insert" date="Wed Sep 09 08:27:30 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5884" docExpressionCount="575" docLength="8251" length="1" offset="3072" starttimestamp="1599653169283" timestamp="1280920">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1540" _type="InsertStringCommand" date="Wed Sep 09 08:27:30 EDT 2020" starttimestamp="1599653169283" timestamp="1280925" timestamp2="1280925">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1541" _type="Insert" date="Wed Sep 09 08:27:30 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5885" docExpressionCount="575" docLength="8252" length="1" offset="3073" starttimestamp="1599653169283" timestamp="1281337">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1542" _type="InsertStringCommand" date="Wed Sep 09 08:27:30 EDT 2020" starttimestamp="1599653169283" timestamp="1281341" timestamp2="1281341">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1543" _type="Insert" date="Wed Sep 09 08:27:30 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5886" docExpressionCount="575" docLength="8253" length="1" offset="3074" starttimestamp="1599653169283" timestamp="1281557">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="1544" _type="InsertStringCommand" date="Wed Sep 09 08:27:30 EDT 2020" starttimestamp="1599653169283" timestamp="1281561" timestamp2="1281561">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="1545" _type="Insert" date="Wed Sep 09 08:27:30 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5887" docExpressionCount="575" docLength="8254" length="1" offset="3075" starttimestamp="1599653169283" timestamp="1281640">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="1546" _type="InsertStringCommand" date="Wed Sep 09 08:27:30 EDT 2020" starttimestamp="1599653169283" timestamp="1281645" timestamp2="1281645">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="1547" _type="Insert" date="Wed Sep 09 08:27:31 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5888" docExpressionCount="575" docLength="8255" length="1" offset="3076" starttimestamp="1599653169283" timestamp="1282300">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="1548" _type="InsertStringCommand" date="Wed Sep 09 08:27:31 EDT 2020" starttimestamp="1599653169283" timestamp="1282304" timestamp2="1282304">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="1549" _type="Insert" date="Wed Sep 09 08:27:31 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5889" docExpressionCount="575" docLength="8256" length="1" offset="3077" starttimestamp="1599653169283" timestamp="1282489">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1550" _type="InsertStringCommand" date="Wed Sep 09 08:27:31 EDT 2020" starttimestamp="1599653169283" timestamp="1282494" timestamp2="1282494">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1551" _type="Insert" date="Wed Sep 09 08:27:31 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5890" docExpressionCount="575" docLength="8257" length="1" offset="3078" starttimestamp="1599653169283" timestamp="1282696">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="1552" _type="InsertStringCommand" date="Wed Sep 09 08:27:31 EDT 2020" starttimestamp="1599653169283" timestamp="1282700" timestamp2="1282700">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="1553" _type="Insert" date="Wed Sep 09 08:27:32 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5891" docExpressionCount="575" docLength="8258" length="1" offset="3079" starttimestamp="1599653169283" timestamp="1282977">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1554" _type="InsertStringCommand" date="Wed Sep 09 08:27:32 EDT 2020" starttimestamp="1599653169283" timestamp="1282986" timestamp2="1282986">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1555" _type="Insert" date="Wed Sep 09 08:27:32 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5892" docExpressionCount="575" docLength="8259" length="1" offset="3080" starttimestamp="1599653169283" timestamp="1283130">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1556" _type="InsertStringCommand" date="Wed Sep 09 08:27:32 EDT 2020" starttimestamp="1599653169283" timestamp="1283134" timestamp2="1283134">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1557" _type="Insert" date="Wed Sep 09 08:27:32 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5893" docExpressionCount="575" docLength="8260" length="1" offset="3081" starttimestamp="1599653169283" timestamp="1283309">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1558" _type="InsertStringCommand" date="Wed Sep 09 08:27:32 EDT 2020" starttimestamp="1599653169283" timestamp="1283313" timestamp2="1283313">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1559" _type="Insert" date="Wed Sep 09 08:27:32 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5894" docExpressionCount="575" docLength="8261" length="1" offset="3082" starttimestamp="1599653169283" timestamp="1283518">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1560" _type="InsertStringCommand" date="Wed Sep 09 08:27:32 EDT 2020" starttimestamp="1599653169283" timestamp="1283522" timestamp2="1283522">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1561" _type="Insert" date="Wed Sep 09 08:27:32 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5895" docExpressionCount="575" docLength="8262" length="1" offset="3083" starttimestamp="1599653169283" timestamp="1283689">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1562" _type="InsertStringCommand" date="Wed Sep 09 08:27:32 EDT 2020" starttimestamp="1599653169283" timestamp="1283699" timestamp2="1283699">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1564" _type="InsertStringCommand" date="Wed Sep 09 08:27:34 EDT 2020" starttimestamp="1599653169283" timestamp="1285589" timestamp2="1285589">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1565" _type="MoveCaretCommand" caretOffset="531" date="Wed Sep 09 08:27:37 EDT 2020" docOffset="2884" starttimestamp="1599653169283" timestamp="1288519" />
  <Command __id="1567" _type="SelectTextCommand" caretOffset="174" date="Wed Sep 09 08:27:38 EDT 2020" end="174" start="139" starttimestamp="1599653169283" timestamp="1288939" />
  <Command __id="1568" _type="SelectTextCommand" caretOffset="2388" date="Wed Sep 09 08:28:20 EDT 2020" end="2388" start="872" starttimestamp="1599653169283" timestamp="1331109" />
  <Command __id="1569" _type="SelectTextCommand" caretOffset="2388" date="Wed Sep 09 08:28:20 EDT 2020" end="2388" start="872" starttimestamp="1599653169283" timestamp="1331399" />
  <Command __id="1570" _type="CopyCommand" date="Wed Sep 09 08:28:22 EDT 2020" starttimestamp="1599653169283" timestamp="1333589" />
  <Command __id="1572" _type="MoveCaretCommand" caretOffset="531" date="Wed Sep 09 08:28:23 EDT 2020" docOffset="2884" starttimestamp="1599653169283" timestamp="1334419" />
  <Command __id="1573" _type="MoveCaretCommand" caretOffset="732" date="Wed Sep 09 08:28:25 EDT 2020" docOffset="3085" starttimestamp="1599653169283" timestamp="1336489" />
  <Command __id="1574" _type="MoveCaretCommand" caretOffset="736" date="Wed Sep 09 08:28:26 EDT 2020" docOffset="3089" starttimestamp="1599653169283" timestamp="1337039" />
  <Command __id="1576" _type="PasteCommand" date="Wed Sep 09 08:28:26 EDT 2020" starttimestamp="1599653169283" timestamp="1337689" />
  <DocumentChange __id="1563" _type="Insert" date="Wed Sep 09 08:27:34 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5897" docExpressionCount="575" docLength="8264" length="2" offset="3084" starttimestamp="1599653169283" timestamp="1285580">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="1566" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:27:38 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1288829">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1571" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:28:23 EDT 2020" docASTNodeCount="762" docActiveCodeLength="5897" docExpressionCount="575" docLength="8264" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1334349">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶"), Diff(INSERT,"	protected boolean verifyInferred()¶	¶	¶"), Diff(EQUAL,"	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶	    ¶		for(int i=0;i<anOutputLines.length;i++) {¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred()
	
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
	    
		for(int i=0;i<anOutputLines.length;i++) {
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1575" _type="Replace" date="Wed Sep 09 08:28:26 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6912" docExpressionCount="664" docLength="9780" endLine="69" insertionLength="1517" int_docASTNodeCount="762" int_docActiveCodeLength="5896" int_docExpressionCount="575" int_docLength="8263" length="1" offset="3088" startLine="69" starttimestamp="1599653169283" timestamp="1337629">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1578" _type="Delete" date="Wed Sep 09 08:28:33 EDT 2020" docASTNodeCount="878" docActiveCodeLength="6804" docExpressionCount="656" docLength="9672" endLine="69" length="108" offset="3086" startLine="68" starttimestamp="1599653169283" timestamp="1344609">
    <text><![CDATA[
	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable ]]></text>
  </DocumentChange>
  <DocumentChange __id="1580" _type="Insert" date="Wed Sep 09 08:28:35 EDT 2020" docASTNodeCount="878" docActiveCodeLength="6805" docExpressionCount="656" docLength="9673" length="1" offset="3086" starttimestamp="1599653169283" timestamp="1345839">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1577" _type="SelectTextCommand" caretOffset="841" date="Wed Sep 09 08:28:33 EDT 2020" end="841" start="733" starttimestamp="1599653169283" timestamp="1343920" />
  <Command __id="1579" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:28:33 EDT 2020" starttimestamp="1599653169283" timestamp="1344629" />
  <Command __id="1581" _type="InsertStringCommand" date="Wed Sep 09 08:28:35 EDT 2020" starttimestamp="1599653169283" timestamp="1345859" timestamp2="1345859">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1583" _type="SelectTextCommand" caretOffset="2388" date="Wed Sep 09 08:28:37 EDT 2020" end="2388" start="872" starttimestamp="1599653169283" timestamp="1348489" />
  <Command __id="1584" _type="MoveCaretCommand" caretOffset="1109" date="Wed Sep 09 08:28:39 EDT 2020" docOffset="3462" starttimestamp="1599653169283" timestamp="1349969" />
  <Command __id="1585" _type="SelectTextCommand" caretOffset="958" date="Wed Sep 09 08:28:42 EDT 2020" end="958" start="898" starttimestamp="1599653169283" timestamp="1353360" />
  <Command __id="1586" _type="CopyCommand" date="Wed Sep 09 08:28:43 EDT 2020" starttimestamp="1599653169283" timestamp="1353859" />
  <Command __id="1588" _type="MoveCaretCommand" caretOffset="734" date="Wed Sep 09 08:28:44 EDT 2020" docOffset="3087" starttimestamp="1599653169283" timestamp="1354879" />
  <Command __id="1589" _type="MoveCaretCommand" caretOffset="732" date="Wed Sep 09 08:28:44 EDT 2020" docOffset="3085" starttimestamp="1599653169283" timestamp="1355710" />
  <Command __id="1591" _type="PasteCommand" date="Wed Sep 09 08:28:45 EDT 2020" starttimestamp="1599653169283" timestamp="1356029" />
  <Command __id="1592" _type="MoveCaretCommand" caretOffset="2425" date="Wed Sep 09 08:28:52 EDT 2020" docOffset="4778" starttimestamp="1599653169283" timestamp="1363500" />
  <Command __id="1593" _type="MoveCaretCommand" caretOffset="2375" date="Wed Sep 09 08:28:53 EDT 2020" docOffset="4728" starttimestamp="1599653169283" timestamp="1364029" />
  <Command __id="1594" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:28:54 EDT 2020" starttimestamp="1599653169283" timestamp="1365309" />
  <Command __id="1595" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:28:54 EDT 2020" starttimestamp="1599653169283" timestamp="1365669" />
  <Command __id="1582" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:28:37 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1348419">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1587" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:28:44 EDT 2020" docASTNodeCount="878" docActiveCodeLength="6805" docExpressionCount="656" docLength="9673" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1354799">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred()"), Diff(INSERT," {"), Diff(EQUAL,"¶	"), Diff(INSERT,"	String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}"), Diff(EQUAL,"¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶	    ¶		for(int i=0;i<anOutputLines.length;i++) {¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred() {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
	    
		for(int i=0;i<anOutputLines.length;i++) {
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1590" _type="Insert" date="Wed Sep 09 08:28:45 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6865" docExpressionCount="662" docLength="9733" length="60" offset="3085" starttimestamp="1599653169283" timestamp="1355979">
    <text><![CDATA[String anOutput, Class aStaticClass, Method aVerifyingMethod]]></text>
  </DocumentChange>
  <DocumentChange __id="1598" _type="Insert" date="Wed Sep 09 08:28:58 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6869" docExpressionCount="662" docLength="9737" length="4" offset="4728" starttimestamp="1599653169283" timestamp="1368959">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="1601" _type="Insert" date="Wed Sep 09 08:29:04 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6870" docExpressionCount="663" docLength="9738" length="1" offset="4728" starttimestamp="1599653169283" timestamp="1375710">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1596" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:28:57 EDT 2020" starttimestamp="1599653169283" timestamp="1368529" />
  <Command __id="1597" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:28:58 EDT 2020" starttimestamp="1599653169283" timestamp="1368729" />
  <Command __id="1599" _type="InsertStringCommand" date="Wed Sep 09 08:28:58 EDT 2020" starttimestamp="1599653169283" timestamp="1368979" timestamp2="1368979">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1600" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:28:58 EDT 2020" starttimestamp="1599653169283" timestamp="1369229" />
  <Command __id="1602" _type="InsertStringCommand" date="Wed Sep 09 08:29:05 EDT 2020" starttimestamp="1599653169283" timestamp="1375739" timestamp2="1375739">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1604" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:06 EDT 2020" starttimestamp="1599653169283" timestamp="1376759" />
  <Command __id="1606" _type="InsertStringCommand" date="Wed Sep 09 08:29:06 EDT 2020" starttimestamp="1599653169283" timestamp="1377509" timestamp2="1377509">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1608" _type="InsertStringCommand" date="Wed Sep 09 08:29:06 EDT 2020" starttimestamp="1599653169283" timestamp="1377689" timestamp2="1377689">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1610" _type="InsertStringCommand" date="Wed Sep 09 08:29:07 EDT 2020" starttimestamp="1599653169283" timestamp="1377819" timestamp2="1377819">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1612" _type="InsertStringCommand" date="Wed Sep 09 08:29:07 EDT 2020" starttimestamp="1599653169283" timestamp="1377889" timestamp2="1377889">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1614" _type="InsertStringCommand" date="Wed Sep 09 08:29:07 EDT 2020" starttimestamp="1599653169283" timestamp="1378029" timestamp2="1378029">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1616" _type="InsertStringCommand" date="Wed Sep 09 08:29:07 EDT 2020" starttimestamp="1599653169283" timestamp="1378119" timestamp2="1378119">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1618" _type="InsertStringCommand" date="Wed Sep 09 08:29:08 EDT 2020" starttimestamp="1599653169283" timestamp="1379109" timestamp2="1379109">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:08 EDT 2020" starttimestamp="1599653169283" timestamp="1379589" />
  <Command __id="1622" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1379769" />
  <Command __id="1624" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1379899" />
  <Command __id="1626" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1380079" />
  <Command __id="1628" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1380169" />
  <Command __id="1630" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1380299" />
  <Command __id="1632" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1380439" />
  <Command __id="1634" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:09 EDT 2020" starttimestamp="1599653169283" timestamp="1380599" />
  <Command __id="1636" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:10 EDT 2020" starttimestamp="1599653169283" timestamp="1380799" />
  <Command __id="1638" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:10 EDT 2020" starttimestamp="1599653169283" timestamp="1380979" />
  <Command __id="1640" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:10 EDT 2020" starttimestamp="1599653169283" timestamp="1381159" />
  <DocumentChange __id="1603" _type="Delete" date="Wed Sep 09 08:29:06 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6869" docExpressionCount="662" docLength="9737" endLine="99" length="1" offset="4728" startLine="99" starttimestamp="1599653169283" timestamp="1376759">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1605" _type="Insert" date="Wed Sep 09 08:29:06 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6870" docExpressionCount="663" docLength="9738" length="1" offset="4728" starttimestamp="1599653169283" timestamp="1377500">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="1607" _type="Insert" date="Wed Sep 09 08:29:06 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6871" docExpressionCount="663" docLength="9739" length="1" offset="4729" starttimestamp="1599653169283" timestamp="1377679">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1609" _type="Insert" date="Wed Sep 09 08:29:07 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6872" docExpressionCount="663" docLength="9740" length="1" offset="4730" starttimestamp="1599653169283" timestamp="1377810">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1611" _type="Insert" date="Wed Sep 09 08:29:07 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6873" docExpressionCount="663" docLength="9741" length="1" offset="4731" starttimestamp="1599653169283" timestamp="1377880">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1613" _type="Insert" date="Wed Sep 09 08:29:07 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6874" docExpressionCount="663" docLength="9742" length="1" offset="4732" starttimestamp="1599653169283" timestamp="1378020">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1615" _type="Insert" date="Wed Sep 09 08:29:07 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6875" docExpressionCount="663" docLength="9743" length="1" offset="4733" starttimestamp="1599653169283" timestamp="1378109">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1617" _type="Insert" date="Wed Sep 09 08:29:08 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6876" docExpressionCount="663" docLength="9744" length="1" offset="4734" starttimestamp="1599653169283" timestamp="1379099">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1619" _type="Delete" date="Wed Sep 09 08:29:08 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6875" docExpressionCount="663" docLength="9743" endLine="99" length="1" offset="4734" startLine="99" starttimestamp="1599653169283" timestamp="1379589">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1621" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6874" docExpressionCount="663" docLength="9742" endLine="99" length="1" offset="4733" startLine="99" starttimestamp="1599653169283" timestamp="1379759">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1623" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6873" docExpressionCount="663" docLength="9741" endLine="99" length="1" offset="4732" startLine="99" starttimestamp="1599653169283" timestamp="1379889">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1625" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6872" docExpressionCount="663" docLength="9740" endLine="99" length="1" offset="4731" startLine="99" starttimestamp="1599653169283" timestamp="1380069">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1627" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6871" docExpressionCount="663" docLength="9739" endLine="99" length="1" offset="4730" startLine="99" starttimestamp="1599653169283" timestamp="1380159">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1629" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6870" docExpressionCount="663" docLength="9738" endLine="99" length="1" offset="4729" startLine="99" starttimestamp="1599653169283" timestamp="1380290">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1631" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6869" docExpressionCount="662" docLength="9737" endLine="99" length="1" offset="4728" startLine="99" starttimestamp="1599653169283" timestamp="1380430">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="1633" _type="Delete" date="Wed Sep 09 08:29:09 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6868" docExpressionCount="662" docLength="9736" endLine="99" length="1" offset="4727" startLine="99" starttimestamp="1599653169283" timestamp="1380599">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1635" _type="Delete" date="Wed Sep 09 08:29:10 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6867" docExpressionCount="662" docLength="9735" endLine="99" length="1" offset="4726" startLine="99" starttimestamp="1599653169283" timestamp="1380799">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1637" _type="Delete" date="Wed Sep 09 08:29:10 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6866" docExpressionCount="662" docLength="9734" endLine="99" length="1" offset="4725" startLine="99" starttimestamp="1599653169283" timestamp="1380969">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1639" _type="Delete" date="Wed Sep 09 08:29:10 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6865" docExpressionCount="662" docLength="9733" endLine="99" length="1" offset="4724" startLine="99" starttimestamp="1599653169283" timestamp="1381159">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1641" _type="Delete" date="Wed Sep 09 08:29:10 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6864" docExpressionCount="662" docLength="9732" endLine="99" length="1" offset="4723" startLine="99" starttimestamp="1599653169283" timestamp="1381339">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1643" _type="Delete" date="Wed Sep 09 08:29:10 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6862" docExpressionCount="662" docLength="9730" endLine="99" length="2" offset="4721" startLine="98" starttimestamp="1599653169283" timestamp="1381609">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="1648" _type="Insert" date="Wed Sep 09 08:29:15 EDT 2020" docASTNodeCount="890" docActiveCodeLength="6867" docExpressionCount="662" docLength="9735" length="5" offset="4775" starttimestamp="1599653169283" timestamp="1385799">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="1651" _type="Insert" date="Wed Sep 09 08:29:16 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6868" docExpressionCount="663" docLength="9736" length="1" offset="4775" starttimestamp="1599653169283" timestamp="1387559">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="1653" _type="Insert" date="Wed Sep 09 08:29:16 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6869" docExpressionCount="663" docLength="9737" length="1" offset="4776" starttimestamp="1599653169283" timestamp="1387709">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1655" _type="Insert" date="Wed Sep 09 08:29:17 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6870" docExpressionCount="663" docLength="9738" length="1" offset="4777" starttimestamp="1599653169283" timestamp="1387839">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1657" _type="Insert" date="Wed Sep 09 08:29:17 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6871" docExpressionCount="663" docLength="9739" length="1" offset="4778" starttimestamp="1599653169283" timestamp="1387929">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1659" _type="Insert" date="Wed Sep 09 08:29:17 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6872" docExpressionCount="663" docLength="9740" length="1" offset="4779" starttimestamp="1599653169283" timestamp="1388069">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1661" _type="Insert" date="Wed Sep 09 08:29:17 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6873" docExpressionCount="663" docLength="9741" length="1" offset="4780" starttimestamp="1599653169283" timestamp="1388149">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1663" _type="Insert" date="Wed Sep 09 08:29:18 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6874" docExpressionCount="663" docLength="9742" length="1" offset="4781" starttimestamp="1599653169283" timestamp="1389070">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1665" _type="Insert" date="Wed Sep 09 08:29:18 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6876" docExpressionCount="663" docLength="9744" length="2" offset="4782" starttimestamp="1599653169283" timestamp="1389219">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="1668" _type="Insert" date="Wed Sep 09 08:29:18 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6877" docExpressionCount="663" docLength="9745" length="1" offset="4784" starttimestamp="1599653169283" timestamp="1389640">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1670" _type="Insert" date="Wed Sep 09 08:29:19 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6878" docExpressionCount="664" docLength="9746" length="1" offset="4785" starttimestamp="1599653169283" timestamp="1390009">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1672" _type="Insert" date="Wed Sep 09 08:29:19 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6879" docExpressionCount="664" docLength="9747" length="1" offset="4786" starttimestamp="1599653169283" timestamp="1390129">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1674" _type="Insert" date="Wed Sep 09 08:29:19 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6880" docExpressionCount="664" docLength="9748" length="1" offset="4787" starttimestamp="1599653169283" timestamp="1390380">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1676" _type="Insert" date="Wed Sep 09 08:29:19 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6881" docExpressionCount="664" docLength="9749" length="1" offset="4788" starttimestamp="1599653169283" timestamp="1390539">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1678" _type="Insert" date="Wed Sep 09 08:29:19 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6882" docExpressionCount="664" docLength="9750" length="1" offset="4789" starttimestamp="1599653169283" timestamp="1390689">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1680" _type="Insert" date="Wed Sep 09 08:29:20 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6883" docExpressionCount="664" docLength="9751" length="1" offset="4790" starttimestamp="1599653169283" timestamp="1390839">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1642" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:10 EDT 2020" starttimestamp="1599653169283" timestamp="1381339" />
  <Command __id="1644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:10 EDT 2020" starttimestamp="1599653169283" timestamp="1381629" />
  <Command __id="1645" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:29:11 EDT 2020" starttimestamp="1599653169283" timestamp="1382209" />
  <Command __id="1646" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:29:11 EDT 2020" starttimestamp="1599653169283" timestamp="1382629" />
  <Command __id="1647" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:29:12 EDT 2020" starttimestamp="1599653169283" timestamp="1382879" />
  <Command __id="1649" _type="InsertStringCommand" date="Wed Sep 09 08:29:15 EDT 2020" starttimestamp="1599653169283" timestamp="1385809" timestamp2="1385809">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1650" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:29:15 EDT 2020" starttimestamp="1599653169283" timestamp="1386039" />
  <Command __id="1652" _type="InsertStringCommand" date="Wed Sep 09 08:29:16 EDT 2020" starttimestamp="1599653169283" timestamp="1387559" timestamp2="1387559">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1654" _type="InsertStringCommand" date="Wed Sep 09 08:29:17 EDT 2020" starttimestamp="1599653169283" timestamp="1387719" timestamp2="1387719">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1656" _type="InsertStringCommand" date="Wed Sep 09 08:29:17 EDT 2020" starttimestamp="1599653169283" timestamp="1387849" timestamp2="1387849">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1658" _type="InsertStringCommand" date="Wed Sep 09 08:29:17 EDT 2020" starttimestamp="1599653169283" timestamp="1387939" timestamp2="1387939">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1660" _type="InsertStringCommand" date="Wed Sep 09 08:29:17 EDT 2020" starttimestamp="1599653169283" timestamp="1388079" timestamp2="1388079">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1662" _type="InsertStringCommand" date="Wed Sep 09 08:29:17 EDT 2020" starttimestamp="1599653169283" timestamp="1388149" timestamp2="1388149">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1664" _type="InsertStringCommand" date="Wed Sep 09 08:29:18 EDT 2020" starttimestamp="1599653169283" timestamp="1389079" timestamp2="1389079">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1666" _type="InsertStringCommand" date="Wed Sep 09 08:29:18 EDT 2020" starttimestamp="1599653169283" timestamp="1389229" timestamp2="1389229">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1667" _type="InsertStringCommand" date="Wed Sep 09 08:29:18 EDT 2020" starttimestamp="1599653169283" timestamp="1389269" timestamp2="1389269">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1669" _type="InsertStringCommand" date="Wed Sep 09 08:29:18 EDT 2020" starttimestamp="1599653169283" timestamp="1389659" timestamp2="1389659">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1671" _type="InsertStringCommand" date="Wed Sep 09 08:29:19 EDT 2020" starttimestamp="1599653169283" timestamp="1390019" timestamp2="1390019">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1673" _type="InsertStringCommand" date="Wed Sep 09 08:29:19 EDT 2020" starttimestamp="1599653169283" timestamp="1390129" timestamp2="1390129">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1675" _type="InsertStringCommand" date="Wed Sep 09 08:29:19 EDT 2020" starttimestamp="1599653169283" timestamp="1390389" timestamp2="1390389">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1677" _type="InsertStringCommand" date="Wed Sep 09 08:29:19 EDT 2020" starttimestamp="1599653169283" timestamp="1390549" timestamp2="1390549">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1679" _type="InsertStringCommand" date="Wed Sep 09 08:29:19 EDT 2020" starttimestamp="1599653169283" timestamp="1390699" timestamp2="1390699">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1681" _type="InsertStringCommand" date="Wed Sep 09 08:29:20 EDT 2020" starttimestamp="1599653169283" timestamp="1390839" timestamp2="1390839">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1683" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:25 EDT 2020" starttimestamp="1599653169283" timestamp="1396129" />
  <DocumentChange __id="1682" _type="Delete" date="Wed Sep 09 08:29:25 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6882" docExpressionCount="664" docLength="9750" endLine="101" length="1" offset="4790" startLine="101" starttimestamp="1599653169283" timestamp="1396119">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1684" _type="Delete" date="Wed Sep 09 08:29:25 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6881" docExpressionCount="664" docLength="9749" endLine="101" length="1" offset="4789" startLine="101" starttimestamp="1599653169283" timestamp="1396269">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1686" _type="Delete" date="Wed Sep 09 08:29:25 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6880" docExpressionCount="664" docLength="9748" endLine="101" length="1" offset="4788" startLine="101" starttimestamp="1599653169283" timestamp="1396429">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1688" _type="Delete" date="Wed Sep 09 08:29:25 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6879" docExpressionCount="664" docLength="9747" endLine="101" length="1" offset="4787" startLine="101" starttimestamp="1599653169283" timestamp="1396569">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1690" _type="Delete" date="Wed Sep 09 08:29:26 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6878" docExpressionCount="664" docLength="9746" endLine="101" length="1" offset="4786" startLine="101" starttimestamp="1599653169283" timestamp="1396719">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1692" _type="Delete" date="Wed Sep 09 08:29:26 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6877" docExpressionCount="663" docLength="9745" endLine="101" length="1" offset="4785" startLine="101" starttimestamp="1599653169283" timestamp="1396889">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="1694" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:29:28 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1399649">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1696" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:29:41 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6877" docExpressionCount="663" docLength="9745" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1411959">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred("), Diff(INSERT,"String anOutput, Class aStaticClass, Method aVerifyingMethod"), Diff(EQUAL,") {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶	"), Diff(DELETE,"    "), Diff(INSERT,"	"), Diff(EQUAL,"¶		for(int i=0;i<anOutputLines.length;i++) {¶			"), Diff(INSERT,"String [] ¶			"), Diff(EQUAL,"¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		for(int i=0;i<anOutputLines.length;i++) {
			String [] 
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="1698" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:29:51 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1422579">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1685" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:25 EDT 2020" starttimestamp="1599653169283" timestamp="1396279" />
  <Command __id="1687" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:25 EDT 2020" starttimestamp="1599653169283" timestamp="1396439" />
  <Command __id="1689" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:25 EDT 2020" starttimestamp="1599653169283" timestamp="1396569" />
  <Command __id="1691" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:26 EDT 2020" starttimestamp="1599653169283" timestamp="1396719" />
  <Command __id="1693" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:29:26 EDT 2020" starttimestamp="1599653169283" timestamp="1396899" />
  <Command __id="1695" _type="SelectTextCommand" caretOffset="958" date="Wed Sep 09 08:29:29 EDT 2020" end="958" start="898" starttimestamp="1599653169283" timestamp="1399719" />
  <Command __id="1697" _type="MoveCaretCommand" caretOffset="2432" date="Wed Sep 09 08:29:41 EDT 2020" docOffset="4785" starttimestamp="1599653169283" timestamp="1412039" />
  <Command __id="1699" _type="SelectTextCommand" caretOffset="958" date="Wed Sep 09 08:29:51 EDT 2020" end="958" start="898" starttimestamp="1599653169283" timestamp="1422659" />
  <Command __id="1701" _type="MoveCaretCommand" caretOffset="2432" date="Wed Sep 09 08:29:53 EDT 2020" docOffset="4785" starttimestamp="1599653169283" timestamp="1424179" />
  <Command __id="1703" _type="InsertStringCommand" date="Wed Sep 09 08:29:54 EDT 2020" starttimestamp="1599653169283" timestamp="1425009" timestamp2="1425009">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1705" _type="InsertStringCommand" date="Wed Sep 09 08:29:54 EDT 2020" starttimestamp="1599653169283" timestamp="1425129" timestamp2="1425129">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1707" _type="InsertStringCommand" date="Wed Sep 09 08:29:54 EDT 2020" starttimestamp="1599653169283" timestamp="1425539" timestamp2="1425539">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1709" _type="InsertStringCommand" date="Wed Sep 09 08:29:55 EDT 2020" starttimestamp="1599653169283" timestamp="1425739" timestamp2="1425739">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1711" _type="InsertStringCommand" date="Wed Sep 09 08:29:55 EDT 2020" starttimestamp="1599653169283" timestamp="1425949" timestamp2="1425949">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1713" _type="InsertStringCommand" date="Wed Sep 09 08:29:55 EDT 2020" starttimestamp="1599653169283" timestamp="1426269" timestamp2="1426269">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1715" _type="InsertStringCommand" date="Wed Sep 09 08:29:55 EDT 2020" starttimestamp="1599653169283" timestamp="1426529" timestamp2="1426529">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1717" _type="InsertStringCommand" date="Wed Sep 09 08:29:55 EDT 2020" starttimestamp="1599653169283" timestamp="1426629" timestamp2="1426629">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1719" _type="InsertStringCommand" date="Wed Sep 09 08:29:56 EDT 2020" starttimestamp="1599653169283" timestamp="1426999" timestamp2="1426999">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1721" _type="InsertStringCommand" date="Wed Sep 09 08:29:56 EDT 2020" starttimestamp="1599653169283" timestamp="1427249" timestamp2="1427249">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1723" _type="InsertStringCommand" date="Wed Sep 09 08:29:56 EDT 2020" starttimestamp="1599653169283" timestamp="1427399" timestamp2="1427399">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1725" _type="InsertStringCommand" date="Wed Sep 09 08:29:56 EDT 2020" starttimestamp="1599653169283" timestamp="1427669" timestamp2="1427669">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1727" _type="InsertStringCommand" date="Wed Sep 09 08:29:57 EDT 2020" starttimestamp="1599653169283" timestamp="1428099" timestamp2="1428099">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1729" _type="InsertStringCommand" date="Wed Sep 09 08:29:57 EDT 2020" starttimestamp="1599653169283" timestamp="1428509" timestamp2="1428509">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1731" _type="InsertStringCommand" date="Wed Sep 09 08:29:57 EDT 2020" starttimestamp="1599653169283" timestamp="1428629" timestamp2="1428629">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1700" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:29:53 EDT 2020" docASTNodeCount="892" docActiveCodeLength="6877" docExpressionCount="663" docLength="9745" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1424099">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		for(int i=0;i<anOutputLines.length;i++) {¶			String [] ¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1702" _type="Insert" date="Wed Sep 09 08:29:54 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6878" docExpressionCount="664" docLength="9746" length="1" offset="4785" starttimestamp="1599653169283" timestamp="1424999">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1704" _type="Insert" date="Wed Sep 09 08:29:54 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6879" docExpressionCount="664" docLength="9747" length="1" offset="4786" starttimestamp="1599653169283" timestamp="1425119">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1706" _type="Insert" date="Wed Sep 09 08:29:54 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6880" docExpressionCount="664" docLength="9748" length="1" offset="4787" starttimestamp="1599653169283" timestamp="1425529">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="1708" _type="Insert" date="Wed Sep 09 08:29:55 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6881" docExpressionCount="664" docLength="9749" length="1" offset="4788" starttimestamp="1599653169283" timestamp="1425729">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1710" _type="Insert" date="Wed Sep 09 08:29:55 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6882" docExpressionCount="664" docLength="9750" length="1" offset="4789" starttimestamp="1599653169283" timestamp="1425939">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1712" _type="Insert" date="Wed Sep 09 08:29:55 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6883" docExpressionCount="664" docLength="9751" length="1" offset="4790" starttimestamp="1599653169283" timestamp="1426259">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1714" _type="Insert" date="Wed Sep 09 08:29:55 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6884" docExpressionCount="664" docLength="9752" length="1" offset="4791" starttimestamp="1599653169283" timestamp="1426509">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1716" _type="Insert" date="Wed Sep 09 08:29:55 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6885" docExpressionCount="664" docLength="9753" length="1" offset="4792" starttimestamp="1599653169283" timestamp="1426619">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1718" _type="Insert" date="Wed Sep 09 08:29:56 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6886" docExpressionCount="664" docLength="9754" length="1" offset="4793" starttimestamp="1599653169283" timestamp="1426989">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <DocumentChange __id="1720" _type="Insert" date="Wed Sep 09 08:29:56 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6887" docExpressionCount="664" docLength="9755" length="1" offset="4794" starttimestamp="1599653169283" timestamp="1427230">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1722" _type="Insert" date="Wed Sep 09 08:29:56 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6888" docExpressionCount="664" docLength="9756" length="1" offset="4795" starttimestamp="1599653169283" timestamp="1427389">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="1724" _type="Insert" date="Wed Sep 09 08:29:56 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6889" docExpressionCount="664" docLength="9757" length="1" offset="4796" starttimestamp="1599653169283" timestamp="1427659">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1726" _type="Insert" date="Wed Sep 09 08:29:57 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6890" docExpressionCount="664" docLength="9758" length="1" offset="4797" starttimestamp="1599653169283" timestamp="1428089">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1728" _type="Insert" date="Wed Sep 09 08:29:57 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6891" docExpressionCount="664" docLength="9759" length="1" offset="4798" starttimestamp="1599653169283" timestamp="1428499">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1730" _type="Insert" date="Wed Sep 09 08:29:57 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6892" docExpressionCount="664" docLength="9760" length="1" offset="4799" starttimestamp="1599653169283" timestamp="1428620">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1732" _type="Insert" date="Wed Sep 09 08:29:57 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6893" docExpressionCount="664" docLength="9761" length="1" offset="4800" starttimestamp="1599653169283" timestamp="1428689">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1734" _type="Insert" date="Wed Sep 09 08:29:58 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6894" docExpressionCount="664" docLength="9762" length="1" offset="4801" starttimestamp="1599653169283" timestamp="1429189">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1736" _type="Insert" date="Wed Sep 09 08:29:58 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6895" docExpressionCount="664" docLength="9763" length="1" offset="4802" starttimestamp="1599653169283" timestamp="1429349">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="1733" _type="InsertStringCommand" date="Wed Sep 09 08:29:57 EDT 2020" starttimestamp="1599653169283" timestamp="1428699" timestamp2="1428699">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1735" _type="InsertStringCommand" date="Wed Sep 09 08:29:58 EDT 2020" starttimestamp="1599653169283" timestamp="1429199" timestamp2="1429199">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1737" _type="InsertStringCommand" date="Wed Sep 09 08:29:58 EDT 2020" starttimestamp="1599653169283" timestamp="1429359" timestamp2="1429359">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1739" _type="InsertStringCommand" date="Wed Sep 09 08:30:00 EDT 2020" starttimestamp="1599653169283" timestamp="1431419" timestamp2="1431419">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="1738" _type="Insert" date="Wed Sep 09 08:30:00 EDT 2020" docASTNodeCount="896" docActiveCodeLength="6896" docExpressionCount="664" docLength="9764" length="1" offset="4803" starttimestamp="1599653169283" timestamp="1431409">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="1746" _type="Insert" date="Wed Sep 09 08:30:06 EDT 2020" docASTNodeCount="897" docActiveCodeLength="6909" docExpressionCount="665" docLength="9777" length="13" offset="4804" starttimestamp="1599653169283" timestamp="1437319">
    <text><![CDATA[anOutputLines]]></text>
  </DocumentChange>
  <DocumentChange __id="1748" _type="Insert" date="Wed Sep 09 08:30:07 EDT 2020" docASTNodeCount="897" docActiveCodeLength="6910" docExpressionCount="665" docLength="9778" length="1" offset="4817" starttimestamp="1599653169283" timestamp="1438029">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1751" _type="Insert" date="Wed Sep 09 08:30:07 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6911" docExpressionCount="667" docLength="9779" length="1" offset="4818" starttimestamp="1599653169283" timestamp="1438310">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1752" _type="Insert" date="Wed Sep 09 08:30:07 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6912" docExpressionCount="667" docLength="9780" length="1" offset="4819" starttimestamp="1599653169283" timestamp="1438409">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1754" _type="Insert" date="Wed Sep 09 08:30:07 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6913" docExpressionCount="667" docLength="9781" length="1" offset="4820" starttimestamp="1599653169283" timestamp="1438529">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1756" _type="Delete" date="Wed Sep 09 08:30:08 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6912" docExpressionCount="667" docLength="9780" endLine="101" length="1" offset="4820" startLine="101" starttimestamp="1599653169283" timestamp="1438989">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1758" _type="Delete" date="Wed Sep 09 08:30:08 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6911" docExpressionCount="667" docLength="9779" endLine="101" length="1" offset="4819" startLine="101" starttimestamp="1599653169283" timestamp="1439129">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1760" _type="Delete" date="Wed Sep 09 08:30:08 EDT 2020" docASTNodeCount="897" docActiveCodeLength="6910" docExpressionCount="665" docLength="9778" endLine="101" length="1" offset="4818" startLine="101" starttimestamp="1599653169283" timestamp="1439260">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1762" _type="Delete" date="Wed Sep 09 08:30:08 EDT 2020" docASTNodeCount="897" docActiveCodeLength="6909" docExpressionCount="665" docLength="9777" endLine="101" length="1" offset="4817" startLine="101" starttimestamp="1599653169283" timestamp="1439409">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1740" _type="MoveCaretCommand" caretOffset="2208" date="Wed Sep 09 08:30:04 EDT 2020" docOffset="4561" starttimestamp="1599653169283" timestamp="1434870" />
  <Command __id="1741" _type="SelectTextCommand" caretOffset="2220" date="Wed Sep 09 08:30:04 EDT 2020" end="2220" start="2208" starttimestamp="1599653169283" timestamp="1434999" />
  <Command __id="1742" _type="MoveCaretCommand" caretOffset="2257" date="Wed Sep 09 08:30:04 EDT 2020" docOffset="4610" starttimestamp="1599653169283" timestamp="1435469" />
  <Command __id="1743" _type="SelectTextCommand" caretOffset="2265" date="Wed Sep 09 08:30:04 EDT 2020" end="2265" start="2252" starttimestamp="1599653169283" timestamp="1435630" />
  <Command __id="1744" _type="CopyCommand" date="Wed Sep 09 08:30:05 EDT 2020" starttimestamp="1599653169283" timestamp="1436219" />
  <Command __id="1745" _type="MoveCaretCommand" caretOffset="2451" date="Wed Sep 09 08:30:06 EDT 2020" docOffset="4804" starttimestamp="1599653169283" timestamp="1436849" />
  <Command __id="1747" _type="PasteCommand" date="Wed Sep 09 08:30:06 EDT 2020" starttimestamp="1599653169283" timestamp="1437329" />
  <Command __id="1749" _type="InsertStringCommand" date="Wed Sep 09 08:30:07 EDT 2020" starttimestamp="1599653169283" timestamp="1438029" timestamp2="1438029">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1750" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:30:07 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1438069" />
  <Command __id="1753" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:30:07 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1438419" />
  <Command __id="1755" _type="InsertStringCommand" date="Wed Sep 09 08:30:07 EDT 2020" starttimestamp="1599653169283" timestamp="1438539" timestamp2="1438539">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1757" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:30:08 EDT 2020" starttimestamp="1599653169283" timestamp="1438999" />
  <Command __id="1759" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:30:08 EDT 2020" starttimestamp="1599653169283" timestamp="1439139" />
  <Command __id="1761" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:30:08 EDT 2020" starttimestamp="1599653169283" timestamp="1439260" />
  <Command __id="1763" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:30:08 EDT 2020" starttimestamp="1599653169283" timestamp="1439419" />
  <Command __id="1765" _type="InsertStringCommand" date="Wed Sep 09 08:30:10 EDT 2020" starttimestamp="1599653169283" timestamp="1441109" timestamp2="1441109">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1767" _type="InsertStringCommand" date="Wed Sep 09 08:30:10 EDT 2020" starttimestamp="1599653169283" timestamp="1441239" timestamp2="1441239">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1768" _type="InsertStringCommand" date="Wed Sep 09 08:30:10 EDT 2020" starttimestamp="1599653169283" timestamp="1441299" timestamp2="1441299">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1770" _type="InsertStringCommand" date="Wed Sep 09 08:30:11 EDT 2020" starttimestamp="1599653169283" timestamp="1441889" timestamp2="1441889">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1771" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:30:11 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1441899" />
  <Command __id="1774" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:30:12 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1442990" />
  <Command __id="1776" _type="InsertStringCommand" date="Wed Sep 09 08:30:12 EDT 2020" starttimestamp="1599653169283" timestamp="1443099" timestamp2="1443099">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1778" _type="InsertStringCommand" date="Wed Sep 09 08:30:13 EDT 2020" starttimestamp="1599653169283" timestamp="1443969" timestamp2="1443969">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="1780" _type="InsertStringCommand" date="Wed Sep 09 08:30:13 EDT 2020" starttimestamp="1599653169283" timestamp="1444379" timestamp2="1444379">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1782" _type="InsertStringCommand" date="Wed Sep 09 08:30:13 EDT 2020" starttimestamp="1599653169283" timestamp="1444709" timestamp2="1444709">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="1764" _type="Insert" date="Wed Sep 09 08:30:10 EDT 2020" docASTNodeCount="900" docActiveCodeLength="6911" docExpressionCount="666" docLength="9779" length="2" offset="4817" starttimestamp="1599653169283" timestamp="1441109">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="1766" _type="Insert" date="Wed Sep 09 08:30:10 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6912" docExpressionCount="667" docLength="9780" length="1" offset="4818" starttimestamp="1599653169283" timestamp="1441219">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1769" _type="Insert" date="Wed Sep 09 08:30:11 EDT 2020" docASTNodeCount="899" docActiveCodeLength="6913" docExpressionCount="667" docLength="9781" length="1" offset="4820" starttimestamp="1599653169283" timestamp="1441879">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1772" _type="Insert" date="Wed Sep 09 08:30:11 EDT 2020" docASTNodeCount="901" docActiveCodeLength="6914" docExpressionCount="669" docLength="9782" length="1" offset="4821" starttimestamp="1599653169283" timestamp="1442400">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1773" _type="Insert" date="Wed Sep 09 08:30:11 EDT 2020" docASTNodeCount="901" docActiveCodeLength="6915" docExpressionCount="669" docLength="9783" length="1" offset="4822" starttimestamp="1599653169283" timestamp="1442529">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1775" _type="Replace" date="Wed Sep 09 08:30:12 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6924" docExpressionCount="670" docLength="9792" endLine="101" insertionLength="11" int_docASTNodeCount="899" int_docActiveCodeLength="6913" int_docExpressionCount="667" int_docLength="9781" length="2" offset="4821" startLine="101" starttimestamp="1599653169283" timestamp="1443009">
    <deletedText><![CDATA[pl]]></deletedText>
    <insertedText><![CDATA[split(arg0)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1777" _type="Replace" date="Wed Sep 09 08:30:13 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6921" docExpressionCount="651" docLength="9789" endLine="101" insertionLength="1" int_docASTNodeCount="901" int_docActiveCodeLength="6920" int_docExpressionCount="669" int_docLength="9788" length="4" offset="4827" startLine="101" starttimestamp="1599653169283" timestamp="1443959">
    <deletedText><![CDATA[arg0]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1779" _type="Insert" date="Wed Sep 09 08:30:13 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6922" docExpressionCount="651" docLength="9790" length="1" offset="4828" starttimestamp="1599653169283" timestamp="1444369">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="1781" _type="Insert" date="Wed Sep 09 08:30:13 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6923" docExpressionCount="670" docLength="9791" length="1" offset="4829" starttimestamp="1599653169283" timestamp="1444699">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="1785" _type="Insert" date="Wed Sep 09 08:30:16 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6924" docExpressionCount="670" docLength="9792" length="1" offset="4831" starttimestamp="1599653169283" timestamp="1447069">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1787" _type="Insert" date="Wed Sep 09 08:30:17 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6929" docExpressionCount="670" docLength="9797" length="5" offset="4832" starttimestamp="1599653169283" timestamp="1448169">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="1789" _type="Insert" date="Wed Sep 09 08:30:25 EDT 2020" docASTNodeCount="904" docActiveCodeLength="6930" docExpressionCount="671" docLength="9798" length="1" offset="4837" starttimestamp="1599653169283" timestamp="1455849">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1791" _type="Insert" date="Wed Sep 09 08:30:25 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6931" docExpressionCount="670" docLength="9799" length="1" offset="4838" starttimestamp="1599653169283" timestamp="1455969">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1793" _type="Insert" date="Wed Sep 09 08:30:28 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6933" docExpressionCount="670" docLength="9801" length="2" offset="4839" starttimestamp="1599653169283" timestamp="1458849">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="1795" _type="Insert" date="Wed Sep 09 08:30:32 EDT 2020" docASTNodeCount="905" docActiveCodeLength="6934" docExpressionCount="671" docLength="9802" length="1" offset="4840" starttimestamp="1599653169283" timestamp="1462839">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1797" _type="Insert" date="Wed Sep 09 08:30:32 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6935" docExpressionCount="670" docLength="9803" length="1" offset="4841" starttimestamp="1599653169283" timestamp="1463119">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="1799" _type="Insert" date="Wed Sep 09 08:30:32 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6936" docExpressionCount="670" docLength="9804" length="1" offset="4842" starttimestamp="1599653169283" timestamp="1463229">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="1783" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:30:15 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1446330" />
  <Command __id="1784" _type="MoveCaretCommand" caretOffset="2478" date="Wed Sep 09 08:30:15 EDT 2020" docOffset="4831" starttimestamp="1599653169283" timestamp="1446430" />
  <Command __id="1786" _type="InsertStringCommand" date="Wed Sep 09 08:30:16 EDT 2020" starttimestamp="1599653169283" timestamp="1447089" timestamp2="1447089">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1788" _type="InsertStringCommand" date="Wed Sep 09 08:30:17 EDT 2020" starttimestamp="1599653169283" timestamp="1448199" timestamp2="1448199">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1790" _type="InsertStringCommand" date="Wed Sep 09 08:30:25 EDT 2020" starttimestamp="1599653169283" timestamp="1455859" timestamp2="1455859">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1792" _type="InsertStringCommand" date="Wed Sep 09 08:30:25 EDT 2020" starttimestamp="1599653169283" timestamp="1455979" timestamp2="1455979">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1794" _type="InsertStringCommand" date="Wed Sep 09 08:30:28 EDT 2020" starttimestamp="1599653169283" timestamp="1458849" timestamp2="1458849">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1796" _type="InsertStringCommand" date="Wed Sep 09 08:30:32 EDT 2020" starttimestamp="1599653169283" timestamp="1462849" timestamp2="1462849">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1798" _type="InsertStringCommand" date="Wed Sep 09 08:30:32 EDT 2020" starttimestamp="1599653169283" timestamp="1463119" timestamp2="1463119">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1800" _type="InsertStringCommand" date="Wed Sep 09 08:30:32 EDT 2020" starttimestamp="1599653169283" timestamp="1463239" timestamp2="1463239">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1802" _type="InsertStringCommand" date="Wed Sep 09 08:30:34 EDT 2020" starttimestamp="1599653169283" timestamp="1464909" timestamp2="1464909">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1803" _type="InsertStringCommand" date="Wed Sep 09 08:30:34 EDT 2020" starttimestamp="1599653169283" timestamp="1465380" timestamp2="1465380">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1805" _type="InsertStringCommand" date="Wed Sep 09 08:30:34 EDT 2020" starttimestamp="1599653169283" timestamp="1465639" timestamp2="1465639">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1807" _type="InsertStringCommand" date="Wed Sep 09 08:30:35 EDT 2020" starttimestamp="1599653169283" timestamp="1465949" timestamp2="1465949">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1801" _type="Insert" date="Wed Sep 09 08:30:34 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6937" docExpressionCount="673" docLength="9805" length="1" offset="4843" starttimestamp="1599653169283" timestamp="1464909">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1804" _type="Insert" date="Wed Sep 09 08:30:34 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6939" docExpressionCount="673" docLength="9807" length="2" offset="4845" starttimestamp="1599653169283" timestamp="1465639">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="1806" _type="Insert" date="Wed Sep 09 08:30:35 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6951" docExpressionCount="673" docLength="9819" length="12" offset="4847" starttimestamp="1599653169283" timestamp="1465939">
    <text><![CDATA[
				
			}]]></text>
  </DocumentChange>
  <Command __id="1808" _type="SelectTextCommand" caretOffset="2506" date="Wed Sep 09 08:30:42 EDT 2020" end="2506" start="2484" starttimestamp="1599653169283" timestamp="1472869" />
  <DocumentChange __id="1809" _type="Delete" date="Wed Sep 09 08:30:43 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6929" docExpressionCount="670" docLength="9797" endLine="104" length="22" offset="4837" startLine="102" starttimestamp="1599653169283" timestamp="1474439">
    <text><![CDATA[if(i==0) {
				
			}]]></text>
  </DocumentChange>
  <Command __id="1810" _type="CutCommand" date="Wed Sep 09 08:30:43 EDT 2020" starttimestamp="1599653169283" timestamp="1474459" />
  <Command __id="1811" _type="MoveCaretCommand" caretOffset="2417" date="Wed Sep 09 08:30:43 EDT 2020" docOffset="4770" starttimestamp="1599653169283" timestamp="1474689" />
  <DocumentChange __id="1812" _type="Insert" date="Wed Sep 09 08:30:44 EDT 2020" docASTNodeCount="902" docActiveCodeLength="6934" docExpressionCount="670" docLength="9802" length="5" offset="4770" starttimestamp="1599653169283" timestamp="1475639">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="1813" _type="InsertStringCommand" date="Wed Sep 09 08:30:44 EDT 2020" starttimestamp="1599653169283" timestamp="1475669" timestamp2="1475669">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1815" _type="PasteCommand" date="Wed Sep 09 08:30:45 EDT 2020" starttimestamp="1599653169283" timestamp="1475889" />
  <Command __id="1816" _type="MoveCaretCommand" caretOffset="2419" date="Wed Sep 09 08:30:47 EDT 2020" docOffset="4772" starttimestamp="1599653169283" timestamp="1477979" />
  <Command __id="1818" _type="InsertStringCommand" date="Wed Sep 09 08:30:47 EDT 2020" starttimestamp="1599653169283" timestamp="1478199" timestamp2="1478199">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1819" _type="MoveCaretCommand" caretOffset="2438" date="Wed Sep 09 08:30:48 EDT 2020" docOffset="4791" starttimestamp="1599653169283" timestamp="1479399" />
  <DocumentChange __id="1814" _type="Replace" date="Wed Sep 09 08:30:45 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6953" docExpressionCount="673" docLength="9821" endLine="101" insertionLength="22" int_docASTNodeCount="902" int_docActiveCodeLength="6931" int_docExpressionCount="670" int_docLength="9799" length="3" offset="4772" startLine="101" starttimestamp="1599653169283" timestamp="1475859">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[if(i==0) {
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1817" _type="Insert" date="Wed Sep 09 08:30:47 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6956" docExpressionCount="673" docLength="9824" length="3" offset="4772" starttimestamp="1599653169283" timestamp="1478199">
    <text><![CDATA[			]]></text>
  </DocumentChange>
  <DocumentChange __id="1824" _type="Replace" date="Wed Sep 09 08:30:51 EDT 2020" docASTNodeCount="909" docActiveCodeLength="6969" docExpressionCount="674" docLength="9837" endLine="102" insertionLength="17" int_docASTNodeCount="907" int_docActiveCodeLength="6952" int_docExpressionCount="673" int_docLength="9820" length="4" offset="4787" startLine="102" starttimestamp="1599653169283" timestamp="1482009">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				anOutputLines]]></insertedText>
  </DocumentChange>
  <Command __id="1820" _type="MoveCaretCommand" caretOffset="2257" date="Wed Sep 09 08:30:49 EDT 2020" docOffset="4610" starttimestamp="1599653169283" timestamp="1480439" />
  <Command __id="1821" _type="SelectTextCommand" caretOffset="2265" date="Wed Sep 09 08:30:49 EDT 2020" end="2265" start="2252" starttimestamp="1599653169283" timestamp="1480569" />
  <Command __id="1822" _type="CopyCommand" date="Wed Sep 09 08:30:50 EDT 2020" starttimestamp="1599653169283" timestamp="1481229" />
  <Command __id="1823" _type="MoveCaretCommand" caretOffset="2438" date="Wed Sep 09 08:30:51 EDT 2020" docOffset="4791" starttimestamp="1599653169283" timestamp="1481790" />
  <Command __id="1825" _type="PasteCommand" date="Wed Sep 09 08:30:51 EDT 2020" starttimestamp="1599653169283" timestamp="1482009" />
  <Command __id="1827" _type="InsertStringCommand" date="Wed Sep 09 08:30:52 EDT 2020" starttimestamp="1599653169283" timestamp="1483029" timestamp2="1483029">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1829" _type="InsertStringCommand" date="Wed Sep 09 08:30:52 EDT 2020" starttimestamp="1599653169283" timestamp="1483199" timestamp2="1483199">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1830" _type="InsertStringCommand" date="Wed Sep 09 08:30:52 EDT 2020" starttimestamp="1599653169283" timestamp="1483269" timestamp2="1483269">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1831" _type="MoveCaretCommand" caretOffset="2438" date="Wed Sep 09 08:30:59 EDT 2020" docOffset="4791" starttimestamp="1599653169283" timestamp="1490409" />
  <Command __id="1833" _type="InsertStringCommand" date="Wed Sep 09 08:31:00 EDT 2020" starttimestamp="1599653169283" timestamp="1491209" timestamp2="1491209">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1835" _type="InsertStringCommand" date="Wed Sep 09 08:31:00 EDT 2020" starttimestamp="1599653169283" timestamp="1491319" timestamp2="1491319">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1837" _type="InsertStringCommand" date="Wed Sep 09 08:31:00 EDT 2020" starttimestamp="1599653169283" timestamp="1491689" timestamp2="1491689">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="1826" _type="Insert" date="Wed Sep 09 08:30:52 EDT 2020" docASTNodeCount="909" docActiveCodeLength="6971" docExpressionCount="674" docLength="9839" length="2" offset="4804" starttimestamp="1599653169283" timestamp="1483029">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="1828" _type="Insert" date="Wed Sep 09 08:30:52 EDT 2020" docASTNodeCount="913" docActiveCodeLength="6972" docExpressionCount="678" docLength="9840" length="1" offset="4805" starttimestamp="1599653169283" timestamp="1483199">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1832" _type="Insert" date="Wed Sep 09 08:31:00 EDT 2020" docASTNodeCount="913" docActiveCodeLength="6973" docExpressionCount="678" docLength="9841" length="1" offset="4791" starttimestamp="1599653169283" timestamp="1491199">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1834" _type="Insert" date="Wed Sep 09 08:31:00 EDT 2020" docASTNodeCount="913" docActiveCodeLength="6974" docExpressionCount="678" docLength="9842" length="1" offset="4792" starttimestamp="1599653169283" timestamp="1491309">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="1836" _type="Insert" date="Wed Sep 09 08:31:00 EDT 2020" docASTNodeCount="912" docActiveCodeLength="6975" docExpressionCount="676" docLength="9843" length="1" offset="4793" starttimestamp="1599653169283" timestamp="1491679">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <Command __id="1838" _type="MoveCaretCommand" caretOffset="2457" date="Wed Sep 09 08:31:02 EDT 2020" docOffset="4810" starttimestamp="1599653169283" timestamp="1493039" />
  <DocumentChange __id="1839" _type="Insert" date="Wed Sep 09 08:31:03 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6976" docExpressionCount="673" docLength="9844" length="1" offset="4810" starttimestamp="1599653169283" timestamp="1494239">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="1840" _type="InsertStringCommand" date="Wed Sep 09 08:31:03 EDT 2020" starttimestamp="1599653169283" timestamp="1494249" timestamp2="1494249">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="1841" _type="Delete" date="Wed Sep 09 08:31:03 EDT 2020" docASTNodeCount="912" docActiveCodeLength="6975" docExpressionCount="676" docLength="9843" endLine="102" length="1" offset="4810" startLine="102" starttimestamp="1599653169283" timestamp="1494579">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="1842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:31:03 EDT 2020" starttimestamp="1599653169283" timestamp="1494599" />
  <DocumentChange __id="1843" _type="Insert" date="Wed Sep 09 08:31:04 EDT 2020" docASTNodeCount="907" docActiveCodeLength="6976" docExpressionCount="673" docLength="9844" length="1" offset="4810" starttimestamp="1599653169283" timestamp="1495049">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1844" _type="InsertStringCommand" date="Wed Sep 09 08:31:04 EDT 2020" starttimestamp="1599653169283" timestamp="1495059" timestamp2="1495059">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1845" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:31:04 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1495059" />
  <DocumentChange __id="1846" _type="Insert" date="Wed Sep 09 08:31:04 EDT 2020" docASTNodeCount="914" docActiveCodeLength="6977" docExpressionCount="678" docLength="9845" length="1" offset="4811" starttimestamp="1599653169283" timestamp="1495179">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1847" _type="Insert" date="Wed Sep 09 08:31:04 EDT 2020" docASTNodeCount="914" docActiveCodeLength="6978" docExpressionCount="678" docLength="9846" length="1" offset="4812" starttimestamp="1599653169283" timestamp="1495549">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="1848" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:31:05 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1496529" />
  <DocumentChange __id="1849" _type="Replace" date="Wed Sep 09 08:31:05 EDT 2020" docASTNodeCount="915" docActiveCodeLength="6992" docExpressionCount="679" docLength="9860" endLine="102" insertionLength="16" int_docASTNodeCount="907" int_docActiveCodeLength="6976" int_docExpressionCount="673" int_docLength="9844" length="2" offset="4811" startLine="102" starttimestamp="1599653169283" timestamp="1496539">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[equals(anObject)]]></insertedText>
  </DocumentChange>
  <Command __id="1850" _type="InsertStringCommand" date="Wed Sep 09 08:31:05 EDT 2020" starttimestamp="1599653169283" timestamp="1496569" timestamp2="1496569">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1851" _type="Replace" date="Wed Sep 09 08:31:10 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6985" docExpressionCount="651" docLength="9853" endLine="102" insertionLength="1" int_docASTNodeCount="914" int_docActiveCodeLength="6984" int_docExpressionCount="678" int_docLength="9852" length="8" offset="4818" startLine="102" starttimestamp="1599653169283" timestamp="1501219">
    <deletedText><![CDATA[anObject]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="1852" _type="InsertStringCommand" date="Wed Sep 09 08:31:10 EDT 2020" starttimestamp="1599653169283" timestamp="1501219" timestamp2="1501219">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="1853" _type="Insert" date="Wed Sep 09 08:31:10 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6986" docExpressionCount="651" docLength="9854" length="1" offset="4819" starttimestamp="1599653169283" timestamp="1501639">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="1854" _type="InsertStringCommand" date="Wed Sep 09 08:31:10 EDT 2020" starttimestamp="1599653169283" timestamp="1501649" timestamp2="1501649">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="1855" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6987" docExpressionCount="651" docLength="9855" length="1" offset="4820" starttimestamp="1599653169283" timestamp="1501889">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1856" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1501889" timestamp2="1501889">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1857" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6988" docExpressionCount="651" docLength="9856" length="1" offset="4821" starttimestamp="1599653169283" timestamp="1502009">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="1858" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1502009" timestamp2="1502009">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1859" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6989" docExpressionCount="651" docLength="9857" length="1" offset="4822" starttimestamp="1599653169283" timestamp="1502159">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1860" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1502169" timestamp2="1502169">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1861" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6990" docExpressionCount="651" docLength="9858" length="1" offset="4823" starttimestamp="1599653169283" timestamp="1502299">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1862" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1502299" timestamp2="1502299">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="1863" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6991" docExpressionCount="651" docLength="9859" length="1" offset="4824" starttimestamp="1599653169283" timestamp="1502379">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1864" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1502389" timestamp2="1502389">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1865" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6992" docExpressionCount="651" docLength="9860" length="1" offset="4825" starttimestamp="1599653169283" timestamp="1502459">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1866" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1502469" timestamp2="1502469">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="1867" _type="Insert" date="Wed Sep 09 08:31:11 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6993" docExpressionCount="651" docLength="9861" length="1" offset="4826" starttimestamp="1599653169283" timestamp="1502609">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1868" _type="InsertStringCommand" date="Wed Sep 09 08:31:11 EDT 2020" starttimestamp="1599653169283" timestamp="1502609" timestamp2="1502609">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1869" _type="Insert" date="Wed Sep 09 08:31:13 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6994" docExpressionCount="651" docLength="9862" length="1" offset="4827" starttimestamp="1599653169283" timestamp="1504509">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1870" _type="InsertStringCommand" date="Wed Sep 09 08:31:13 EDT 2020" starttimestamp="1599653169283" timestamp="1504519" timestamp2="1504519">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="1871" _type="Insert" date="Wed Sep 09 08:31:14 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6995" docExpressionCount="651" docLength="9863" length="1" offset="4828" starttimestamp="1599653169283" timestamp="1504889">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="1872" _type="InsertStringCommand" date="Wed Sep 09 08:31:14 EDT 2020" starttimestamp="1599653169283" timestamp="1504899" timestamp2="1504899">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="1873" _type="Insert" date="Wed Sep 09 08:31:14 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6996" docExpressionCount="651" docLength="9864" length="1" offset="4829" starttimestamp="1599653169283" timestamp="1505089">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="1874" _type="InsertStringCommand" date="Wed Sep 09 08:31:14 EDT 2020" starttimestamp="1599653169283" timestamp="1505089" timestamp2="1505089">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="1875" _type="Insert" date="Wed Sep 09 08:31:14 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6997" docExpressionCount="651" docLength="9865" length="1" offset="4830" starttimestamp="1599653169283" timestamp="1505329">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1876" _type="InsertStringCommand" date="Wed Sep 09 08:31:14 EDT 2020" starttimestamp="1599653169283" timestamp="1505329" timestamp2="1505329">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1877" _type="Insert" date="Wed Sep 09 08:31:16 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6998" docExpressionCount="651" docLength="9866" length="1" offset="4831" starttimestamp="1599653169283" timestamp="1506859">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1878" _type="InsertStringCommand" date="Wed Sep 09 08:31:16 EDT 2020" starttimestamp="1599653169283" timestamp="1506859" timestamp2="1506859">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="1879" _type="Insert" date="Wed Sep 09 08:31:16 EDT 2020" docASTNodeCount="874" docActiveCodeLength="6999" docExpressionCount="651" docLength="9867" length="1" offset="4832" starttimestamp="1599653169283" timestamp="1507099">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1880" _type="InsertStringCommand" date="Wed Sep 09 08:31:16 EDT 2020" starttimestamp="1599653169283" timestamp="1507169" timestamp2="1507169">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1881" _type="Insert" date="Wed Sep 09 08:31:16 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7000" docExpressionCount="651" docLength="9868" length="1" offset="4833" starttimestamp="1599653169283" timestamp="1507189">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1882" _type="InsertStringCommand" date="Wed Sep 09 08:31:16 EDT 2020" starttimestamp="1599653169283" timestamp="1507199" timestamp2="1507199">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1883" _type="Insert" date="Wed Sep 09 08:31:16 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7001" docExpressionCount="651" docLength="9869" length="1" offset="4834" starttimestamp="1599653169283" timestamp="1507319">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1884" _type="InsertStringCommand" date="Wed Sep 09 08:31:16 EDT 2020" starttimestamp="1599653169283" timestamp="1507319" timestamp2="1507319">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1885" _type="Insert" date="Wed Sep 09 08:31:16 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7002" docExpressionCount="651" docLength="9870" length="1" offset="4835" starttimestamp="1599653169283" timestamp="1507479">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1886" _type="InsertStringCommand" date="Wed Sep 09 08:31:16 EDT 2020" starttimestamp="1599653169283" timestamp="1507479" timestamp2="1507479">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1887" _type="Insert" date="Wed Sep 09 08:31:16 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7003" docExpressionCount="651" docLength="9871" length="1" offset="4836" starttimestamp="1599653169283" timestamp="1507699">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1888" _type="InsertStringCommand" date="Wed Sep 09 08:31:16 EDT 2020" starttimestamp="1599653169283" timestamp="1507699" timestamp2="1507699">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="1889" _type="Insert" date="Wed Sep 09 08:31:18 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7004" docExpressionCount="651" docLength="9872" length="1" offset="4837" starttimestamp="1599653169283" timestamp="1509089">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="1890" _type="InsertStringCommand" date="Wed Sep 09 08:31:18 EDT 2020" starttimestamp="1599653169283" timestamp="1509089" timestamp2="1509089">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="1891" _type="Insert" date="Wed Sep 09 08:31:18 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7005" docExpressionCount="651" docLength="9873" length="1" offset="4838" starttimestamp="1599653169283" timestamp="1509579">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1892" _type="InsertStringCommand" date="Wed Sep 09 08:31:18 EDT 2020" starttimestamp="1599653169283" timestamp="1509579" timestamp2="1509579">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="1893" _type="Delete" date="Wed Sep 09 08:31:19 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7004" docExpressionCount="651" docLength="9872" endLine="102" length="1" offset="4838" startLine="102" starttimestamp="1599653169283" timestamp="1509899">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1894" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:31:19 EDT 2020" starttimestamp="1599653169283" timestamp="1509909" />
  <DocumentChange __id="1895" _type="Insert" date="Wed Sep 09 08:31:19 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7005" docExpressionCount="651" docLength="9873" length="1" offset="4838" starttimestamp="1599653169283" timestamp="1510019">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <Command __id="1896" _type="InsertStringCommand" date="Wed Sep 09 08:31:19 EDT 2020" starttimestamp="1599653169283" timestamp="1510019" timestamp2="1510019">
    <data><![CDATA[x]]></data>
  </Command>
  <DocumentChange __id="1897" _type="Insert" date="Wed Sep 09 08:31:19 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7006" docExpressionCount="651" docLength="9874" length="1" offset="4839" starttimestamp="1599653169283" timestamp="1510159">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="1898" _type="InsertStringCommand" date="Wed Sep 09 08:31:19 EDT 2020" starttimestamp="1599653169283" timestamp="1510159" timestamp2="1510159">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="1899" _type="Insert" date="Wed Sep 09 08:31:20 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7007" docExpressionCount="651" docLength="9875" length="1" offset="4840" starttimestamp="1599653169283" timestamp="1511449">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1900" _type="InsertStringCommand" date="Wed Sep 09 08:31:20 EDT 2020" starttimestamp="1599653169283" timestamp="1511459" timestamp2="1511459">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="1901" _type="Insert" date="Wed Sep 09 08:31:20 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7008" docExpressionCount="651" docLength="9876" length="1" offset="4841" starttimestamp="1599653169283" timestamp="1511609">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="1902" _type="InsertStringCommand" date="Wed Sep 09 08:31:20 EDT 2020" starttimestamp="1599653169283" timestamp="1511619" timestamp2="1511619">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="1903" _type="Insert" date="Wed Sep 09 08:31:20 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7009" docExpressionCount="651" docLength="9877" length="1" offset="4842" starttimestamp="1599653169283" timestamp="1511709">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1904" _type="InsertStringCommand" date="Wed Sep 09 08:31:21 EDT 2020" starttimestamp="1599653169283" timestamp="1511719" timestamp2="1511719">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="1905" _type="Insert" date="Wed Sep 09 08:31:21 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7010" docExpressionCount="651" docLength="9878" length="1" offset="4843" starttimestamp="1599653169283" timestamp="1511999">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1906" _type="InsertStringCommand" date="Wed Sep 09 08:31:21 EDT 2020" starttimestamp="1599653169283" timestamp="1511999" timestamp2="1511999">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1907" _type="Insert" date="Wed Sep 09 08:31:21 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7011" docExpressionCount="651" docLength="9879" length="1" offset="4844" starttimestamp="1599653169283" timestamp="1512109">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1908" _type="InsertStringCommand" date="Wed Sep 09 08:31:21 EDT 2020" starttimestamp="1599653169283" timestamp="1512119" timestamp2="1512119">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1909" _type="Insert" date="Wed Sep 09 08:31:21 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7012" docExpressionCount="651" docLength="9880" length="1" offset="4845" starttimestamp="1599653169283" timestamp="1512209">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1910" _type="InsertStringCommand" date="Wed Sep 09 08:31:21 EDT 2020" starttimestamp="1599653169283" timestamp="1512209" timestamp2="1512209">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1911" _type="Insert" date="Wed Sep 09 08:31:21 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7013" docExpressionCount="651" docLength="9881" length="1" offset="4846" starttimestamp="1599653169283" timestamp="1512369">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1912" _type="InsertStringCommand" date="Wed Sep 09 08:31:21 EDT 2020" starttimestamp="1599653169283" timestamp="1512379" timestamp2="1512379">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1913" _type="Insert" date="Wed Sep 09 08:31:21 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7014" docExpressionCount="651" docLength="9882" length="1" offset="4847" starttimestamp="1599653169283" timestamp="1512579">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1914" _type="InsertStringCommand" date="Wed Sep 09 08:31:21 EDT 2020" starttimestamp="1599653169283" timestamp="1512589" timestamp2="1512589">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="1915" _type="Insert" date="Wed Sep 09 08:31:22 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7015" docExpressionCount="651" docLength="9883" length="1" offset="4848" starttimestamp="1599653169283" timestamp="1512979">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="1916" _type="InsertStringCommand" date="Wed Sep 09 08:31:22 EDT 2020" starttimestamp="1599653169283" timestamp="1512989" timestamp2="1512989">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="1917" _type="Insert" date="Wed Sep 09 08:31:22 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7016" docExpressionCount="651" docLength="9884" length="1" offset="4849" starttimestamp="1599653169283" timestamp="1513119">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1918" _type="InsertStringCommand" date="Wed Sep 09 08:31:22 EDT 2020" starttimestamp="1599653169283" timestamp="1513129" timestamp2="1513129">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1919" _type="Insert" date="Wed Sep 09 08:31:22 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7017" docExpressionCount="651" docLength="9885" length="1" offset="4850" starttimestamp="1599653169283" timestamp="1513239">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1920" _type="InsertStringCommand" date="Wed Sep 09 08:31:22 EDT 2020" starttimestamp="1599653169283" timestamp="1513239" timestamp2="1513239">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1921" _type="Insert" date="Wed Sep 09 08:31:23 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7018" docExpressionCount="651" docLength="9886" length="1" offset="4851" starttimestamp="1599653169283" timestamp="1514109">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1922" _type="InsertStringCommand" date="Wed Sep 09 08:31:23 EDT 2020" starttimestamp="1599653169283" timestamp="1514109" timestamp2="1514109">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1923" _type="Insert" date="Wed Sep 09 08:31:23 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7019" docExpressionCount="651" docLength="9887" length="1" offset="4852" starttimestamp="1599653169283" timestamp="1514229">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="1924" _type="InsertStringCommand" date="Wed Sep 09 08:31:23 EDT 2020" starttimestamp="1599653169283" timestamp="1514239" timestamp2="1514239">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="1925" _type="Insert" date="Wed Sep 09 08:31:23 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7020" docExpressionCount="651" docLength="9888" length="1" offset="4853" starttimestamp="1599653169283" timestamp="1514429">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1926" _type="InsertStringCommand" date="Wed Sep 09 08:31:23 EDT 2020" starttimestamp="1599653169283" timestamp="1514439" timestamp2="1514439">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1927" _type="Insert" date="Wed Sep 09 08:31:23 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7021" docExpressionCount="651" docLength="9889" length="1" offset="4854" starttimestamp="1599653169283" timestamp="1514619">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1928" _type="InsertStringCommand" date="Wed Sep 09 08:31:23 EDT 2020" starttimestamp="1599653169283" timestamp="1514629" timestamp2="1514629">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="1929" _type="Insert" date="Wed Sep 09 08:31:24 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7022" docExpressionCount="651" docLength="9890" length="1" offset="4855" starttimestamp="1599653169283" timestamp="1515559">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1930" _type="InsertStringCommand" date="Wed Sep 09 08:31:24 EDT 2020" starttimestamp="1599653169283" timestamp="1515569" timestamp2="1515569">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="1931" _type="Insert" date="Wed Sep 09 08:31:25 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7023" docExpressionCount="651" docLength="9891" length="1" offset="4856" starttimestamp="1599653169283" timestamp="1515929">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="1932" _type="InsertStringCommand" date="Wed Sep 09 08:31:25 EDT 2020" starttimestamp="1599653169283" timestamp="1515929" timestamp2="1515929">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="1933" _type="Insert" date="Wed Sep 09 08:31:25 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7024" docExpressionCount="651" docLength="9892" length="1" offset="4857" starttimestamp="1599653169283" timestamp="1516099">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1934" _type="InsertStringCommand" date="Wed Sep 09 08:31:25 EDT 2020" starttimestamp="1599653169283" timestamp="1516109" timestamp2="1516109">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1935" _type="Insert" date="Wed Sep 09 08:31:25 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7025" docExpressionCount="651" docLength="9893" length="1" offset="4858" starttimestamp="1599653169283" timestamp="1516229">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="1936" _type="InsertStringCommand" date="Wed Sep 09 08:31:25 EDT 2020" starttimestamp="1599653169283" timestamp="1516229" timestamp2="1516229">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="1937" _type="Insert" date="Wed Sep 09 08:31:25 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7026" docExpressionCount="651" docLength="9894" length="1" offset="4859" starttimestamp="1599653169283" timestamp="1516419">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1938" _type="InsertStringCommand" date="Wed Sep 09 08:31:25 EDT 2020" starttimestamp="1599653169283" timestamp="1516419" timestamp2="1516419">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1939" _type="Insert" date="Wed Sep 09 08:31:25 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7027" docExpressionCount="651" docLength="9895" length="1" offset="4860" starttimestamp="1599653169283" timestamp="1516639">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1940" _type="InsertStringCommand" date="Wed Sep 09 08:31:25 EDT 2020" starttimestamp="1599653169283" timestamp="1516639" timestamp2="1516639">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1941" _type="Insert" date="Wed Sep 09 08:31:26 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7028" docExpressionCount="651" docLength="9896" length="1" offset="4861" starttimestamp="1599653169283" timestamp="1516769">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1942" _type="InsertStringCommand" date="Wed Sep 09 08:31:26 EDT 2020" starttimestamp="1599653169283" timestamp="1516769" timestamp2="1516769">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1943" _type="Insert" date="Wed Sep 09 08:31:26 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7029" docExpressionCount="651" docLength="9897" length="1" offset="4862" starttimestamp="1599653169283" timestamp="1516919">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1944" _type="InsertStringCommand" date="Wed Sep 09 08:31:26 EDT 2020" starttimestamp="1599653169283" timestamp="1516929" timestamp2="1516929">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1946" _type="InsertStringCommand" date="Wed Sep 09 08:31:26 EDT 2020" starttimestamp="1599653169283" timestamp="1517099" timestamp2="1517099">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:31:27 EDT 2020" starttimestamp="1599653169283" timestamp="1518689" />
  <DocumentChange __id="1945" _type="Insert" date="Wed Sep 09 08:31:26 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7030" docExpressionCount="651" docLength="9898" length="1" offset="4863" starttimestamp="1599653169283" timestamp="1517099">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1949" _type="Insert" date="Wed Sep 09 08:31:30 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7031" docExpressionCount="679" docLength="9899" length="1" offset="4864" starttimestamp="1599653169283" timestamp="1521229">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="1948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:31:29 EDT 2020" starttimestamp="1599653169283" timestamp="1520559" />
  <Command __id="1950" _type="InsertStringCommand" date="Wed Sep 09 08:31:30 EDT 2020" starttimestamp="1599653169283" timestamp="1521239" timestamp2="1521239">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="1951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:31:30 EDT 2020" starttimestamp="1599653169283" timestamp="1521479" />
  <Command __id="1953" _type="InsertStringCommand" date="Wed Sep 09 08:31:32 EDT 2020" starttimestamp="1599653169283" timestamp="1523289" timestamp2="1523289">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1955" _type="InsertStringCommand" date="Wed Sep 09 08:31:32 EDT 2020" starttimestamp="1599653169283" timestamp="1523709" timestamp2="1523709">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:31:33 EDT 2020" starttimestamp="1599653169283" timestamp="1524019" />
  <Command __id="1960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:31:33 EDT 2020" starttimestamp="1599653169283" timestamp="1524189" />
  <Command __id="1962" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:31:33 EDT 2020" starttimestamp="1599653169283" timestamp="1524579" />
  <Command __id="1963" _type="MoveCaretCommand" caretOffset="2459" date="Wed Sep 09 08:31:40 EDT 2020" docOffset="4812" starttimestamp="1599653169283" timestamp="1530799" />
  <Command __id="1964" _type="SelectTextCommand" caretOffset="2464" date="Wed Sep 09 08:31:40 EDT 2020" end="2464" start="2458" starttimestamp="1599653169283" timestamp="1530919" />
  <Command __id="1966" _type="InsertStringCommand" date="Wed Sep 09 08:31:40 EDT 2020" starttimestamp="1599653169283" timestamp="1531599" timestamp2="1531599">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1968" _type="InsertStringCommand" date="Wed Sep 09 08:31:41 EDT 2020" starttimestamp="1599653169283" timestamp="1531719" timestamp2="1531719">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1970" _type="InsertStringCommand" date="Wed Sep 09 08:31:41 EDT 2020" starttimestamp="1599653169283" timestamp="1531919" timestamp2="1531919">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1972" _type="InsertStringCommand" date="Wed Sep 09 08:31:41 EDT 2020" starttimestamp="1599653169283" timestamp="1532109" timestamp2="1532109">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1974" _type="InsertStringCommand" date="Wed Sep 09 08:31:41 EDT 2020" starttimestamp="1599653169283" timestamp="1532189" timestamp2="1532189">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1976" _type="InsertStringCommand" date="Wed Sep 09 08:31:41 EDT 2020" starttimestamp="1599653169283" timestamp="1532279" timestamp2="1532279">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1978" _type="InsertStringCommand" date="Wed Sep 09 08:31:41 EDT 2020" starttimestamp="1599653169283" timestamp="1532409" timestamp2="1532409">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1952" _type="Insert" date="Wed Sep 09 08:31:32 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7032" docExpressionCount="679" docLength="9900" length="1" offset="4866" starttimestamp="1599653169283" timestamp="1523279">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="1954" _type="Insert" date="Wed Sep 09 08:31:32 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7034" docExpressionCount="679" docLength="9902" length="2" offset="4867" starttimestamp="1599653169283" timestamp="1523709">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="1956" _type="Delete" date="Wed Sep 09 08:31:33 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7032" docExpressionCount="679" docLength="9900" endLine="102" length="2" offset="4867" startLine="102" starttimestamp="1599653169283" timestamp="1523999">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="1957" _type="Insert" date="Wed Sep 09 08:31:33 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7033" docExpressionCount="679" docLength="9901" length="1" offset="4867" starttimestamp="1599653169283" timestamp="1524019">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="1959" _type="Delete" date="Wed Sep 09 08:31:33 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7032" docExpressionCount="679" docLength="9900" endLine="102" length="1" offset="4867" startLine="102" starttimestamp="1599653169283" timestamp="1524169">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="1961" _type="Delete" date="Wed Sep 09 08:31:33 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7031" docExpressionCount="679" docLength="9899" endLine="102" length="1" offset="4866" startLine="102" starttimestamp="1599653169283" timestamp="1524559">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="1965" _type="Replace" date="Wed Sep 09 08:31:40 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7026" docExpressionCount="679" docLength="9894" endLine="102" insertionLength="1" int_docASTNodeCount="915" int_docActiveCodeLength="7025" int_docExpressionCount="679" int_docLength="9893" length="6" offset="4811" startLine="102" starttimestamp="1599653169283" timestamp="1531579">
    <deletedText><![CDATA[equals]]></deletedText>
    <insertedText><![CDATA[m]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1967" _type="Insert" date="Wed Sep 09 08:31:40 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7027" docExpressionCount="679" docLength="9895" length="1" offset="4812" starttimestamp="1599653169283" timestamp="1531709">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1969" _type="Insert" date="Wed Sep 09 08:31:41 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7028" docExpressionCount="679" docLength="9896" length="1" offset="4813" starttimestamp="1599653169283" timestamp="1531909">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1971" _type="Insert" date="Wed Sep 09 08:31:41 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7029" docExpressionCount="679" docLength="9897" length="1" offset="4814" starttimestamp="1599653169283" timestamp="1532089">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="1973" _type="Insert" date="Wed Sep 09 08:31:41 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7030" docExpressionCount="679" docLength="9898" length="1" offset="4815" starttimestamp="1599653169283" timestamp="1532179">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="1975" _type="Insert" date="Wed Sep 09 08:31:41 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7031" docExpressionCount="679" docLength="9899" length="1" offset="4816" starttimestamp="1599653169283" timestamp="1532259">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1977" _type="Insert" date="Wed Sep 09 08:31:41 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7032" docExpressionCount="679" docLength="9900" length="1" offset="4817" starttimestamp="1599653169283" timestamp="1532399">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="1979" _type="MoveCaretCommand" caretOffset="2512" date="Wed Sep 09 08:31:44 EDT 2020" docOffset="4865" starttimestamp="1599653169283" timestamp="1535139" />
  <DocumentChange __id="1980" _type="Insert" date="Wed Sep 09 08:31:53 EDT 2020" docASTNodeCount="874" docActiveCodeLength="7033" docExpressionCount="651" docLength="9901" length="1" offset="4865" starttimestamp="1599653169283" timestamp="1544659">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <Command __id="1981" _type="InsertStringCommand" date="Wed Sep 09 08:31:53 EDT 2020" starttimestamp="1599653169283" timestamp="1544669" timestamp2="1544669">
    <data><![CDATA[\]]></data>
  </Command>
  <DocumentChange __id="1982" _type="Insert" date="Wed Sep 09 08:31:54 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7034" docExpressionCount="679" docLength="9902" length="1" offset="4866" starttimestamp="1599653169283" timestamp="1544759">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1983" _type="InsertStringCommand" date="Wed Sep 09 08:31:54 EDT 2020" starttimestamp="1599653169283" timestamp="1544759" timestamp2="1544759">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1984" _type="Insert" date="Wed Sep 09 08:31:55 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7035" docExpressionCount="679" docLength="9903" length="1" offset="4867" starttimestamp="1599653169283" timestamp="1546489">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="1985" _type="InsertStringCommand" date="Wed Sep 09 08:31:55 EDT 2020" starttimestamp="1599653169283" timestamp="1546499" timestamp2="1546499">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="1987" _type="InsertStringCommand" date="Wed Sep 09 08:31:55 EDT 2020" starttimestamp="1599653169283" timestamp="1546669" timestamp2="1546669">
    <data><![CDATA[?]]></data>
  </Command>
  <DocumentChange __id="1986" _type="Insert" date="Wed Sep 09 08:31:55 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7036" docExpressionCount="679" docLength="9904" length="1" offset="4868" starttimestamp="1599653169283" timestamp="1546659">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <Command __id="1988" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:31:57 EDT 2020" starttimestamp="1599653169283" timestamp="1547899" />
  <Command __id="1989" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:31:57 EDT 2020" starttimestamp="1599653169283" timestamp="1548099" />
  <DocumentChange __id="1990" _type="Insert" date="Wed Sep 09 08:32:02 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7037" docExpressionCount="679" docLength="9905" length="1" offset="4871" starttimestamp="1599653169283" timestamp="1553419">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="1991" _type="InsertStringCommand" date="Wed Sep 09 08:32:02 EDT 2020" starttimestamp="1599653169283" timestamp="1553429" timestamp2="1553429">
    <data><![CDATA[)]]></data>
  </Command>
  <DocumentChange __id="1992" _type="Insert" date="Wed Sep 09 08:32:03 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7039" docExpressionCount="679" docLength="9907" length="2" offset="4872" starttimestamp="1599653169283" timestamp="1554229">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <Command __id="1993" _type="InsertStringCommand" date="Wed Sep 09 08:32:03 EDT 2020" starttimestamp="1599653169283" timestamp="1554249" timestamp2="1554249">
    <data><![CDATA[{]]></data>
  </Command>
  <DocumentChange __id="1994" _type="Insert" date="Wed Sep 09 08:32:03 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7053" docExpressionCount="679" docLength="9921" length="14" offset="4874" starttimestamp="1599653169283" timestamp="1554419">
    <text><![CDATA[
					
				}]]></text>
  </DocumentChange>
  <Command __id="1995" _type="InsertStringCommand" date="Wed Sep 09 08:32:03 EDT 2020" starttimestamp="1599653169283" timestamp="1554479" timestamp2="1554479">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1996" _type="Insert" date="Wed Sep 09 08:32:04 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7054" docExpressionCount="680" docLength="9922" length="1" offset="4881" starttimestamp="1599653169283" timestamp="1555069">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1997" _type="InsertStringCommand" date="Wed Sep 09 08:32:04 EDT 2020" starttimestamp="1599653169283" timestamp="1555079" timestamp2="1555079">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="1998" _type="Insert" date="Wed Sep 09 08:32:04 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7055" docExpressionCount="680" docLength="9923" length="1" offset="4882" starttimestamp="1599653169283" timestamp="1555209">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1999" _type="InsertStringCommand" date="Wed Sep 09 08:32:04 EDT 2020" starttimestamp="1599653169283" timestamp="1555219" timestamp2="1555219">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="2000" _type="Insert" date="Wed Sep 09 08:32:05 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7056" docExpressionCount="680" docLength="9924" length="1" offset="4883" starttimestamp="1599653169283" timestamp="1556269">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="2001" _type="InsertStringCommand" date="Wed Sep 09 08:32:05 EDT 2020" starttimestamp="1599653169283" timestamp="1556289" timestamp2="1556289">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="2002" _type="Insert" date="Wed Sep 09 08:32:05 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7057" docExpressionCount="680" docLength="9925" length="1" offset="4884" starttimestamp="1599653169283" timestamp="1556469">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="2003" _type="InsertStringCommand" date="Wed Sep 09 08:32:05 EDT 2020" starttimestamp="1599653169283" timestamp="1556469" timestamp2="1556469">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2004" _type="Insert" date="Wed Sep 09 08:32:06 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7058" docExpressionCount="680" docLength="9926" length="1" offset="4885" starttimestamp="1599653169283" timestamp="1556929">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="2005" _type="InsertStringCommand" date="Wed Sep 09 08:32:06 EDT 2020" starttimestamp="1599653169283" timestamp="1556939" timestamp2="1556939">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="2006" _type="Insert" date="Wed Sep 09 08:32:06 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7059" docExpressionCount="680" docLength="9927" length="1" offset="4886" starttimestamp="1599653169283" timestamp="1557069">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="2007" _type="InsertStringCommand" date="Wed Sep 09 08:32:06 EDT 2020" starttimestamp="1599653169283" timestamp="1557079" timestamp2="1557079">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="2008" _type="Insert" date="Wed Sep 09 08:32:06 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7060" docExpressionCount="680" docLength="9928" length="1" offset="4887" starttimestamp="1599653169283" timestamp="1557239">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="2009" _type="InsertStringCommand" date="Wed Sep 09 08:32:06 EDT 2020" starttimestamp="1599653169283" timestamp="1557249" timestamp2="1557249">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="2010" _type="Insert" date="Wed Sep 09 08:32:06 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7061" docExpressionCount="679" docLength="9929" length="1" offset="4888" starttimestamp="1599653169283" timestamp="1557339">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2011" _type="InsertStringCommand" date="Wed Sep 09 08:32:06 EDT 2020" starttimestamp="1599653169283" timestamp="1557359" timestamp2="1557359">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2013" _type="InsertStringCommand" date="Wed Sep 09 08:32:08 EDT 2020" starttimestamp="1599653169283" timestamp="1559619" timestamp2="1559619">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="2012" _type="Insert" date="Wed Sep 09 08:32:08 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7062" docExpressionCount="679" docLength="9930" length="1" offset="4889" starttimestamp="1599653169283" timestamp="1559619">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2015" _type="Delete" date="Wed Sep 09 08:32:10 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7061" docExpressionCount="678" docLength="9929" endLine="102" length="1" offset="4873" startLine="102" starttimestamp="1599653169283" timestamp="1561469">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="2017" _type="Delete" date="Wed Sep 09 08:32:11 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7060" docExpressionCount="678" docLength="9928" endLine="102" length="1" offset="4872" startLine="102" starttimestamp="1599653169283" timestamp="1561719">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2021" _type="Delete" date="Wed Sep 09 08:32:12 EDT 2020" docASTNodeCount="915" docActiveCodeLength="7059" docExpressionCount="679" docLength="9927" endLine="104" length="1" offset="4894" startLine="104" starttimestamp="1599653169283" timestamp="1562769">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="2023" _type="Insert" date="Wed Sep 09 08:32:12 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7060" docExpressionCount="680" docLength="9928" length="1" offset="4894" starttimestamp="1599653169283" timestamp="1563579">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2025" _type="Insert" date="Wed Sep 09 08:32:12 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7061" docExpressionCount="680" docLength="9929" length="1" offset="4895" starttimestamp="1599653169283" timestamp="1563679">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2027" _type="Insert" date="Wed Sep 09 08:32:13 EDT 2020" docASTNodeCount="917" docActiveCodeLength="7062" docExpressionCount="680" docLength="9930" length="1" offset="4896" starttimestamp="1599653169283" timestamp="1563879">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2029" _type="Replace" date="Wed Sep 09 08:32:13 EDT 2020" docASTNodeCount="880" docActiveCodeLength="7063" docExpressionCount="653" docLength="9931" endLine="104" insertionLength="8" int_docASTNodeCount="915" int_docActiveCodeLength="7055" int_docExpressionCount="679" int_docLength="9923" length="7" offset="4890" startLine="104" starttimestamp="1599653169283" timestamp="1564039">
    <deletedText><![CDATA[				els]]></deletedText>
    <insertedText><![CDATA[				else]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2031" _type="Insert" date="Wed Sep 09 08:32:14 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7065" docExpressionCount="679" docLength="9933" length="2" offset="4898" starttimestamp="1599653169283" timestamp="1564809">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="2033" _type="Insert" date="Wed Sep 09 08:32:14 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7079" docExpressionCount="679" docLength="9947" length="14" offset="4900" starttimestamp="1599653169283" timestamp="1564969">
    <text><![CDATA[
					
				}]]></text>
  </DocumentChange>
  <Command __id="2035" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:32:17 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1568449">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2037" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:32:21 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7079" docExpressionCount="679" docLength="9947" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1571889">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		for(int i=0;i<anOutputLines.length;i++) {¶			"), Diff(DELETE,"String [] "), Diff(INSERT,"if(i==0) {¶				if(anOutputLines[i].matches("Distance,Duration,Exhalation,Derived,Inferred\n*?"))¶					continue;¶				else {¶					¶				}¶			}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			"), Diff(EQUAL,"¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) {
				if(anOutputLines[i].matches("Distance,Duration,Exhalation,Derived,Inferred\n*?"))
					continue;
				else {
					
				}
			}
			String [] anOutputComponents=anOutputLines[i].split(",");
			
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="2014" _type="MoveCaretCommand" caretOffset="2520" date="Wed Sep 09 08:32:09 EDT 2020" docOffset="4873" starttimestamp="1599653169283" timestamp="1560689" />
  <Command __id="2016" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Sep 09 08:32:10 EDT 2020" starttimestamp="1599653169283" timestamp="1561479" />
  <Command __id="2018" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:11 EDT 2020" starttimestamp="1599653169283" timestamp="1561729" />
  <Command __id="2019" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:32:11 EDT 2020" starttimestamp="1599653169283" timestamp="1562099" />
  <Command __id="2020" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:32:11 EDT 2020" starttimestamp="1599653169283" timestamp="1562499" />
  <Command __id="2022" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:12 EDT 2020" starttimestamp="1599653169283" timestamp="1562779" />
  <Command __id="2024" _type="InsertStringCommand" date="Wed Sep 09 08:32:12 EDT 2020" starttimestamp="1599653169283" timestamp="1563589" timestamp2="1563589">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2026" _type="InsertStringCommand" date="Wed Sep 09 08:32:12 EDT 2020" starttimestamp="1599653169283" timestamp="1563689" timestamp2="1563689">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2028" _type="InsertStringCommand" date="Wed Sep 09 08:32:13 EDT 2020" starttimestamp="1599653169283" timestamp="1563889" timestamp2="1563889">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2030" _type="InsertStringCommand" date="Wed Sep 09 08:32:13 EDT 2020" starttimestamp="1599653169283" timestamp="1564049" timestamp2="1564049">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2032" _type="InsertStringCommand" date="Wed Sep 09 08:32:14 EDT 2020" starttimestamp="1599653169283" timestamp="1564809" timestamp2="1564809">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2034" _type="InsertStringCommand" date="Wed Sep 09 08:32:14 EDT 2020" starttimestamp="1599653169283" timestamp="1564979" timestamp2="1564979">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2036" _type="SelectTextCommand" caretOffset="958" date="Wed Sep 09 08:32:17 EDT 2020" end="958" start="898" starttimestamp="1599653169283" timestamp="1568569" />
  <Command __id="2038" _type="MoveCaretCommand" caretOffset="2554" date="Wed Sep 09 08:32:21 EDT 2020" docOffset="4907" starttimestamp="1599653169283" timestamp="1571989" />
  <Command __id="2040" _type="InsertStringCommand" date="Wed Sep 09 08:32:31 EDT 2020" starttimestamp="1599653169283" timestamp="1582239" timestamp2="1582239">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2042" _type="InsertStringCommand" date="Wed Sep 09 08:32:31 EDT 2020" starttimestamp="1599653169283" timestamp="1582449" timestamp2="1582449">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2044" _type="InsertStringCommand" date="Wed Sep 09 08:32:31 EDT 2020" starttimestamp="1599653169283" timestamp="1582469" timestamp2="1582469">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2046" _type="InsertStringCommand" date="Wed Sep 09 08:32:32 EDT 2020" starttimestamp="1599653169283" timestamp="1582729" timestamp2="1582729">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2048" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:32 EDT 2020" starttimestamp="1599653169283" timestamp="1583089" />
  <Command __id="2050" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:32 EDT 2020" starttimestamp="1599653169283" timestamp="1583239" />
  <Command __id="2052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:32 EDT 2020" starttimestamp="1599653169283" timestamp="1583379" />
  <Command __id="2054" _type="InsertStringCommand" date="Wed Sep 09 08:32:33 EDT 2020" starttimestamp="1599653169283" timestamp="1583829" timestamp2="1583829">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2056" _type="InsertStringCommand" date="Wed Sep 09 08:32:33 EDT 2020" starttimestamp="1599653169283" timestamp="1583949" timestamp2="1583949">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2058" _type="InsertStringCommand" date="Wed Sep 09 08:32:33 EDT 2020" starttimestamp="1599653169283" timestamp="1584109" timestamp2="1584109">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2039" _type="Insert" date="Wed Sep 09 08:32:31 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7080" docExpressionCount="680" docLength="9948" length="1" offset="4907" starttimestamp="1599653169283" timestamp="1582229">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="2041" _type="Insert" date="Wed Sep 09 08:32:31 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7081" docExpressionCount="680" docLength="9949" length="1" offset="4908" starttimestamp="1599653169283" timestamp="1582429">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2043" _type="Insert" date="Wed Sep 09 08:32:31 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7082" docExpressionCount="680" docLength="9950" length="1" offset="4909" starttimestamp="1599653169283" timestamp="1582459">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2045" _type="Insert" date="Wed Sep 09 08:32:32 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7083" docExpressionCount="680" docLength="9951" length="1" offset="4910" starttimestamp="1599653169283" timestamp="1582719">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2047" _type="Delete" date="Wed Sep 09 08:32:32 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7082" docExpressionCount="680" docLength="9950" endLine="105" length="1" offset="4910" startLine="105" starttimestamp="1599653169283" timestamp="1583079">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2049" _type="Delete" date="Wed Sep 09 08:32:32 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7081" docExpressionCount="680" docLength="9949" endLine="105" length="1" offset="4909" startLine="105" starttimestamp="1599653169283" timestamp="1583229">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2051" _type="Delete" date="Wed Sep 09 08:32:32 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7080" docExpressionCount="680" docLength="9948" endLine="105" length="1" offset="4908" startLine="105" starttimestamp="1599653169283" timestamp="1583369">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2053" _type="Insert" date="Wed Sep 09 08:32:33 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7081" docExpressionCount="680" docLength="9949" length="1" offset="4908" starttimestamp="1599653169283" timestamp="1583819">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2055" _type="Insert" date="Wed Sep 09 08:32:33 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7082" docExpressionCount="680" docLength="9950" length="1" offset="4909" starttimestamp="1599653169283" timestamp="1583939">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2057" _type="Insert" date="Wed Sep 09 08:32:33 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7083" docExpressionCount="680" docLength="9951" length="1" offset="4910" starttimestamp="1599653169283" timestamp="1584099">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2059" _type="Insert" date="Wed Sep 09 08:32:33 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7084" docExpressionCount="680" docLength="9952" length="1" offset="4911" starttimestamp="1599653169283" timestamp="1584219">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2061" _type="Insert" date="Wed Sep 09 08:32:33 EDT 2020" docASTNodeCount="918" docActiveCodeLength="7085" docExpressionCount="680" docLength="9953" length="1" offset="4912" starttimestamp="1599653169283" timestamp="1584319">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="2063" _type="Insert" date="Wed Sep 09 08:32:33 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7086" docExpressionCount="679" docLength="9954" length="1" offset="4913" starttimestamp="1599653169283" timestamp="1584559">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2066" _type="Insert" date="Wed Sep 09 08:32:34 EDT 2020" docASTNodeCount="920" docActiveCodeLength="7087" docExpressionCount="682" docLength="9955" length="1" offset="4914" starttimestamp="1599653169283" timestamp="1585189">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2067" _type="Insert" date="Wed Sep 09 08:32:34 EDT 2020" docASTNodeCount="920" docActiveCodeLength="7088" docExpressionCount="682" docLength="9956" length="1" offset="4915" starttimestamp="1599653169283" timestamp="1585369">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2068" _type="Insert" date="Wed Sep 09 08:32:34 EDT 2020" docASTNodeCount="920" docActiveCodeLength="7089" docExpressionCount="682" docLength="9957" length="1" offset="4916" starttimestamp="1599653169283" timestamp="1585509">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2070" _type="Replace" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="916" docActiveCodeLength="7090" docExpressionCount="679" docLength="9958" endLine="105" insertionLength="4" int_docASTNodeCount="916" int_docActiveCodeLength="7086" int_docExpressionCount="679" int_docLength="9954" length="3" offset="4914" startLine="105" starttimestamp="1599653169283" timestamp="1585859">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2073" _type="Insert" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7091" docExpressionCount="684" docLength="9959" length="1" offset="4918" starttimestamp="1599653169283" timestamp="1586009">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="2074" _type="Insert" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7092" docExpressionCount="684" docLength="9960" length="1" offset="4919" starttimestamp="1599653169283" timestamp="1586149">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2075" _type="Insert" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7093" docExpressionCount="684" docLength="9961" length="1" offset="4920" starttimestamp="1599653169283" timestamp="1586249">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2076" _type="Insert" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7094" docExpressionCount="684" docLength="9962" length="1" offset="4921" starttimestamp="1599653169283" timestamp="1586369">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2077" _type="Insert" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7095" docExpressionCount="684" docLength="9963" length="1" offset="4922" starttimestamp="1599653169283" timestamp="1586449">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2078" _type="Insert" date="Wed Sep 09 08:32:35 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7096" docExpressionCount="684" docLength="9964" length="1" offset="4923" starttimestamp="1599653169283" timestamp="1586609">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2079" _type="Insert" date="Wed Sep 09 08:32:37 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7097" docExpressionCount="684" docLength="9965" length="1" offset="4924" starttimestamp="1599653169283" timestamp="1587749">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2080" _type="Insert" date="Wed Sep 09 08:32:37 EDT 2020" docASTNodeCount="922" docActiveCodeLength="7099" docExpressionCount="684" docLength="9967" length="2" offset="4925" starttimestamp="1599653169283" timestamp="1588529">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="2081" _type="Insert" date="Wed Sep 09 08:32:40 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7101" docExpressionCount="685" docLength="9969" length="2" offset="4926" starttimestamp="1599653169283" timestamp="1591129">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="2083" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7102" docExpressionCount="685" docLength="9970" length="1" offset="4927" starttimestamp="1599653169283" timestamp="1591929">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="2085" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7103" docExpressionCount="685" docLength="9971" length="1" offset="4928" starttimestamp="1599653169283" timestamp="1592089">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2087" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7104" docExpressionCount="685" docLength="9972" length="1" offset="4929" starttimestamp="1599653169283" timestamp="1592259">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2089" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7105" docExpressionCount="685" docLength="9973" length="1" offset="4930" starttimestamp="1599653169283" timestamp="1592379">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2091" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7106" docExpressionCount="685" docLength="9974" length="1" offset="4931" starttimestamp="1599653169283" timestamp="1592459">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2093" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7107" docExpressionCount="685" docLength="9975" length="1" offset="4932" starttimestamp="1599653169283" timestamp="1592589">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2095" _type="Insert" date="Wed Sep 09 08:32:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7108" docExpressionCount="685" docLength="9976" length="1" offset="4933" starttimestamp="1599653169283" timestamp="1592639">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2097" _type="Insert" date="Wed Sep 09 08:32:42 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7109" docExpressionCount="685" docLength="9977" length="1" offset="4934" starttimestamp="1599653169283" timestamp="1592809">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2060" _type="InsertStringCommand" date="Wed Sep 09 08:32:33 EDT 2020" starttimestamp="1599653169283" timestamp="1584229" timestamp2="1584229">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2062" _type="InsertStringCommand" date="Wed Sep 09 08:32:33 EDT 2020" starttimestamp="1599653169283" timestamp="1584319" timestamp2="1584319">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2064" _type="InsertStringCommand" date="Wed Sep 09 08:32:33 EDT 2020" starttimestamp="1599653169283" timestamp="1584569" timestamp2="1584569">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2065" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:32:33 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1584579" />
  <Command __id="2069" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:32:35 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1585849" />
  <Command __id="2071" _type="InsertStringCommand" date="Wed Sep 09 08:32:35 EDT 2020" starttimestamp="1599653169283" timestamp="1585859" timestamp2="1585859">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2072" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:32:35 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1585859" />
  <Command __id="2082" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:32:40 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1591169" />
  <Command __id="2084" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1591929" timestamp2="1591929">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2086" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1592099" timestamp2="1592099">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2088" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1592269" timestamp2="1592269">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2090" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1592389" timestamp2="1592389">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2092" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1592459" timestamp2="1592459">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2094" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1592589" timestamp2="1592589">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2096" _type="InsertStringCommand" date="Wed Sep 09 08:32:41 EDT 2020" starttimestamp="1599653169283" timestamp="1592639" timestamp2="1592639">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2098" _type="InsertStringCommand" date="Wed Sep 09 08:32:42 EDT 2020" starttimestamp="1599653169283" timestamp="1592809" timestamp2="1592809">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2100" _type="InsertStringCommand" date="Wed Sep 09 08:32:45 EDT 2020" starttimestamp="1599653169283" timestamp="1596329" timestamp2="1596329">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2102" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:46 EDT 2020" starttimestamp="1599653169283" timestamp="1597089" />
  <Command __id="2104" _type="InsertStringCommand" date="Wed Sep 09 08:32:46 EDT 2020" starttimestamp="1599653169283" timestamp="1597289" timestamp2="1597289">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2106" _type="InsertStringCommand" date="Wed Sep 09 08:32:46 EDT 2020" starttimestamp="1599653169283" timestamp="1597489" timestamp2="1597489">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2108" _type="InsertStringCommand" date="Wed Sep 09 08:32:46 EDT 2020" starttimestamp="1599653169283" timestamp="1597639" timestamp2="1597639">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2110" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1597759" timestamp2="1597759">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2112" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1597959" timestamp2="1597959">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2114" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1598119" timestamp2="1598119">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="2099" _type="Insert" date="Wed Sep 09 08:32:45 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7110" docExpressionCount="685" docLength="9978" length="1" offset="4935" starttimestamp="1599653169283" timestamp="1596329">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2101" _type="Delete" date="Wed Sep 09 08:32:46 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7109" docExpressionCount="685" docLength="9977" endLine="105" length="1" offset="4935" startLine="105" starttimestamp="1599653169283" timestamp="1597079">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2103" _type="Insert" date="Wed Sep 09 08:32:46 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7110" docExpressionCount="685" docLength="9978" length="1" offset="4935" starttimestamp="1599653169283" timestamp="1597289">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2105" _type="Insert" date="Wed Sep 09 08:32:46 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7111" docExpressionCount="685" docLength="9979" length="1" offset="4936" starttimestamp="1599653169283" timestamp="1597489">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2107" _type="Insert" date="Wed Sep 09 08:32:46 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7112" docExpressionCount="685" docLength="9980" length="1" offset="4937" starttimestamp="1599653169283" timestamp="1597629">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2109" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7113" docExpressionCount="685" docLength="9981" length="1" offset="4938" starttimestamp="1599653169283" timestamp="1597749">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2111" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7114" docExpressionCount="685" docLength="9982" length="1" offset="4939" starttimestamp="1599653169283" timestamp="1597959">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2113" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7115" docExpressionCount="685" docLength="9983" length="1" offset="4940" starttimestamp="1599653169283" timestamp="1598119">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2115" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7116" docExpressionCount="685" docLength="9984" length="1" offset="4941" starttimestamp="1599653169283" timestamp="1598229">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2117" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7117" docExpressionCount="685" docLength="9985" length="1" offset="4942" starttimestamp="1599653169283" timestamp="1598339">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2119" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7118" docExpressionCount="685" docLength="9986" length="1" offset="4943" starttimestamp="1599653169283" timestamp="1598519">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2121" _type="Insert" date="Wed Sep 09 08:32:47 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7119" docExpressionCount="685" docLength="9987" length="1" offset="4944" starttimestamp="1599653169283" timestamp="1598649">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2123" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7120" docExpressionCount="685" docLength="9988" length="1" offset="4945" starttimestamp="1599653169283" timestamp="1598729">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2125" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7121" docExpressionCount="685" docLength="9989" length="1" offset="4946" starttimestamp="1599653169283" timestamp="1598889">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2127" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7122" docExpressionCount="685" docLength="9990" length="1" offset="4947" starttimestamp="1599653169283" timestamp="1598979">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2129" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7123" docExpressionCount="685" docLength="9991" length="1" offset="4948" starttimestamp="1599653169283" timestamp="1599149">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2131" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7124" docExpressionCount="685" docLength="9992" length="1" offset="4949" starttimestamp="1599653169283" timestamp="1599319">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="2133" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7125" docExpressionCount="685" docLength="9993" length="1" offset="4950" starttimestamp="1599653169283" timestamp="1599449">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2135" _type="Insert" date="Wed Sep 09 08:32:48 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7126" docExpressionCount="685" docLength="9994" length="1" offset="4951" starttimestamp="1599653169283" timestamp="1599609">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2137" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7127" docExpressionCount="685" docLength="9995" length="1" offset="4952" starttimestamp="1599653169283" timestamp="1599769">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2139" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7128" docExpressionCount="685" docLength="9996" length="1" offset="4953" starttimestamp="1599653169283" timestamp="1599879">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="2141" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7129" docExpressionCount="685" docLength="9997" length="1" offset="4954" starttimestamp="1599653169283" timestamp="1599989">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2143" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7130" docExpressionCount="685" docLength="9998" length="1" offset="4955" starttimestamp="1599653169283" timestamp="1600149">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2145" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7131" docExpressionCount="685" docLength="9999" length="1" offset="4956" starttimestamp="1599653169283" timestamp="1600299">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2147" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7132" docExpressionCount="685" docLength="10000" length="1" offset="4957" starttimestamp="1599653169283" timestamp="1600449">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2149" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7133" docExpressionCount="685" docLength="10001" length="1" offset="4958" starttimestamp="1599653169283" timestamp="1600539">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2151" _type="Insert" date="Wed Sep 09 08:32:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7134" docExpressionCount="685" docLength="10002" length="1" offset="4959" starttimestamp="1599653169283" timestamp="1600679">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2153" _type="Insert" date="Wed Sep 09 08:32:50 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7135" docExpressionCount="685" docLength="10003" length="1" offset="4960" starttimestamp="1599653169283" timestamp="1600769">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2155" _type="Insert" date="Wed Sep 09 08:32:50 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7136" docExpressionCount="685" docLength="10004" length="1" offset="4961" starttimestamp="1599653169283" timestamp="1600909">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2157" _type="Insert" date="Wed Sep 09 08:32:50 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7137" docExpressionCount="685" docLength="10005" length="1" offset="4962" starttimestamp="1599653169283" timestamp="1601049">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="2116" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1598229" timestamp2="1598229">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2118" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1598339" timestamp2="1598339">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2120" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1598519" timestamp2="1598519">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2122" _type="InsertStringCommand" date="Wed Sep 09 08:32:47 EDT 2020" starttimestamp="1599653169283" timestamp="1598649" timestamp2="1598649">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2124" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1598729" timestamp2="1598729">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2126" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1598889" timestamp2="1598889">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2128" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1598989" timestamp2="1598989">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2130" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1599149" timestamp2="1599149">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2132" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1599319" timestamp2="1599319">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2134" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1599449" timestamp2="1599449">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2136" _type="InsertStringCommand" date="Wed Sep 09 08:32:48 EDT 2020" starttimestamp="1599653169283" timestamp="1599609" timestamp2="1599609">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2138" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1599769" timestamp2="1599769">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2140" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1599889" timestamp2="1599889">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2142" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1599999" timestamp2="1599999">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2144" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1600159" timestamp2="1600159">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2146" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1600299" timestamp2="1600299">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2148" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1600459" timestamp2="1600459">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="2150" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1600539" timestamp2="1600539">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2152" _type="InsertStringCommand" date="Wed Sep 09 08:32:49 EDT 2020" starttimestamp="1599653169283" timestamp="1600679" timestamp2="1600679">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2154" _type="InsertStringCommand" date="Wed Sep 09 08:32:50 EDT 2020" starttimestamp="1599653169283" timestamp="1600769" timestamp2="1600769">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2156" _type="InsertStringCommand" date="Wed Sep 09 08:32:50 EDT 2020" starttimestamp="1599653169283" timestamp="1600909" timestamp2="1600909">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2158" _type="InsertStringCommand" date="Wed Sep 09 08:32:50 EDT 2020" starttimestamp="1599653169283" timestamp="1601049" timestamp2="1601049">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2160" _type="InsertStringCommand" date="Wed Sep 09 08:32:57 EDT 2020" starttimestamp="1599653169283" timestamp="1608179" timestamp2="1608179">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2162" _type="InsertStringCommand" date="Wed Sep 09 08:32:57 EDT 2020" starttimestamp="1599653169283" timestamp="1608309" timestamp2="1608309">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="2159" _type="Insert" date="Wed Sep 09 08:32:57 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7138" docExpressionCount="685" docLength="10006" length="1" offset="4963" starttimestamp="1599653169283" timestamp="1608169">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2161" _type="Insert" date="Wed Sep 09 08:32:57 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7139" docExpressionCount="685" docLength="10007" length="1" offset="4964" starttimestamp="1599653169283" timestamp="1608309">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2163" _type="Insert" date="Wed Sep 09 08:32:57 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7140" docExpressionCount="685" docLength="10008" length="1" offset="4965" starttimestamp="1599653169283" timestamp="1608409">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2165" _type="Insert" date="Wed Sep 09 08:32:57 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7141" docExpressionCount="685" docLength="10009" length="1" offset="4966" starttimestamp="1599653169283" timestamp="1608499">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2167" _type="Insert" date="Wed Sep 09 08:32:57 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7142" docExpressionCount="685" docLength="10010" length="1" offset="4967" starttimestamp="1599653169283" timestamp="1608549">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="2169" _type="Insert" date="Wed Sep 09 08:32:57 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7143" docExpressionCount="685" docLength="10011" length="1" offset="4968" starttimestamp="1599653169283" timestamp="1608639">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2171" _type="Insert" date="Wed Sep 09 08:32:58 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7144" docExpressionCount="685" docLength="10012" length="1" offset="4969" starttimestamp="1599653169283" timestamp="1608819">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2173" _type="Delete" date="Wed Sep 09 08:32:59 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7143" docExpressionCount="685" docLength="10011" endLine="105" length="1" offset="4969" startLine="105" starttimestamp="1599653169283" timestamp="1609899">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2175" _type="Delete" date="Wed Sep 09 08:32:59 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7142" docExpressionCount="685" docLength="10010" endLine="105" length="1" offset="4968" startLine="105" starttimestamp="1599653169283" timestamp="1610189">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2177" _type="Delete" date="Wed Sep 09 08:33:00 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7141" docExpressionCount="685" docLength="10009" endLine="105" length="1" offset="4967" startLine="105" starttimestamp="1599653169283" timestamp="1611079">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="2179" _type="Delete" date="Wed Sep 09 08:33:00 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7140" docExpressionCount="685" docLength="10008" endLine="105" length="1" offset="4966" startLine="105" starttimestamp="1599653169283" timestamp="1611589">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2181" _type="Delete" date="Wed Sep 09 08:33:00 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7139" docExpressionCount="685" docLength="10007" endLine="105" length="1" offset="4965" startLine="105" starttimestamp="1599653169283" timestamp="1611619">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2183" _type="Delete" date="Wed Sep 09 08:33:00 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7138" docExpressionCount="685" docLength="10006" endLine="105" length="1" offset="4964" startLine="105" starttimestamp="1599653169283" timestamp="1611649">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2185" _type="Delete" date="Wed Sep 09 08:33:00 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7137" docExpressionCount="685" docLength="10005" endLine="105" length="1" offset="4963" startLine="105" starttimestamp="1599653169283" timestamp="1611679">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2187" _type="Delete" date="Wed Sep 09 08:33:00 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7136" docExpressionCount="685" docLength="10004" endLine="105" length="1" offset="4962" startLine="105" starttimestamp="1599653169283" timestamp="1611709">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2189" _type="Delete" date="Wed Sep 09 08:33:01 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7135" docExpressionCount="685" docLength="10003" endLine="105" length="1" offset="4961" startLine="105" starttimestamp="1599653169283" timestamp="1611739">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2191" _type="Delete" date="Wed Sep 09 08:33:01 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7134" docExpressionCount="685" docLength="10002" endLine="105" length="1" offset="4960" startLine="105" starttimestamp="1599653169283" timestamp="1611769">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2193" _type="Delete" date="Wed Sep 09 08:33:01 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7133" docExpressionCount="685" docLength="10001" endLine="105" length="1" offset="4959" startLine="105" starttimestamp="1599653169283" timestamp="1612179">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="2164" _type="InsertStringCommand" date="Wed Sep 09 08:32:57 EDT 2020" starttimestamp="1599653169283" timestamp="1608419" timestamp2="1608419">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2166" _type="InsertStringCommand" date="Wed Sep 09 08:32:57 EDT 2020" starttimestamp="1599653169283" timestamp="1608499" timestamp2="1608499">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2168" _type="InsertStringCommand" date="Wed Sep 09 08:32:57 EDT 2020" starttimestamp="1599653169283" timestamp="1608549" timestamp2="1608549">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2170" _type="InsertStringCommand" date="Wed Sep 09 08:32:57 EDT 2020" starttimestamp="1599653169283" timestamp="1608649" timestamp2="1608649">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2172" _type="InsertStringCommand" date="Wed Sep 09 08:32:58 EDT 2020" starttimestamp="1599653169283" timestamp="1608819" timestamp2="1608819">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2174" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:59 EDT 2020" starttimestamp="1599653169283" timestamp="1609959" />
  <Command __id="2176" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:32:59 EDT 2020" starttimestamp="1599653169283" timestamp="1610189" />
  <Command __id="2178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:00 EDT 2020" starttimestamp="1599653169283" timestamp="1611079" />
  <Command __id="2180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:00 EDT 2020" starttimestamp="1599653169283" timestamp="1611589" />
  <Command __id="2182" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:00 EDT 2020" starttimestamp="1599653169283" timestamp="1611619" />
  <Command __id="2184" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:00 EDT 2020" starttimestamp="1599653169283" timestamp="1611649" />
  <Command __id="2186" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:00 EDT 2020" starttimestamp="1599653169283" timestamp="1611689" />
  <Command __id="2188" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:00 EDT 2020" starttimestamp="1599653169283" timestamp="1611709" />
  <Command __id="2190" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:01 EDT 2020" starttimestamp="1599653169283" timestamp="1611739" />
  <Command __id="2192" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:01 EDT 2020" starttimestamp="1599653169283" timestamp="1611769" />
  <Command __id="2194" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:01 EDT 2020" starttimestamp="1599653169283" timestamp="1612179" />
  <Command __id="2196" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:02 EDT 2020" starttimestamp="1599653169283" timestamp="1613309" />
  <Command __id="2198" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:02 EDT 2020" starttimestamp="1599653169283" timestamp="1613509" />
  <Command __id="2200" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:02 EDT 2020" starttimestamp="1599653169283" timestamp="1613709" />
  <Command __id="2202" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:03 EDT 2020" starttimestamp="1599653169283" timestamp="1613929" />
  <Command __id="2204" _type="InsertStringCommand" date="Wed Sep 09 08:33:03 EDT 2020" starttimestamp="1599653169283" timestamp="1614479" timestamp2="1614479">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2206" _type="InsertStringCommand" date="Wed Sep 09 08:33:03 EDT 2020" starttimestamp="1599653169283" timestamp="1614669" timestamp2="1614669">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2208" _type="InsertStringCommand" date="Wed Sep 09 08:33:04 EDT 2020" starttimestamp="1599653169283" timestamp="1615409" timestamp2="1615409">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="2210" _type="InsertStringCommand" date="Wed Sep 09 08:33:04 EDT 2020" starttimestamp="1599653169283" timestamp="1615549" timestamp2="1615549">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2212" _type="InsertStringCommand" date="Wed Sep 09 08:33:05 EDT 2020" starttimestamp="1599653169283" timestamp="1615769" timestamp2="1615769">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2214" _type="InsertStringCommand" date="Wed Sep 09 08:33:05 EDT 2020" starttimestamp="1599653169283" timestamp="1615939" timestamp2="1615939">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2216" _type="InsertStringCommand" date="Wed Sep 09 08:33:05 EDT 2020" starttimestamp="1599653169283" timestamp="1616089" timestamp2="1616089">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2218" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:05 EDT 2020" starttimestamp="1599653169283" timestamp="1616439" />
  <Command __id="2220" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:05 EDT 2020" starttimestamp="1599653169283" timestamp="1616609" />
  <Command __id="2222" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:06 EDT 2020" starttimestamp="1599653169283" timestamp="1616769" />
  <Command __id="2224" _type="InsertStringCommand" date="Wed Sep 09 08:33:06 EDT 2020" starttimestamp="1599653169283" timestamp="1617579" timestamp2="1617579">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2226" _type="InsertStringCommand" date="Wed Sep 09 08:33:06 EDT 2020" starttimestamp="1599653169283" timestamp="1617689" timestamp2="1617689">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2228" _type="InsertStringCommand" date="Wed Sep 09 08:33:07 EDT 2020" starttimestamp="1599653169283" timestamp="1617809" timestamp2="1617809">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2230" _type="InsertStringCommand" date="Wed Sep 09 08:33:07 EDT 2020" starttimestamp="1599653169283" timestamp="1617939" timestamp2="1617939">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2231" _type="MoveCaretCommand" caretOffset="2468" date="Wed Sep 09 08:33:09 EDT 2020" docOffset="4821" starttimestamp="1599653169283" timestamp="1619979" />
  <Command __id="2232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:33:09 EDT 2020" starttimestamp="1599653169283" timestamp="1620549" />
  <Command __id="2234" _type="InsertStringCommand" date="Wed Sep 09 08:33:10 EDT 2020" starttimestamp="1599653169283" timestamp="1620829" timestamp2="1620829">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="2235" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:33:10 EDT 2020" starttimestamp="1599653169283" timestamp="1621039" />
  <Command __id="2237" _type="InsertStringCommand" date="Wed Sep 09 08:33:11 EDT 2020" starttimestamp="1599653169283" timestamp="1621889" timestamp2="1621889">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="2238" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:33:11 EDT 2020" starttimestamp="1599653169283" timestamp="1622429" />
  <Command __id="2240" _type="InsertStringCommand" date="Wed Sep 09 08:33:11 EDT 2020" starttimestamp="1599653169283" timestamp="1622579" timestamp2="1622579">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2241" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:33:12 EDT 2020" starttimestamp="1599653169283" timestamp="1622759" />
  <Command __id="2242" _type="SelectTextCommand" caretOffset="2467" date="Wed Sep 09 08:33:14 EDT 2020" end="2471" start="2467" starttimestamp="1599653169283" timestamp="1625369" />
  <Command __id="2243" _type="CopyCommand" date="Wed Sep 09 08:33:15 EDT 2020" starttimestamp="1599653169283" timestamp="1625769" />
  <Command __id="2244" _type="MoveCaretCommand" caretOffset="2480" date="Wed Sep 09 08:33:16 EDT 2020" docOffset="4833" starttimestamp="1599653169283" timestamp="1626839" />
  <Command __id="2246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:16 EDT 2020" starttimestamp="1599653169283" timestamp="1627429" />
  <Command __id="2248" _type="PasteCommand" date="Wed Sep 09 08:33:16 EDT 2020" starttimestamp="1599653169283" timestamp="1627609" />
  <DocumentChange __id="2195" _type="Delete" date="Wed Sep 09 08:33:02 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7132" docExpressionCount="685" docLength="10000" endLine="105" length="1" offset="4958" startLine="105" starttimestamp="1599653169283" timestamp="1613299">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2197" _type="Delete" date="Wed Sep 09 08:33:02 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7131" docExpressionCount="685" docLength="9999" endLine="105" length="1" offset="4957" startLine="105" starttimestamp="1599653169283" timestamp="1613509">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2199" _type="Delete" date="Wed Sep 09 08:33:02 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7130" docExpressionCount="685" docLength="9998" endLine="105" length="1" offset="4956" startLine="105" starttimestamp="1599653169283" timestamp="1613709">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2201" _type="Delete" date="Wed Sep 09 08:33:03 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7129" docExpressionCount="685" docLength="9997" endLine="105" length="1" offset="4955" startLine="105" starttimestamp="1599653169283" timestamp="1613919">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2203" _type="Insert" date="Wed Sep 09 08:33:03 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7130" docExpressionCount="685" docLength="9998" length="1" offset="4955" starttimestamp="1599653169283" timestamp="1614469">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2205" _type="Insert" date="Wed Sep 09 08:33:03 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7131" docExpressionCount="685" docLength="9999" length="1" offset="4956" starttimestamp="1599653169283" timestamp="1614669">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2207" _type="Insert" date="Wed Sep 09 08:33:04 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7132" docExpressionCount="685" docLength="10000" length="1" offset="4957" starttimestamp="1599653169283" timestamp="1615409">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2209" _type="Insert" date="Wed Sep 09 08:33:04 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7133" docExpressionCount="685" docLength="10001" length="1" offset="4958" starttimestamp="1599653169283" timestamp="1615549">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2211" _type="Insert" date="Wed Sep 09 08:33:05 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7134" docExpressionCount="685" docLength="10002" length="1" offset="4959" starttimestamp="1599653169283" timestamp="1615769">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2213" _type="Insert" date="Wed Sep 09 08:33:05 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7135" docExpressionCount="685" docLength="10003" length="1" offset="4960" starttimestamp="1599653169283" timestamp="1615939">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2215" _type="Insert" date="Wed Sep 09 08:33:05 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7136" docExpressionCount="685" docLength="10004" length="1" offset="4961" starttimestamp="1599653169283" timestamp="1616089">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2217" _type="Delete" date="Wed Sep 09 08:33:05 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7135" docExpressionCount="685" docLength="10003" endLine="105" length="1" offset="4961" startLine="105" starttimestamp="1599653169283" timestamp="1616429">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2219" _type="Delete" date="Wed Sep 09 08:33:05 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7134" docExpressionCount="685" docLength="10002" endLine="105" length="1" offset="4960" startLine="105" starttimestamp="1599653169283" timestamp="1616609">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2221" _type="Delete" date="Wed Sep 09 08:33:06 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7133" docExpressionCount="685" docLength="10001" endLine="105" length="1" offset="4959" startLine="105" starttimestamp="1599653169283" timestamp="1616769">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2223" _type="Insert" date="Wed Sep 09 08:33:06 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7134" docExpressionCount="685" docLength="10002" length="1" offset="4959" starttimestamp="1599653169283" timestamp="1617579">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2225" _type="Insert" date="Wed Sep 09 08:33:06 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7135" docExpressionCount="685" docLength="10003" length="1" offset="4960" starttimestamp="1599653169283" timestamp="1617679">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2227" _type="Insert" date="Wed Sep 09 08:33:07 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7136" docExpressionCount="685" docLength="10004" length="1" offset="4961" starttimestamp="1599653169283" timestamp="1617799">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2229" _type="Insert" date="Wed Sep 09 08:33:07 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7137" docExpressionCount="685" docLength="10005" length="1" offset="4962" starttimestamp="1599653169283" timestamp="1617929">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2233" _type="Insert" date="Wed Sep 09 08:33:10 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7138" docExpressionCount="685" docLength="10006" length="1" offset="4820" starttimestamp="1599653169283" timestamp="1620819">
    <text><![CDATA[[]]></text>
  </DocumentChange>
  <DocumentChange __id="2236" _type="Insert" date="Wed Sep 09 08:33:11 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7139" docExpressionCount="685" docLength="10007" length="1" offset="4822" starttimestamp="1599653169283" timestamp="1621889">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <DocumentChange __id="2239" _type="Insert" date="Wed Sep 09 08:33:11 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7140" docExpressionCount="685" docLength="10008" length="1" offset="4822" starttimestamp="1599653169283" timestamp="1622579">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2245" _type="Delete" date="Wed Sep 09 08:33:16 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7139" docExpressionCount="685" docLength="10007" endLine="102" length="1" offset="4832" startLine="102" starttimestamp="1599653169283" timestamp="1627429">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="2247" _type="Insert" date="Wed Sep 09 08:33:16 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7143" docExpressionCount="685" docLength="10011" length="4" offset="4832" starttimestamp="1599653169283" timestamp="1627599">
    <text><![CDATA[[Dd]]]></text>
  </DocumentChange>
  <DocumentChange __id="2250" _type="Delete" date="Wed Sep 09 08:33:19 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7142" docExpressionCount="685" docLength="10010" endLine="102" length="1" offset="4855" startLine="102" starttimestamp="1599653169283" timestamp="1629769">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="2249" _type="MoveCaretCommand" caretOffset="2503" date="Wed Sep 09 08:33:18 EDT 2020" docOffset="4856" starttimestamp="1599653169283" timestamp="1629099" />
  <Command __id="2251" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:33:19 EDT 2020" starttimestamp="1599653169283" timestamp="1629769" />
  <Command __id="2253" _type="PasteCommand" date="Wed Sep 09 08:33:19 EDT 2020" starttimestamp="1599653169283" timestamp="1629989" />
  <Command __id="2254" _type="MoveCaretCommand" caretOffset="2491" date="Wed Sep 09 08:33:21 EDT 2020" docOffset="4844" starttimestamp="1599653169283" timestamp="1631859" />
  <Command __id="2256" _type="InsertStringCommand" date="Wed Sep 09 08:33:21 EDT 2020" starttimestamp="1599653169283" timestamp="1632619" timestamp2="1632619">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="2257" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:33:22 EDT 2020" starttimestamp="1599653169283" timestamp="1632939" />
  <Command __id="2259" _type="InsertStringCommand" date="Wed Sep 09 08:33:22 EDT 2020" starttimestamp="1599653169283" timestamp="1633209" timestamp2="1633209">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2261" _type="InsertStringCommand" date="Wed Sep 09 08:33:23 EDT 2020" starttimestamp="1599653169283" timestamp="1633839" timestamp2="1633839">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="2262" _type="MoveCaretCommand" caretOffset="2516" date="Wed Sep 09 08:33:25 EDT 2020" docOffset="4869" starttimestamp="1599653169283" timestamp="1635919" />
  <Command __id="2264" _type="InsertStringCommand" date="Wed Sep 09 08:33:25 EDT 2020" starttimestamp="1599653169283" timestamp="1636539" timestamp2="1636539">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="2265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:33:26 EDT 2020" starttimestamp="1599653169283" timestamp="1636829" />
  <Command __id="2267" _type="InsertStringCommand" date="Wed Sep 09 08:33:26 EDT 2020" starttimestamp="1599653169283" timestamp="1637039" timestamp2="1637039">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2269" _type="InsertStringCommand" date="Wed Sep 09 08:33:26 EDT 2020" starttimestamp="1599653169283" timestamp="1637399" timestamp2="1637399">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="2270" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:33:26 EDT 2020" starttimestamp="1599653169283" timestamp="1637589" />
  <Command __id="2271" _type="SelectTextCommand" caretOffset="2527" date="Wed Sep 09 08:33:35 EDT 2020" end="2527" start="2467" starttimestamp="1599653169283" timestamp="1645889" />
  <Command __id="2272" _type="CopyCommand" date="Wed Sep 09 08:33:35 EDT 2020" starttimestamp="1599653169283" timestamp="1646599" />
  <DocumentChange __id="2252" _type="Insert" date="Wed Sep 09 08:33:19 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7146" docExpressionCount="685" docLength="10014" length="4" offset="4855" starttimestamp="1599653169283" timestamp="1629969">
    <text><![CDATA[[Dd]]]></text>
  </DocumentChange>
  <DocumentChange __id="2255" _type="Insert" date="Wed Sep 09 08:33:21 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7147" docExpressionCount="685" docLength="10015" length="1" offset="4844" starttimestamp="1599653169283" timestamp="1632619">
    <text><![CDATA[[]]></text>
  </DocumentChange>
  <DocumentChange __id="2258" _type="Insert" date="Wed Sep 09 08:33:22 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7148" docExpressionCount="685" docLength="10016" length="1" offset="4846" starttimestamp="1599653169283" timestamp="1633199">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2260" _type="Insert" date="Wed Sep 09 08:33:23 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7149" docExpressionCount="685" docLength="10017" length="1" offset="4847" starttimestamp="1599653169283" timestamp="1633829">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <DocumentChange __id="2263" _type="Insert" date="Wed Sep 09 08:33:25 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7150" docExpressionCount="685" docLength="10018" length="1" offset="4869" starttimestamp="1599653169283" timestamp="1636529">
    <text><![CDATA[[]]></text>
  </DocumentChange>
  <DocumentChange __id="2266" _type="Insert" date="Wed Sep 09 08:33:26 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7151" docExpressionCount="685" docLength="10019" length="1" offset="4871" starttimestamp="1599653169283" timestamp="1637039">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2268" _type="Insert" date="Wed Sep 09 08:33:26 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7152" docExpressionCount="685" docLength="10020" length="1" offset="4872" starttimestamp="1599653169283" timestamp="1637389">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <Command __id="2273" _type="MoveCaretCommand" caretOffset="2625" date="Wed Sep 09 08:33:38 EDT 2020" docOffset="4978" starttimestamp="1599653169283" timestamp="1648719" />
  <DocumentChange __id="2274" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7153" docExpressionCount="685" docLength="10021" length="1" offset="4978" starttimestamp="1599653169283" timestamp="1651839">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2275" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1651849" timestamp2="1651849">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2276" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7154" docExpressionCount="685" docLength="10022" length="1" offset="4979" starttimestamp="1599653169283" timestamp="1651959">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="2277" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1651969" timestamp2="1651969">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="2278" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7155" docExpressionCount="685" docLength="10023" length="1" offset="4980" starttimestamp="1599653169283" timestamp="1652069">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="2279" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1652079" timestamp2="1652079">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="2280" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7156" docExpressionCount="685" docLength="10024" length="1" offset="4981" starttimestamp="1599653169283" timestamp="1652129">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2281" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1652139" timestamp2="1652139">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2282" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7157" docExpressionCount="685" docLength="10025" length="1" offset="4982" starttimestamp="1599653169283" timestamp="1652279">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="2283" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1652289" timestamp2="1652289">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="2284" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7158" docExpressionCount="685" docLength="10026" length="1" offset="4983" starttimestamp="1599653169283" timestamp="1652319">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="2285" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1652369" timestamp2="1652369">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2286" _type="Insert" date="Wed Sep 09 08:33:41 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7159" docExpressionCount="685" docLength="10027" length="1" offset="4984" starttimestamp="1599653169283" timestamp="1652469">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="2287" _type="InsertStringCommand" date="Wed Sep 09 08:33:41 EDT 2020" starttimestamp="1599653169283" timestamp="1652479" timestamp2="1652479">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2288" _type="Insert" date="Wed Sep 09 08:33:42 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7160" docExpressionCount="685" docLength="10028" length="1" offset="4985" starttimestamp="1599653169283" timestamp="1653209">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="2289" _type="InsertStringCommand" date="Wed Sep 09 08:33:42 EDT 2020" starttimestamp="1599653169283" timestamp="1653209" timestamp2="1653209">
    <data><![CDATA[:]]></data>
  </Command>
  <DocumentChange __id="2290" _type="Insert" date="Wed Sep 09 08:33:42 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7161" docExpressionCount="685" docLength="10029" length="1" offset="4986" starttimestamp="1599653169283" timestamp="1653479">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2291" _type="InsertStringCommand" date="Wed Sep 09 08:33:42 EDT 2020" starttimestamp="1599653169283" timestamp="1653489" timestamp2="1653489">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2293" _type="PasteCommand" date="Wed Sep 09 08:33:43 EDT 2020" starttimestamp="1599653169283" timestamp="1654129" />
  <DocumentChange __id="2292" _type="Insert" date="Wed Sep 09 08:33:43 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7221" docExpressionCount="685" docLength="10089" length="60" offset="4987" starttimestamp="1599653169283" timestamp="1654129">
    <text><![CDATA[[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred]]></text>
  </DocumentChange>
  <DocumentChange __id="2295" _type="Insert" date="Wed Sep 09 08:33:49 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7222" docExpressionCount="685" docLength="10090" length="1" offset="5049" starttimestamp="1599653169283" timestamp="1660219">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2294" _type="MoveCaretCommand" caretOffset="2696" date="Wed Sep 09 08:33:48 EDT 2020" docOffset="5049" starttimestamp="1599653169283" timestamp="1659459" />
  <Command __id="2296" _type="InsertStringCommand" date="Wed Sep 09 08:33:49 EDT 2020" starttimestamp="1599653169283" timestamp="1660229" timestamp2="1660229">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2298" _type="InsertStringCommand" date="Wed Sep 09 08:33:53 EDT 2020" starttimestamp="1599653169283" timestamp="1664349" timestamp2="1664349">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2300" _type="InsertStringCommand" date="Wed Sep 09 08:33:54 EDT 2020" starttimestamp="1599653169283" timestamp="1665099" timestamp2="1665099">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2302" _type="InsertStringCommand" date="Wed Sep 09 08:33:54 EDT 2020" starttimestamp="1599653169283" timestamp="1665279" timestamp2="1665279">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2304" _type="InsertStringCommand" date="Wed Sep 09 08:33:54 EDT 2020" starttimestamp="1599653169283" timestamp="1665659" timestamp2="1665659">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2306" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1665769" timestamp2="1665769">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2308" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1665869" timestamp2="1665869">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2310" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1665989" timestamp2="1665989">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2312" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1666159" timestamp2="1666159">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2314" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1666309" timestamp2="1666309">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2316" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1666449" timestamp2="1666449">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2318" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1666529" timestamp2="1666529">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2320" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1666609" timestamp2="1666609">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2322" _type="InsertStringCommand" date="Wed Sep 09 08:33:55 EDT 2020" starttimestamp="1599653169283" timestamp="1666699" timestamp2="1666699">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2324" _type="InsertStringCommand" date="Wed Sep 09 08:33:56 EDT 2020" starttimestamp="1599653169283" timestamp="1666779" timestamp2="1666779">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2325" _type="ShellCommand" date="Wed Sep 09 08:34:15 EDT 2020" starttimestamp="1599653169283" timestamp="1685849" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2326" _type="ShellCommand" date="Wed Sep 09 08:34:15 EDT 2020" starttimestamp="1599653169283" timestamp="1685979" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2329" _type="MoveCaretCommand" caretOffset="2814" date="Wed Sep 09 08:34:19 EDT 2020" docOffset="5167" starttimestamp="1599653169283" timestamp="1689719" />
  <Command __id="2330" _type="MoveCaretCommand" caretOffset="2741" date="Wed Sep 09 08:34:20 EDT 2020" docOffset="5094" starttimestamp="1599653169283" timestamp="1691319" />
  <DocumentChange __id="2297" _type="Insert" date="Wed Sep 09 08:33:53 EDT 2020" docASTNodeCount="923" docActiveCodeLength="7229" docExpressionCount="685" docLength="10097" length="7" offset="5050" starttimestamp="1599653169283" timestamp="1664339">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="2299" _type="Insert" date="Wed Sep 09 08:33:54 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7230" docExpressionCount="686" docLength="10098" length="1" offset="5057" starttimestamp="1599653169283" timestamp="1665099">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2301" _type="Insert" date="Wed Sep 09 08:33:54 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7231" docExpressionCount="686" docLength="10099" length="1" offset="5058" starttimestamp="1599653169283" timestamp="1665269">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2303" _type="Insert" date="Wed Sep 09 08:33:54 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7232" docExpressionCount="686" docLength="10100" length="1" offset="5059" starttimestamp="1599653169283" timestamp="1665649">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2305" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7233" docExpressionCount="686" docLength="10101" length="1" offset="5060" starttimestamp="1599653169283" timestamp="1665759">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2307" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7234" docExpressionCount="686" docLength="10102" length="1" offset="5061" starttimestamp="1599653169283" timestamp="1665859">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2309" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="924" docActiveCodeLength="7235" docExpressionCount="685" docLength="10103" length="1" offset="5062" starttimestamp="1599653169283" timestamp="1665979">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2311" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="924" docActiveCodeLength="7236" docExpressionCount="685" docLength="10104" length="1" offset="5063" starttimestamp="1599653169283" timestamp="1666149">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2313" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7237" docExpressionCount="686" docLength="10105" length="1" offset="5064" starttimestamp="1599653169283" timestamp="1666299">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2315" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7238" docExpressionCount="686" docLength="10106" length="1" offset="5065" starttimestamp="1599653169283" timestamp="1666439">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2317" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7239" docExpressionCount="686" docLength="10107" length="1" offset="5066" starttimestamp="1599653169283" timestamp="1666519">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2319" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7240" docExpressionCount="686" docLength="10108" length="1" offset="5067" starttimestamp="1599653169283" timestamp="1666599">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2321" _type="Insert" date="Wed Sep 09 08:33:55 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7241" docExpressionCount="686" docLength="10109" length="1" offset="5068" starttimestamp="1599653169283" timestamp="1666689">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2323" _type="Insert" date="Wed Sep 09 08:33:56 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7242" docExpressionCount="686" docLength="10110" length="1" offset="5069" starttimestamp="1599653169283" timestamp="1666769">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2327" _type="Insert" date="Wed Sep 09 08:34:15 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7251" docExpressionCount="686" docLength="10119" length="9" offset="3146" starttimestamp="1599653169283" timestamp="1686009">
    <text><![CDATA[Throwable]]></text>
  </DocumentChange>
  <DocumentChange __id="2328" _type="Insert" date="Wed Sep 09 08:34:15 EDT 2020" docASTNodeCount="926" docActiveCodeLength="7259" docExpressionCount="687" docLength="10127" length="8" offset="3146" starttimestamp="1599653169283" timestamp="1686019">
    <text><![CDATA[ throws ]]></text>
  </DocumentChange>
  <Command __id="2331" _type="MoveCaretCommand" caretOffset="2747" date="Wed Sep 09 08:34:21 EDT 2020" docOffset="5100" starttimestamp="1599653169283" timestamp="1692339" />
  <Command __id="2333" _type="InsertStringCommand" date="Wed Sep 09 08:34:23 EDT 2020" starttimestamp="1599653169283" timestamp="1694279" timestamp2="1694279">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2332" _type="Insert" date="Wed Sep 09 08:34:23 EDT 2020" docASTNodeCount="926" docActiveCodeLength="7264" docExpressionCount="687" docLength="10132" length="5" offset="5100" starttimestamp="1599653169283" timestamp="1694269">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="2334" _type="MoveCaretCommand" caretOffset="2747" date="Wed Sep 09 08:34:27 EDT 2020" docOffset="5100" starttimestamp="1599653169283" timestamp="1697829" />
  <DocumentChange __id="2335" _type="Delete" date="Wed Sep 09 08:34:28 EDT 2020" docASTNodeCount="926" docActiveCodeLength="7263" docExpressionCount="687" docLength="10131" endLine="108" length="1" offset="5099" startLine="108" starttimestamp="1599653169283" timestamp="1698889">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <Command __id="2336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:28 EDT 2020" starttimestamp="1599653169283" timestamp="1698899" />
  <Command __id="2337" _type="MoveCaretCommand" caretOffset="2449" date="Wed Sep 09 08:34:28 EDT 2020" docOffset="4802" starttimestamp="1599653169283" timestamp="1699059" />
  <Command __id="2339" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:28 EDT 2020" starttimestamp="1599653169283" timestamp="1699129" />
  <Command __id="2340" _type="MoveCaretCommand" caretOffset="2745" date="Wed Sep 09 08:34:29 EDT 2020" docOffset="5098" starttimestamp="1599653169283" timestamp="1700549" />
  <Command __id="2341" _type="MoveCaretCommand" caretOffset="2745" date="Wed Sep 09 08:34:36 EDT 2020" docOffset="5098" starttimestamp="1599653169283" timestamp="1707579" />
  <Command __id="2343" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:37 EDT 2020" starttimestamp="1599653169283" timestamp="1708389" />
  <Command __id="2345" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:37 EDT 2020" starttimestamp="1599653169283" timestamp="1708599" />
  <Command __id="2347" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:38 EDT 2020" starttimestamp="1599653169283" timestamp="1709040" />
  <Command __id="2349" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:38 EDT 2020" starttimestamp="1599653169283" timestamp="1709399" />
  <Command __id="2350" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:34:39 EDT 2020" starttimestamp="1599653169283" timestamp="1709949" />
  <Command __id="2352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:39 EDT 2020" starttimestamp="1599653169283" timestamp="1710519" />
  <Command __id="2354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:40 EDT 2020" starttimestamp="1599653169283" timestamp="1710719" />
  <Command __id="2356" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:40 EDT 2020" starttimestamp="1599653169283" timestamp="1711439" />
  <Command __id="2358" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:34:41 EDT 2020" starttimestamp="1599653169283" timestamp="1711749" />
  <Command __id="2359" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:34:41 EDT 2020" starttimestamp="1599653169283" timestamp="1712059" />
  <Command __id="2360" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:34:41 EDT 2020" starttimestamp="1599653169283" timestamp="1712309" />
  <Command __id="2362" _type="InsertStringCommand" date="Wed Sep 09 08:34:42 EDT 2020" starttimestamp="1599653169283" timestamp="1713099" timestamp2="1713099">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2364" _type="InsertStringCommand" date="Wed Sep 09 08:34:42 EDT 2020" starttimestamp="1599653169283" timestamp="1713189" timestamp2="1713189">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2366" _type="InsertStringCommand" date="Wed Sep 09 08:34:42 EDT 2020" starttimestamp="1599653169283" timestamp="1713589" timestamp2="1713589">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="2338" _type="Delete" date="Wed Sep 09 08:34:28 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7262" docExpressionCount="687" docLength="10130" endLine="101" length="1" offset="4801" startLine="101" starttimestamp="1599653169283" timestamp="1699119">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="2342" _type="Delete" date="Wed Sep 09 08:34:37 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7261" docExpressionCount="687" docLength="10129" endLine="108" length="1" offset="5097" startLine="108" starttimestamp="1599653169283" timestamp="1708389">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2344" _type="Delete" date="Wed Sep 09 08:34:37 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7260" docExpressionCount="687" docLength="10128" endLine="108" length="1" offset="5096" startLine="108" starttimestamp="1599653169283" timestamp="1708599">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2346" _type="Delete" date="Wed Sep 09 08:34:38 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7259" docExpressionCount="687" docLength="10127" endLine="108" length="1" offset="5095" startLine="108" starttimestamp="1599653169283" timestamp="1709040">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2348" _type="Delete" date="Wed Sep 09 08:34:38 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7257" docExpressionCount="687" docLength="10125" endLine="108" length="2" offset="5093" startLine="107" starttimestamp="1599653169283" timestamp="1709379">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2351" _type="Delete" date="Wed Sep 09 08:34:39 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7256" docExpressionCount="687" docLength="10124" endLine="108" length="1" offset="5097" startLine="108" starttimestamp="1599653169283" timestamp="1710509">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2353" _type="Delete" date="Wed Sep 09 08:34:39 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7255" docExpressionCount="687" docLength="10123" endLine="108" length="1" offset="5096" startLine="108" starttimestamp="1599653169283" timestamp="1710709">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2355" _type="Delete" date="Wed Sep 09 08:34:40 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7254" docExpressionCount="687" docLength="10122" endLine="108" length="1" offset="5095" startLine="108" starttimestamp="1599653169283" timestamp="1711439">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2357" _type="Delete" date="Wed Sep 09 08:34:41 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7252" docExpressionCount="687" docLength="10120" endLine="108" length="2" offset="5093" startLine="107" starttimestamp="1599653169283" timestamp="1711729">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2361" _type="Insert" date="Wed Sep 09 08:34:42 EDT 2020" docASTNodeCount="927" docActiveCodeLength="7253" docExpressionCount="688" docLength="10121" length="1" offset="5160" starttimestamp="1599653169283" timestamp="1713089">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2363" _type="Insert" date="Wed Sep 09 08:34:42 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7254" docExpressionCount="687" docLength="10122" length="1" offset="5161" starttimestamp="1599653169283" timestamp="1713179">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2365" _type="Insert" date="Wed Sep 09 08:34:42 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7256" docExpressionCount="687" docLength="10124" length="2" offset="5162" starttimestamp="1599653169283" timestamp="1713579">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="2371" _type="Insert" date="Wed Sep 09 08:34:50 EDT 2020" docASTNodeCount="928" docActiveCodeLength="7274" docExpressionCount="688" docLength="10142" length="18" offset="5163" starttimestamp="1599653169283" timestamp="1721259">
    <text><![CDATA[anOutputComponents]]></text>
  </DocumentChange>
  <DocumentChange __id="2373" _type="Insert" date="Wed Sep 09 08:34:51 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7275" docExpressionCount="687" docLength="10143" length="1" offset="5181" starttimestamp="1599653169283" timestamp="1722069">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2376" _type="Insert" date="Wed Sep 09 08:34:51 EDT 2020" docASTNodeCount="930" docActiveCodeLength="7276" docExpressionCount="690" docLength="10144" length="1" offset="5182" starttimestamp="1599653169283" timestamp="1722259">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2377" _type="Insert" date="Wed Sep 09 08:34:51 EDT 2020" docASTNodeCount="930" docActiveCodeLength="7277" docExpressionCount="690" docLength="10145" length="1" offset="5183" starttimestamp="1599653169283" timestamp="1722359">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2378" _type="Insert" date="Wed Sep 09 08:34:51 EDT 2020" docASTNodeCount="930" docActiveCodeLength="7278" docExpressionCount="690" docLength="10146" length="1" offset="5184" starttimestamp="1599653169283" timestamp="1722459">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2380" _type="Replace" date="Wed Sep 09 08:34:52 EDT 2020" docASTNodeCount="930" docActiveCodeLength="7281" docExpressionCount="690" docLength="10149" endLine="109" insertionLength="6" int_docASTNodeCount="925" int_docActiveCodeLength="7275" int_docExpressionCount="687" int_docLength="10143" length="3" offset="5182" startLine="109" starttimestamp="1599653169283" timestamp="1722789">
    <deletedText><![CDATA[len]]></deletedText>
    <insertedText><![CDATA[length]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2382" _type="Insert" date="Wed Sep 09 08:34:52 EDT 2020" docASTNodeCount="919" docActiveCodeLength="7282" docExpressionCount="681" docLength="10150" length="1" offset="5188" starttimestamp="1599653169283" timestamp="1723239">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="2384" _type="Insert" date="Wed Sep 09 08:34:53 EDT 2020" docASTNodeCount="925" docActiveCodeLength="7283" docExpressionCount="687" docLength="10151" length="1" offset="5189" starttimestamp="1599653169283" timestamp="1723829">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2386" _type="Insert" date="Wed Sep 09 08:34:54 EDT 2020" docASTNodeCount="932" docActiveCodeLength="7284" docExpressionCount="692" docLength="10152" length="1" offset="5190" starttimestamp="1599653169283" timestamp="1724909">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="2389" _type="Insert" date="Wed Sep 09 08:34:55 EDT 2020" docASTNodeCount="932" docActiveCodeLength="7286" docExpressionCount="692" docLength="10154" length="2" offset="5192" starttimestamp="1599653169283" timestamp="1725969">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="2391" _type="Insert" date="Wed Sep 09 08:34:55 EDT 2020" docASTNodeCount="932" docActiveCodeLength="7298" docExpressionCount="692" docLength="10166" length="12" offset="5194" starttimestamp="1599653169283" timestamp="1726169">
    <text><![CDATA[
				
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="2393" _type="Insert" date="Wed Sep 09 08:34:59 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7299" docExpressionCount="693" docLength="10167" length="1" offset="5200" starttimestamp="1599653169283" timestamp="1730059">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="2395" _type="Insert" date="Wed Sep 09 08:34:59 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7300" docExpressionCount="693" docLength="10168" length="1" offset="5201" starttimestamp="1599653169283" timestamp="1730289">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2397" _type="Insert" date="Wed Sep 09 08:34:59 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7301" docExpressionCount="693" docLength="10169" length="1" offset="5202" starttimestamp="1599653169283" timestamp="1730349">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2399" _type="Insert" date="Wed Sep 09 08:34:59 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7302" docExpressionCount="693" docLength="10170" length="1" offset="5203" starttimestamp="1599653169283" timestamp="1730509">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2401" _type="Insert" date="Wed Sep 09 08:34:59 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7303" docExpressionCount="693" docLength="10171" length="1" offset="5204" starttimestamp="1599653169283" timestamp="1730619">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2403" _type="Insert" date="Wed Sep 09 08:35:00 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7304" docExpressionCount="693" docLength="10172" length="1" offset="5205" starttimestamp="1599653169283" timestamp="1730729">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="2367" _type="MoveCaretCommand" caretOffset="2760" date="Wed Sep 09 08:34:48 EDT 2020" docOffset="5113" starttimestamp="1599653169283" timestamp="1719409" />
  <Command __id="2368" _type="SelectTextCommand" caretOffset="2773" date="Wed Sep 09 08:34:48 EDT 2020" end="2773" start="2755" starttimestamp="1599653169283" timestamp="1719549" />
  <Command __id="2369" _type="CopyCommand" date="Wed Sep 09 08:34:49 EDT 2020" starttimestamp="1599653169283" timestamp="1720179" />
  <Command __id="2370" _type="MoveCaretCommand" caretOffset="2810" date="Wed Sep 09 08:34:50 EDT 2020" docOffset="5163" starttimestamp="1599653169283" timestamp="1720949" />
  <Command __id="2372" _type="PasteCommand" date="Wed Sep 09 08:34:50 EDT 2020" starttimestamp="1599653169283" timestamp="1721279" />
  <Command __id="2374" _type="InsertStringCommand" date="Wed Sep 09 08:34:51 EDT 2020" starttimestamp="1599653169283" timestamp="1722069" timestamp2="1722069">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2375" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Sep 09 08:34:51 EDT 2020" start_end="START" starttimestamp="1599653169283" timestamp="1722069" />
  <Command __id="2379" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:34:52 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="1722779" />
  <Command __id="2381" _type="InsertStringCommand" date="Wed Sep 09 08:34:52 EDT 2020" starttimestamp="1599653169283" timestamp="1722799" timestamp2="1722799">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2383" _type="InsertStringCommand" date="Wed Sep 09 08:34:52 EDT 2020" starttimestamp="1599653169283" timestamp="1723249" timestamp2="1723249">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2385" _type="InsertStringCommand" date="Wed Sep 09 08:34:53 EDT 2020" starttimestamp="1599653169283" timestamp="1723829" timestamp2="1723829">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2387" _type="InsertStringCommand" date="Wed Sep 09 08:34:54 EDT 2020" starttimestamp="1599653169283" timestamp="1724909" timestamp2="1724909">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="2388" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:34:54 EDT 2020" starttimestamp="1599653169283" timestamp="1725299" />
  <Command __id="2390" _type="InsertStringCommand" date="Wed Sep 09 08:34:55 EDT 2020" starttimestamp="1599653169283" timestamp="1725979" timestamp2="1725979">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2392" _type="InsertStringCommand" date="Wed Sep 09 08:34:55 EDT 2020" starttimestamp="1599653169283" timestamp="1726179" timestamp2="1726179">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2394" _type="InsertStringCommand" date="Wed Sep 09 08:34:59 EDT 2020" starttimestamp="1599653169283" timestamp="1730069" timestamp2="1730069">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2396" _type="InsertStringCommand" date="Wed Sep 09 08:34:59 EDT 2020" starttimestamp="1599653169283" timestamp="1730299" timestamp2="1730299">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2398" _type="InsertStringCommand" date="Wed Sep 09 08:34:59 EDT 2020" starttimestamp="1599653169283" timestamp="1730359" timestamp2="1730359">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2400" _type="InsertStringCommand" date="Wed Sep 09 08:34:59 EDT 2020" starttimestamp="1599653169283" timestamp="1730519" timestamp2="1730519">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2402" _type="InsertStringCommand" date="Wed Sep 09 08:34:59 EDT 2020" starttimestamp="1599653169283" timestamp="1730629" timestamp2="1730629">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2404" _type="InsertStringCommand" date="Wed Sep 09 08:35:00 EDT 2020" starttimestamp="1599653169283" timestamp="1730729" timestamp2="1730729">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2406" _type="SelectTextCommand" caretOffset="958" date="Wed Sep 09 08:35:01 EDT 2020" end="958" start="898" starttimestamp="1599653169283" timestamp="1732629" />
  <Command __id="2407" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:35:07 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1737809" />
  <Command __id="2408" _type="CopyCommand" date="Wed Sep 09 08:35:07 EDT 2020" starttimestamp="1599653169283" timestamp="1738289" />
  <Command __id="2410" _type="MoveCaretCommand" caretOffset="2853" date="Wed Sep 09 08:35:08 EDT 2020" docOffset="5206" starttimestamp="1599653169283" timestamp="1739069" />
  <Command __id="2411" _type="SelectTextCommand" caretOffset="2848" date="Wed Sep 09 08:35:09 EDT 2020" end="2848" start="2847" starttimestamp="1599653169283" timestamp="1740409" />
  <Command __id="2412" _type="MoveCaretCommand" caretOffset="2839" date="Wed Sep 09 08:35:10 EDT 2020" docOffset="5192" starttimestamp="1599653169283" timestamp="1741139" />
  <Command __id="2413" _type="SelectTextCommand" caretOffset="2859" date="Wed Sep 09 08:35:11 EDT 2020" end="2859" start="2839" starttimestamp="1599653169283" timestamp="1742119" />
  <Command __id="2415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:11 EDT 2020" starttimestamp="1599653169283" timestamp="1742689" />
  <Command __id="2417" _type="InsertStringCommand" date="Wed Sep 09 08:35:12 EDT 2020" starttimestamp="1599653169283" timestamp="1743089" timestamp2="1743089">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2419" _type="PasteCommand" date="Wed Sep 09 08:35:13 EDT 2020" starttimestamp="1599653169283" timestamp="1743819" />
  <Command __id="2420" _type="MoveCaretCommand" caretOffset="2899" date="Wed Sep 09 08:35:14 EDT 2020" docOffset="5252" starttimestamp="1599653169283" timestamp="1745399" />
  <Command __id="2422" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:15 EDT 2020" starttimestamp="1599653169283" timestamp="1746299" />
  <Command __id="2424" _type="InsertStringCommand" date="Wed Sep 09 08:35:15 EDT 2020" starttimestamp="1599653169283" timestamp="1746399" timestamp2="1746399">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="2405" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:35:01 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1732539">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2409" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:35:08 EDT 2020" docASTNodeCount="934" docActiveCodeLength="7304" docExpressionCount="693" docLength="10172" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1738979">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod)"), Diff(INSERT," throws Throwable"), Diff(EQUAL," {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) "), Diff(DELETE,"{"), Diff(EQUAL,"¶				if(anOutputLines[i].matches(""), Diff(DELETE,"D"), Diff(INSERT,"[Dd]"), Diff(EQUAL,"istance,"), Diff(DELETE,"D"), Diff(INSERT,"[Dd]"), Diff(EQUAL,"uration,"), Diff(DELETE,"E"), Diff(INSERT,"[Ee]"), Diff(EQUAL,"xhalation,"), Diff(DELETE,"D"), Diff(INSERT,"[Dd]"), Diff(EQUAL,"erived,"), Diff(DELETE,"I"), Diff(INSERT,"[Ii]"), Diff(EQUAL,"nferred\n*?"))¶					continue;¶				else {¶					"), Diff(INSERT,"System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;"), Diff(EQUAL,"¶				}¶			"), Diff(DELETE,"}¶			"), Diff(EQUAL,"String [] anOutputComponents=anOutputLines[i].split(",");¶			"), Diff(INSERT,"if(anOutputComponents.length!=5) {¶				System¶			}"), Diff(EQUAL,"¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5) {
				System
			}
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="2414" _type="Delete" date="Wed Sep 09 08:35:11 EDT 2020" docASTNodeCount="932" docActiveCodeLength="7284" docExpressionCount="692" docLength="10152" endLine="111" length="20" offset="5192" startLine="109" starttimestamp="1599653169283" timestamp="1742679">
    <text><![CDATA[ {
				System
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="2416" _type="Insert" date="Wed Sep 09 08:35:12 EDT 2020" docASTNodeCount="932" docActiveCodeLength="7290" docExpressionCount="692" docLength="10158" length="6" offset="5192" starttimestamp="1599653169283" timestamp="1743069">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="2418" _type="Replace" date="Wed Sep 09 08:35:13 EDT 2020" docASTNodeCount="936" docActiveCodeLength="7376" docExpressionCount="695" docLength="10244" endLine="110" insertionLength="90" int_docASTNodeCount="932" int_docActiveCodeLength="7286" int_docExpressionCount="692" int_docLength="10154" length="4" offset="5194" startLine="110" starttimestamp="1599653169283" timestamp="1743719">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				throw new NotGradableException("Output does not have 4 command separated components");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2421" _type="Delete" date="Wed Sep 09 08:35:15 EDT 2020" docASTNodeCount="936" docActiveCodeLength="7375" docExpressionCount="695" docLength="10243" endLine="110" length="1" offset="5251" startLine="110" starttimestamp="1599653169283" timestamp="1746289">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <DocumentChange __id="2423" _type="Insert" date="Wed Sep 09 08:35:15 EDT 2020" docASTNodeCount="936" docActiveCodeLength="7376" docExpressionCount="695" docLength="10244" length="1" offset="5251" starttimestamp="1599653169283" timestamp="1746399">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <Command __id="2425" _type="MoveCaretCommand" caretOffset="2936" date="Wed Sep 09 08:35:18 EDT 2020" docOffset="5289" starttimestamp="1599653169283" timestamp="1749419" />
  <DocumentChange __id="2426" _type="Insert" date="Wed Sep 09 08:35:19 EDT 2020" docASTNodeCount="936" docActiveCodeLength="7381" docExpressionCount="695" docLength="10249" length="5" offset="5289" starttimestamp="1599653169283" timestamp="1750689">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="2427" _type="InsertStringCommand" date="Wed Sep 09 08:35:20 EDT 2020" starttimestamp="1599653169283" timestamp="1750719" timestamp2="1750719">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2429" _type="InsertStringCommand" date="Wed Sep 09 08:35:20 EDT 2020" starttimestamp="1599653169283" timestamp="1750939" timestamp2="1750939">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2430" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:35:20 EDT 2020" starttimestamp="1599653169283" timestamp="1751349" />
  <Command __id="2431" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:35:21 EDT 2020" starttimestamp="1599653169283" timestamp="1751819" />
  <Command __id="2432" _type="MoveCaretCommand" caretOffset="2936" date="Wed Sep 09 08:35:23 EDT 2020" docOffset="5289" starttimestamp="1599653169283" timestamp="1754459" />
  <Command __id="2433" _type="SelectTextCommand" caretOffset="2941" date="Wed Sep 09 08:35:24 EDT 2020" end="2941" start="2936" starttimestamp="1599653169283" timestamp="1754789" />
  <Command __id="2434" _type="MoveCaretCommand" caretOffset="2941" date="Wed Sep 09 08:35:24 EDT 2020" docOffset="5294" starttimestamp="1599653169283" timestamp="1755089" />
  <DocumentChange __id="2428" _type="Insert" date="Wed Sep 09 08:35:20 EDT 2020" docASTNodeCount="936" docActiveCodeLength="7386" docExpressionCount="695" docLength="10254" length="5" offset="5294" starttimestamp="1599653169283" timestamp="1750919">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="2435" _type="MoveCaretCommand" caretOffset="2389" date="Wed Sep 09 08:35:31 EDT 2020" docOffset="4742" starttimestamp="1599653169283" timestamp="1762429" />
  <DocumentChange __id="2436" _type="Insert" date="Wed Sep 09 08:35:33 EDT 2020" docASTNodeCount="936" docActiveCodeLength="7390" docExpressionCount="695" docLength="10258" length="4" offset="4742" starttimestamp="1599653169283" timestamp="1763789">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="2437" _type="InsertStringCommand" date="Wed Sep 09 08:35:33 EDT 2020" starttimestamp="1599653169283" timestamp="1763799" timestamp2="1763799">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2438" _type="Insert" date="Wed Sep 09 08:35:33 EDT 2020" docASTNodeCount="938" docActiveCodeLength="7391" docExpressionCount="696" docLength="10259" length="1" offset="4746" starttimestamp="1599653169283" timestamp="1764679">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="2439" _type="InsertStringCommand" date="Wed Sep 09 08:35:33 EDT 2020" starttimestamp="1599653169283" timestamp="1764689" timestamp2="1764689">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="2440" _type="Insert" date="Wed Sep 09 08:35:34 EDT 2020" docASTNodeCount="938" docActiveCodeLength="7392" docExpressionCount="696" docLength="10260" length="1" offset="4747" starttimestamp="1599653169283" timestamp="1764869">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="2441" _type="InsertStringCommand" date="Wed Sep 09 08:35:34 EDT 2020" starttimestamp="1599653169283" timestamp="1764879" timestamp2="1764879">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="2442" _type="Insert" date="Wed Sep 09 08:35:34 EDT 2020" docASTNodeCount="938" docActiveCodeLength="7393" docExpressionCount="696" docLength="10261" length="1" offset="4748" starttimestamp="1599653169283" timestamp="1765039">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="2443" _type="InsertStringCommand" date="Wed Sep 09 08:35:34 EDT 2020" starttimestamp="1599653169283" timestamp="1765089" timestamp2="1765089">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="2444" _type="Insert" date="Wed Sep 09 08:35:34 EDT 2020" docASTNodeCount="938" docActiveCodeLength="7394" docExpressionCount="696" docLength="10262" length="1" offset="4749" starttimestamp="1599653169283" timestamp="1765209">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="2445" _type="InsertStringCommand" date="Wed Sep 09 08:35:34 EDT 2020" starttimestamp="1599653169283" timestamp="1765209" timestamp2="1765209">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="2446" _type="Insert" date="Wed Sep 09 08:35:34 EDT 2020" docASTNodeCount="938" docActiveCodeLength="7395" docExpressionCount="696" docLength="10263" length="1" offset="4750" starttimestamp="1599653169283" timestamp="1765319">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2447" _type="InsertStringCommand" date="Wed Sep 09 08:35:34 EDT 2020" starttimestamp="1599653169283" timestamp="1765329" timestamp2="1765329">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2448" _type="Insert" date="Wed Sep 09 08:35:34 EDT 2020" docASTNodeCount="938" docActiveCodeLength="7396" docExpressionCount="696" docLength="10264" length="1" offset="4751" starttimestamp="1599653169283" timestamp="1765449">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="2449" _type="InsertStringCommand" date="Wed Sep 09 08:35:34 EDT 2020" starttimestamp="1599653169283" timestamp="1765449" timestamp2="1765449">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2450" _type="Insert" date="Wed Sep 09 08:35:34 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7397" docExpressionCount="696" docLength="10265" length="1" offset="4752" starttimestamp="1599653169283" timestamp="1765529">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="2451" _type="InsertStringCommand" date="Wed Sep 09 08:35:34 EDT 2020" starttimestamp="1599653169283" timestamp="1765529" timestamp2="1765529">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="2452" _type="Insert" date="Wed Sep 09 08:35:35 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7398" docExpressionCount="696" docLength="10266" length="1" offset="4753" starttimestamp="1599653169283" timestamp="1766029">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2453" _type="InsertStringCommand" date="Wed Sep 09 08:35:35 EDT 2020" starttimestamp="1599653169283" timestamp="1766039" timestamp2="1766039">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2454" _type="Insert" date="Wed Sep 09 08:35:36 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7399" docExpressionCount="696" docLength="10267" length="1" offset="4754" starttimestamp="1599653169283" timestamp="1767139">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="2455" _type="InsertStringCommand" date="Wed Sep 09 08:35:36 EDT 2020" starttimestamp="1599653169283" timestamp="1767149" timestamp2="1767149">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="2456" _type="Insert" date="Wed Sep 09 08:35:36 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7400" docExpressionCount="696" docLength="10268" length="1" offset="4755" starttimestamp="1599653169283" timestamp="1767269">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="2457" _type="InsertStringCommand" date="Wed Sep 09 08:35:36 EDT 2020" starttimestamp="1599653169283" timestamp="1767279" timestamp2="1767279">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="2458" _type="Insert" date="Wed Sep 09 08:35:36 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7401" docExpressionCount="696" docLength="10269" length="1" offset="4756" starttimestamp="1599653169283" timestamp="1767429">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="2459" _type="InsertStringCommand" date="Wed Sep 09 08:35:36 EDT 2020" starttimestamp="1599653169283" timestamp="1767469" timestamp2="1767469">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="2460" _type="Insert" date="Wed Sep 09 08:35:36 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7402" docExpressionCount="696" docLength="10270" length="1" offset="4757" starttimestamp="1599653169283" timestamp="1767599">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="2461" _type="InsertStringCommand" date="Wed Sep 09 08:35:36 EDT 2020" starttimestamp="1599653169283" timestamp="1767669" timestamp2="1767669">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="2462" _type="Delete" date="Wed Sep 09 08:35:37 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7401" docExpressionCount="696" docLength="10269" endLine="100" length="1" offset="4757" startLine="100" starttimestamp="1599653169283" timestamp="1767959">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="2463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:37 EDT 2020" starttimestamp="1599653169283" timestamp="1767959" />
  <DocumentChange __id="2464" _type="Delete" date="Wed Sep 09 08:35:37 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7400" docExpressionCount="696" docLength="10268" endLine="100" length="1" offset="4756" startLine="100" starttimestamp="1599653169283" timestamp="1768329">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="2465" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:37 EDT 2020" starttimestamp="1599653169283" timestamp="1768339" />
  <DocumentChange __id="2466" _type="Delete" date="Wed Sep 09 08:35:37 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7399" docExpressionCount="696" docLength="10267" endLine="100" length="1" offset="4755" startLine="100" starttimestamp="1599653169283" timestamp="1768489">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="2467" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:37 EDT 2020" starttimestamp="1599653169283" timestamp="1768499" />
  <DocumentChange __id="2468" _type="Delete" date="Wed Sep 09 08:35:37 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7398" docExpressionCount="696" docLength="10266" endLine="100" length="1" offset="4754" startLine="100" starttimestamp="1599653169283" timestamp="1768669">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="2469" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:37 EDT 2020" starttimestamp="1599653169283" timestamp="1768669" />
  <DocumentChange __id="2470" _type="Insert" date="Wed Sep 09 08:35:38 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7399" docExpressionCount="696" docLength="10267" length="1" offset="4754" starttimestamp="1599653169283" timestamp="1768789">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="2471" _type="InsertStringCommand" date="Wed Sep 09 08:35:38 EDT 2020" starttimestamp="1599653169283" timestamp="1768799" timestamp2="1768799">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="2472" _type="Insert" date="Wed Sep 09 08:35:38 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7400" docExpressionCount="696" docLength="10268" length="1" offset="4755" starttimestamp="1599653169283" timestamp="1768989">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2473" _type="InsertStringCommand" date="Wed Sep 09 08:35:38 EDT 2020" starttimestamp="1599653169283" timestamp="1768999" timestamp2="1768999">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2474" _type="Insert" date="Wed Sep 09 08:35:38 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7401" docExpressionCount="696" docLength="10269" length="1" offset="4756" starttimestamp="1599653169283" timestamp="1769069">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2475" _type="InsertStringCommand" date="Wed Sep 09 08:35:38 EDT 2020" starttimestamp="1599653169283" timestamp="1769089" timestamp2="1769089">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2476" _type="Insert" date="Wed Sep 09 08:35:38 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7402" docExpressionCount="696" docLength="10270" length="1" offset="4757" starttimestamp="1599653169283" timestamp="1769259">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="2477" _type="InsertStringCommand" date="Wed Sep 09 08:35:38 EDT 2020" starttimestamp="1599653169283" timestamp="1769279" timestamp2="1769279">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="2478" _type="Insert" date="Wed Sep 09 08:35:38 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7403" docExpressionCount="696" docLength="10271" length="1" offset="4758" starttimestamp="1599653169283" timestamp="1769429">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="2479" _type="InsertStringCommand" date="Wed Sep 09 08:35:38 EDT 2020" starttimestamp="1599653169283" timestamp="1769439" timestamp2="1769439">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="2480" _type="Insert" date="Wed Sep 09 08:35:38 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7404" docExpressionCount="696" docLength="10272" length="1" offset="4759" starttimestamp="1599653169283" timestamp="1769519">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2481" _type="InsertStringCommand" date="Wed Sep 09 08:35:38 EDT 2020" starttimestamp="1599653169283" timestamp="1769529" timestamp2="1769529">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="2482" _type="Insert" date="Wed Sep 09 08:35:39 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7405" docExpressionCount="696" docLength="10273" length="1" offset="4760" starttimestamp="1599653169283" timestamp="1770169">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="2483" _type="InsertStringCommand" date="Wed Sep 09 08:35:39 EDT 2020" starttimestamp="1599653169283" timestamp="1770179" timestamp2="1770179">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="2484" _type="Insert" date="Wed Sep 09 08:35:40 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7406" docExpressionCount="697" docLength="10274" length="1" offset="4761" starttimestamp="1599653169283" timestamp="1771019">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="2485" _type="InsertStringCommand" date="Wed Sep 09 08:35:40 EDT 2020" starttimestamp="1599653169283" timestamp="1771039" timestamp2="1771039">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2486" _type="Insert" date="Wed Sep 09 08:35:40 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7407" docExpressionCount="697" docLength="10275" length="1" offset="4762" starttimestamp="1599653169283" timestamp="1771159">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2487" _type="InsertStringCommand" date="Wed Sep 09 08:35:40 EDT 2020" starttimestamp="1599653169283" timestamp="1771179" timestamp2="1771179">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2488" _type="Insert" date="Wed Sep 09 08:35:40 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7408" docExpressionCount="697" docLength="10276" length="1" offset="4763" starttimestamp="1599653169283" timestamp="1771259">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="2489" _type="InsertStringCommand" date="Wed Sep 09 08:35:40 EDT 2020" starttimestamp="1599653169283" timestamp="1771279" timestamp2="1771279">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="2490" _type="Insert" date="Wed Sep 09 08:35:40 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7409" docExpressionCount="697" docLength="10277" length="1" offset="4764" starttimestamp="1599653169283" timestamp="1771339">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2491" _type="InsertStringCommand" date="Wed Sep 09 08:35:40 EDT 2020" starttimestamp="1599653169283" timestamp="1771349" timestamp2="1771349">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2493" _type="InsertStringCommand" date="Wed Sep 09 08:35:40 EDT 2020" starttimestamp="1599653169283" timestamp="1771489" timestamp2="1771489">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2494" _type="MoveCaretCommand" caretOffset="2999" date="Wed Sep 09 08:35:43 EDT 2020" docOffset="5352" starttimestamp="1599653169283" timestamp="1773719" />
  <Command __id="2495" _type="SelectTextCommand" caretOffset="3001" date="Wed Sep 09 08:35:43 EDT 2020" end="3001" start="2997" starttimestamp="1599653169283" timestamp="1773879" />
  <Command __id="2497" _type="InsertStringCommand" date="Wed Sep 09 08:35:43 EDT 2020" starttimestamp="1599653169283" timestamp="1773969" timestamp2="1773969">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="2499" _type="InsertStringCommand" date="Wed Sep 09 08:35:43 EDT 2020" starttimestamp="1599653169283" timestamp="1774099" timestamp2="1774099">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2501" _type="InsertStringCommand" date="Wed Sep 09 08:35:43 EDT 2020" starttimestamp="1599653169283" timestamp="1774199" timestamp2="1774199">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2503" _type="InsertStringCommand" date="Wed Sep 09 08:35:43 EDT 2020" starttimestamp="1599653169283" timestamp="1774659" timestamp2="1774659">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2505" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:35:44 EDT 2020" starttimestamp="1599653169283" timestamp="1774979" />
  <Command __id="2507" _type="InsertStringCommand" date="Wed Sep 09 08:35:44 EDT 2020" starttimestamp="1599653169283" timestamp="1775169" timestamp2="1775169">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2509" _type="InsertStringCommand" date="Wed Sep 09 08:35:44 EDT 2020" starttimestamp="1599653169283" timestamp="1775269" timestamp2="1775269">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2511" _type="InsertStringCommand" date="Wed Sep 09 08:35:44 EDT 2020" starttimestamp="1599653169283" timestamp="1775369" timestamp2="1775369">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2512" _type="MoveCaretCommand" caretOffset="2960" date="Wed Sep 09 08:35:46 EDT 2020" docOffset="5313" starttimestamp="1599653169283" timestamp="1776769" />
  <DocumentChange __id="2492" _type="Insert" date="Wed Sep 09 08:35:40 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7410" docExpressionCount="697" docLength="10278" length="1" offset="4765" starttimestamp="1599653169283" timestamp="1771469">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2496" _type="Replace" date="Wed Sep 09 08:35:43 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7407" docExpressionCount="697" docLength="10275" endLine="118" insertionLength="1" int_docASTNodeCount="940" int_docActiveCodeLength="7406" int_docExpressionCount="696" int_docLength="10274" length="4" offset="5350" startLine="118" starttimestamp="1599653169283" timestamp="1773959">
    <deletedText><![CDATA[true]]></deletedText>
    <insertedText><![CDATA[v]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2498" _type="Insert" date="Wed Sep 09 08:35:43 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7408" docExpressionCount="697" docLength="10276" length="1" offset="5351" starttimestamp="1599653169283" timestamp="1774099">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2500" _type="Insert" date="Wed Sep 09 08:35:43 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7409" docExpressionCount="697" docLength="10277" length="1" offset="5352" starttimestamp="1599653169283" timestamp="1774189">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2502" _type="Insert" date="Wed Sep 09 08:35:43 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7410" docExpressionCount="697" docLength="10278" length="1" offset="5353" starttimestamp="1599653169283" timestamp="1774649">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2504" _type="Delete" date="Wed Sep 09 08:35:44 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7409" docExpressionCount="697" docLength="10277" endLine="118" length="1" offset="5353" startLine="118" starttimestamp="1599653169283" timestamp="1774979">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2506" _type="Insert" date="Wed Sep 09 08:35:44 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7410" docExpressionCount="697" docLength="10278" length="1" offset="5353" starttimestamp="1599653169283" timestamp="1775169">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2508" _type="Insert" date="Wed Sep 09 08:35:44 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7411" docExpressionCount="697" docLength="10279" length="1" offset="5354" starttimestamp="1599653169283" timestamp="1775259">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2510" _type="Insert" date="Wed Sep 09 08:35:44 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7412" docExpressionCount="697" docLength="10280" length="1" offset="5355" starttimestamp="1599653169283" timestamp="1775359">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2513" _type="MoveCaretCommand" caretOffset="2965" date="Wed Sep 09 08:35:47 EDT 2020" docOffset="5318" starttimestamp="1599653169283" timestamp="1778169" />
  <DocumentChange __id="2514" _type="Insert" date="Wed Sep 09 08:35:51 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7413" docExpressionCount="698" docLength="10281" length="1" offset="5318" starttimestamp="1599653169283" timestamp="1782529">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="2515" _type="InsertStringCommand" date="Wed Sep 09 08:35:51 EDT 2020" starttimestamp="1599653169283" timestamp="1782539" timestamp2="1782539">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="2516" _type="Insert" date="Wed Sep 09 08:35:51 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7414" docExpressionCount="698" docLength="10282" length="1" offset="5319" starttimestamp="1599653169283" timestamp="1782689">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2517" _type="InsertStringCommand" date="Wed Sep 09 08:35:51 EDT 2020" starttimestamp="1599653169283" timestamp="1782699" timestamp2="1782699">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2518" _type="Insert" date="Wed Sep 09 08:35:52 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7415" docExpressionCount="698" docLength="10283" length="1" offset="5320" starttimestamp="1599653169283" timestamp="1782769">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2519" _type="InsertStringCommand" date="Wed Sep 09 08:35:52 EDT 2020" starttimestamp="1599653169283" timestamp="1782779" timestamp2="1782779">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2520" _type="Insert" date="Wed Sep 09 08:35:52 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7416" docExpressionCount="698" docLength="10284" length="1" offset="5321" starttimestamp="1599653169283" timestamp="1783579">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="2521" _type="InsertStringCommand" date="Wed Sep 09 08:35:52 EDT 2020" starttimestamp="1599653169283" timestamp="1783619" timestamp2="1783619">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="2522" _type="Insert" date="Wed Sep 09 08:35:53 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7417" docExpressionCount="698" docLength="10285" length="1" offset="5322" starttimestamp="1599653169283" timestamp="1783979">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="2523" _type="InsertStringCommand" date="Wed Sep 09 08:35:53 EDT 2020" starttimestamp="1599653169283" timestamp="1783999" timestamp2="1783999">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="2524" _type="Insert" date="Wed Sep 09 08:35:53 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7418" docExpressionCount="698" docLength="10286" length="1" offset="5323" starttimestamp="1599653169283" timestamp="1784089">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2525" _type="InsertStringCommand" date="Wed Sep 09 08:35:53 EDT 2020" starttimestamp="1599653169283" timestamp="1784099" timestamp2="1784099">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="2526" _type="Insert" date="Wed Sep 09 08:35:55 EDT 2020" docASTNodeCount="941" docActiveCodeLength="7419" docExpressionCount="697" docLength="10287" length="1" offset="5324" starttimestamp="1599653169283" timestamp="1785769">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="2527" _type="InsertStringCommand" date="Wed Sep 09 08:35:55 EDT 2020" starttimestamp="1599653169283" timestamp="1785779" timestamp2="1785779">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="2528" _type="Insert" date="Wed Sep 09 08:35:56 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7420" docExpressionCount="700" docLength="10288" length="1" offset="5325" starttimestamp="1599653169283" timestamp="1786739">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="2529" _type="InsertStringCommand" date="Wed Sep 09 08:35:56 EDT 2020" starttimestamp="1599653169283" timestamp="1786749" timestamp2="1786749">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="2530" _type="Insert" date="Wed Sep 09 08:35:56 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7421" docExpressionCount="700" docLength="10289" length="1" offset="5326" starttimestamp="1599653169283" timestamp="1786989">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2531" _type="InsertStringCommand" date="Wed Sep 09 08:35:56 EDT 2020" starttimestamp="1599653169283" timestamp="1786999" timestamp2="1786999">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2532" _type="Insert" date="Wed Sep 09 08:35:56 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7422" docExpressionCount="700" docLength="10290" length="1" offset="5327" starttimestamp="1599653169283" timestamp="1787089">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2533" _type="InsertStringCommand" date="Wed Sep 09 08:35:56 EDT 2020" starttimestamp="1599653169283" timestamp="1787099" timestamp2="1787099">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2534" _type="Insert" date="Wed Sep 09 08:35:57 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7423" docExpressionCount="700" docLength="10291" length="1" offset="5328" starttimestamp="1599653169283" timestamp="1787989">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="2535" _type="InsertStringCommand" date="Wed Sep 09 08:35:57 EDT 2020" starttimestamp="1599653169283" timestamp="1787989" timestamp2="1787989">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="2536" _type="Insert" date="Wed Sep 09 08:35:57 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7424" docExpressionCount="700" docLength="10292" length="1" offset="5329" starttimestamp="1599653169283" timestamp="1788129">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="2537" _type="InsertStringCommand" date="Wed Sep 09 08:35:57 EDT 2020" starttimestamp="1599653169283" timestamp="1788129" timestamp2="1788129">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="2538" _type="Insert" date="Wed Sep 09 08:35:57 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7425" docExpressionCount="700" docLength="10293" length="1" offset="5330" starttimestamp="1599653169283" timestamp="1788269">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2539" _type="InsertStringCommand" date="Wed Sep 09 08:35:57 EDT 2020" starttimestamp="1599653169283" timestamp="1788279" timestamp2="1788279">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="2540" _type="Insert" date="Wed Sep 09 08:35:58 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7426" docExpressionCount="700" docLength="10294" length="1" offset="5331" starttimestamp="1599653169283" timestamp="1789129">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <Command __id="2541" _type="InsertStringCommand" date="Wed Sep 09 08:35:58 EDT 2020" starttimestamp="1599653169283" timestamp="1789139" timestamp2="1789139">
    <data><![CDATA[&]]></data>
  </Command>
  <DocumentChange __id="2542" _type="Insert" date="Wed Sep 09 08:35:58 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7427" docExpressionCount="700" docLength="10295" length="1" offset="5332" starttimestamp="1599653169283" timestamp="1789299">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <Command __id="2543" _type="InsertStringCommand" date="Wed Sep 09 08:35:58 EDT 2020" starttimestamp="1599653169283" timestamp="1789309" timestamp2="1789309">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="2544" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:36:08 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1799109">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2545" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:36:08 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1799199" />
  <Command __id="2546" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:08 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7427" docExpressionCount="700" docLength="10295" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1859449">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		"), Diff(INSERT,"boolean verify=true;¶		"), Diff(EQUAL,"for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)"), Diff(DELETE," {"), Diff(EQUAL,"¶				"), Diff(DELETE,"System¶			}"), Diff(INSERT,"throw new NotGradableException("Output does not have 5 command separated components");¶			¶			verify=verify&&"), Diff(EQUAL,"¶			¶		}¶		¶		¶	    return "), Diff(DELETE,"true"), Diff(INSERT,"verify"), Diff(EQUAL,";¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		boolean verify=true;
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5)
				throw new NotGradableException("Output does not have 5 command separated components");
			
			verify=verify&&
			
		}
		
		
	    return verify;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="2547" _type="MoveCaretCommand" caretOffset="2980" date="Wed Sep 09 08:37:08 EDT 2020" docOffset="5333" starttimestamp="1599653169283" timestamp="1859539" />
  <Command __id="2548" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:15 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1866069">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2549" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:37:15 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1866149" />
  <Command __id="2550" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:16 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7427" docExpressionCount="700" docLength="10295" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1867459">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		boolean verify=true;¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			verify=verify&&¶			¶		}¶		¶		¶	    return verify;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2551" _type="MoveCaretCommand" caretOffset="2980" date="Wed Sep 09 08:37:16 EDT 2020" docOffset="5333" starttimestamp="1599653169283" timestamp="1867529" />
  <DocumentChange __id="2552" _type="Insert" date="Wed Sep 09 08:37:17 EDT 2020" docASTNodeCount="947" docActiveCodeLength="7428" docExpressionCount="702" docLength="10296" length="1" offset="5333" starttimestamp="1599653169283" timestamp="1868519">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="2553" _type="InsertStringCommand" date="Wed Sep 09 08:37:17 EDT 2020" starttimestamp="1599653169283" timestamp="1868529" timestamp2="1868529">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="2554" _type="Insert" date="Wed Sep 09 08:37:17 EDT 2020" docASTNodeCount="947" docActiveCodeLength="7429" docExpressionCount="702" docLength="10297" length="1" offset="5334" starttimestamp="1599653169283" timestamp="1868699">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2555" _type="InsertStringCommand" date="Wed Sep 09 08:37:17 EDT 2020" starttimestamp="1599653169283" timestamp="1868709" timestamp2="1868709">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2556" _type="Insert" date="Wed Sep 09 08:37:18 EDT 2020" docASTNodeCount="947" docActiveCodeLength="7430" docExpressionCount="702" docLength="10298" length="1" offset="5335" starttimestamp="1599653169283" timestamp="1868799">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2557" _type="InsertStringCommand" date="Wed Sep 09 08:37:18 EDT 2020" starttimestamp="1599653169283" timestamp="1868819" timestamp2="1868819">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2558" _type="Insert" date="Wed Sep 09 08:37:18 EDT 2020" docASTNodeCount="947" docActiveCodeLength="7431" docExpressionCount="702" docLength="10299" length="1" offset="5336" starttimestamp="1599653169283" timestamp="1868999">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="2559" _type="InsertStringCommand" date="Wed Sep 09 08:37:18 EDT 2020" starttimestamp="1599653169283" timestamp="1869019" timestamp2="1869019">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="2560" _type="Insert" date="Wed Sep 09 08:37:18 EDT 2020" docASTNodeCount="947" docActiveCodeLength="7432" docExpressionCount="702" docLength="10300" length="1" offset="5337" starttimestamp="1599653169283" timestamp="1869169">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="2561" _type="InsertStringCommand" date="Wed Sep 09 08:37:18 EDT 2020" starttimestamp="1599653169283" timestamp="1869179" timestamp2="1869179">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="2562" _type="Insert" date="Wed Sep 09 08:37:18 EDT 2020" docASTNodeCount="947" docActiveCodeLength="7433" docExpressionCount="702" docLength="10301" length="1" offset="5338" starttimestamp="1599653169283" timestamp="1869239">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2563" _type="InsertStringCommand" date="Wed Sep 09 08:37:18 EDT 2020" starttimestamp="1599653169283" timestamp="1869249" timestamp2="1869249">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="2564" _type="Insert" date="Wed Sep 09 08:37:19 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7435" docExpressionCount="703" docLength="10303" length="2" offset="5339" starttimestamp="1599653169283" timestamp="1869939">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="2565" _type="InsertStringCommand" date="Wed Sep 09 08:37:19 EDT 2020" starttimestamp="1599653169283" timestamp="1869949" timestamp2="1869949">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2566" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:21 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1872129">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2567" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:37:21 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1872199" />
  <Command __id="2569" _type="MoveCaretCommand" caretOffset="2987" date="Wed Sep 09 08:37:23 EDT 2020" docOffset="5340" starttimestamp="1599653169283" timestamp="1874019" />
  <Command __id="2570" _type="MoveCaretCommand" caretOffset="2407" date="Wed Sep 09 08:37:24 EDT 2020" docOffset="4760" starttimestamp="1599653169283" timestamp="1875639" />
  <Command __id="2572" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:37:25 EDT 2020" starttimestamp="1599653169283" timestamp="1876189" />
  <Command __id="2574" _type="InsertStringCommand" date="Wed Sep 09 08:37:25 EDT 2020" starttimestamp="1599653169283" timestamp="1876419" timestamp2="1876419">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2576" _type="InsertStringCommand" date="Wed Sep 09 08:37:25 EDT 2020" starttimestamp="1599653169283" timestamp="1876499" timestamp2="1876499">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2578" _type="InsertStringCommand" date="Wed Sep 09 08:37:25 EDT 2020" starttimestamp="1599653169283" timestamp="1876639" timestamp2="1876639">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2579" _type="MoveCaretCommand" caretOffset="2973" date="Wed Sep 09 08:37:27 EDT 2020" docOffset="5326" starttimestamp="1599653169283" timestamp="1878099" />
  <Command __id="2581" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:37:27 EDT 2020" starttimestamp="1599653169283" timestamp="1878649" />
  <Command __id="2583" _type="InsertStringCommand" date="Wed Sep 09 08:37:28 EDT 2020" starttimestamp="1599653169283" timestamp="1878909" timestamp2="1878909">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2585" _type="InsertStringCommand" date="Wed Sep 09 08:37:28 EDT 2020" starttimestamp="1599653169283" timestamp="1878999" timestamp2="1878999">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2587" _type="InsertStringCommand" date="Wed Sep 09 08:37:28 EDT 2020" starttimestamp="1599653169283" timestamp="1879149" timestamp2="1879149">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2588" _type="MoveCaretCommand" caretOffset="2981" date="Wed Sep 09 08:37:29 EDT 2020" docOffset="5334" starttimestamp="1599653169283" timestamp="1880129" />
  <Command __id="2590" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Sep 09 08:37:30 EDT 2020" starttimestamp="1599653169283" timestamp="1880769" />
  <Command __id="2592" _type="InsertStringCommand" date="Wed Sep 09 08:37:30 EDT 2020" starttimestamp="1599653169283" timestamp="1881089" timestamp2="1881089">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2594" _type="InsertStringCommand" date="Wed Sep 09 08:37:30 EDT 2020" starttimestamp="1599653169283" timestamp="1881229" timestamp2="1881229">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2596" _type="InsertStringCommand" date="Wed Sep 09 08:37:30 EDT 2020" starttimestamp="1599653169283" timestamp="1881379" timestamp2="1881379">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2597" _type="SelectTextCommand" caretOffset="3032" date="Wed Sep 09 08:37:32 EDT 2020" end="3033" start="3032" starttimestamp="1599653169283" timestamp="1882889" />
  <Command __id="2598" _type="MoveCaretCommand" caretOffset="3032" date="Wed Sep 09 08:37:32 EDT 2020" docOffset="5385" starttimestamp="1599653169283" timestamp="1883239" />
  <Command __id="2600" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:37:33 EDT 2020" starttimestamp="1599653169283" timestamp="1883859" />
  <Command __id="2602" _type="InsertStringCommand" date="Wed Sep 09 08:37:33 EDT 2020" starttimestamp="1599653169283" timestamp="1884099" timestamp2="1884099">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2604" _type="InsertStringCommand" date="Wed Sep 09 08:37:33 EDT 2020" starttimestamp="1599653169283" timestamp="1884199" timestamp2="1884199">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2606" _type="InsertStringCommand" date="Wed Sep 09 08:37:33 EDT 2020" starttimestamp="1599653169283" timestamp="1884349" timestamp2="1884349">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2568" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:23 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7435" docExpressionCount="703" docLength="10303" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1873949">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		boolean verify=true;¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			verify=verify&&"), Diff(INSERT,"verify()"), Diff(EQUAL,"¶			¶		}¶		¶		¶	    return verify;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		boolean verify=true;
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5)
				throw new NotGradableException("Output does not have 5 command separated components");
			
			verify=verify&&verify()
			
		}
		
		
	    return verify;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="2571" _type="Delete" date="Wed Sep 09 08:37:25 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7434" docExpressionCount="703" docLength="10302" endLine="100" length="1" offset="4759" startLine="100" starttimestamp="1599653169283" timestamp="1876179">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2573" _type="Insert" date="Wed Sep 09 08:37:25 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7435" docExpressionCount="703" docLength="10303" length="1" offset="4759" starttimestamp="1599653169283" timestamp="1876409">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2575" _type="Insert" date="Wed Sep 09 08:37:25 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7436" docExpressionCount="703" docLength="10304" length="1" offset="4760" starttimestamp="1599653169283" timestamp="1876489">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2577" _type="Insert" date="Wed Sep 09 08:37:25 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7437" docExpressionCount="703" docLength="10305" length="1" offset="4761" starttimestamp="1599653169283" timestamp="1876629">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2580" _type="Delete" date="Wed Sep 09 08:37:27 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7436" docExpressionCount="703" docLength="10304" endLine="113" length="1" offset="5325" startLine="113" starttimestamp="1599653169283" timestamp="1878649">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2582" _type="Insert" date="Wed Sep 09 08:37:28 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7437" docExpressionCount="703" docLength="10305" length="1" offset="5325" starttimestamp="1599653169283" timestamp="1878899">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2584" _type="Insert" date="Wed Sep 09 08:37:28 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7438" docExpressionCount="703" docLength="10306" length="1" offset="5326" starttimestamp="1599653169283" timestamp="1878989">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2586" _type="Insert" date="Wed Sep 09 08:37:28 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7439" docExpressionCount="703" docLength="10307" length="1" offset="5327" starttimestamp="1599653169283" timestamp="1879139">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2589" _type="Delete" date="Wed Sep 09 08:37:30 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7438" docExpressionCount="703" docLength="10306" endLine="113" length="1" offset="5334" startLine="113" starttimestamp="1599653169283" timestamp="1880749">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2591" _type="Insert" date="Wed Sep 09 08:37:30 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7439" docExpressionCount="703" docLength="10307" length="1" offset="5334" starttimestamp="1599653169283" timestamp="1881089">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2593" _type="Insert" date="Wed Sep 09 08:37:30 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7440" docExpressionCount="703" docLength="10308" length="1" offset="5335" starttimestamp="1599653169283" timestamp="1881219">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2595" _type="Insert" date="Wed Sep 09 08:37:30 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7441" docExpressionCount="703" docLength="10309" length="1" offset="5336" starttimestamp="1599653169283" timestamp="1881369">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2599" _type="Delete" date="Wed Sep 09 08:37:33 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7440" docExpressionCount="703" docLength="10308" endLine="118" length="1" offset="5384" startLine="118" starttimestamp="1599653169283" timestamp="1883849">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2601" _type="Insert" date="Wed Sep 09 08:37:33 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7441" docExpressionCount="703" docLength="10309" length="1" offset="5384" starttimestamp="1599653169283" timestamp="1884089">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2603" _type="Insert" date="Wed Sep 09 08:37:33 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7442" docExpressionCount="703" docLength="10310" length="1" offset="5385" starttimestamp="1599653169283" timestamp="1884189">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2605" _type="Insert" date="Wed Sep 09 08:37:33 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7443" docExpressionCount="703" docLength="10311" length="1" offset="5386" starttimestamp="1599653169283" timestamp="1884339">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="2607" _type="MoveCaretCommand" caretOffset="2994" date="Wed Sep 09 08:37:35 EDT 2020" docOffset="5347" starttimestamp="1599653169283" timestamp="1886149" />
  <Command __id="2608" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:36 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1887249">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2609" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:37:36 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1887399" />
  <Command __id="2610" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:39 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7443" docExpressionCount="703" docLength="10311" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1890009">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		boolean verif"), Diff(DELETE,"y"), Diff(INSERT,"ied"), Diff(EQUAL,"=true;¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			verif"), Diff(DELETE,"y"), Diff(INSERT,"ied"), Diff(EQUAL,"=verif"), Diff(DELETE,"y"), Diff(INSERT,"ied"), Diff(EQUAL,"&&verify()¶			¶		}¶		¶		¶	    return verif"), Diff(DELETE,"y"), Diff(INSERT,"ied"), Diff(EQUAL,";¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		boolean verified=true;
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5)
				throw new NotGradableException("Output does not have 5 command separated components");
			
			verified=verified&&verify()
			
		}
		
		
	    return verified;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="2611" _type="MoveCaretCommand" caretOffset="2994" date="Wed Sep 09 08:37:39 EDT 2020" docOffset="5347" starttimestamp="1599653169283" timestamp="1890129" />
  <Command __id="2612" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:47 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1898179">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2613" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:37:47 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1898289" />
  <Command __id="2615" _type="MoveCaretCommand" caretOffset="2994" date="Wed Sep 09 08:37:53 EDT 2020" docOffset="5347" starttimestamp="1599653169283" timestamp="1903749" />
  <Command __id="2616" _type="MoveCaretCommand" caretOffset="3028" date="Wed Sep 09 08:37:54 EDT 2020" docOffset="5381" starttimestamp="1599653169283" timestamp="1905149" />
  <Command __id="2617" _type="SelectTextCommand" caretOffset="3034" date="Wed Sep 09 08:37:54 EDT 2020" end="3034" start="3026" starttimestamp="1599653169283" timestamp="1905499" />
  <Command __id="2619" _type="InsertStringCommand" date="Wed Sep 09 08:37:55 EDT 2020" starttimestamp="1599653169283" timestamp="1906399" timestamp2="1906399">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2621" _type="InsertStringCommand" date="Wed Sep 09 08:37:55 EDT 2020" starttimestamp="1599653169283" timestamp="1906559" timestamp2="1906559">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2623" _type="InsertStringCommand" date="Wed Sep 09 08:37:55 EDT 2020" starttimestamp="1599653169283" timestamp="1906649" timestamp2="1906649">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2625" _type="InsertStringCommand" date="Wed Sep 09 08:37:56 EDT 2020" starttimestamp="1599653169283" timestamp="1906719" timestamp2="1906719">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2626" _type="SelectTextCommand" caretOffset="2391" date="Wed Sep 09 08:37:59 EDT 2020" end="2415" start="2391" starttimestamp="1599653169283" timestamp="1909779" />
  <Command __id="2628" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:37:59 EDT 2020" starttimestamp="1599653169283" timestamp="1910439" />
  <Command __id="2630" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:37:59 EDT 2020" starttimestamp="1599653169283" timestamp="1910609" />
  <Command __id="2614" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:37:52 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7443" docExpressionCount="703" docLength="10311" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1903659">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		boolean verified=true;¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			verified=verified&&verify()¶			¶		}¶		¶		¶	    return verified;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2618" _type="Replace" date="Wed Sep 09 08:37:55 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7436" docExpressionCount="703" docLength="10304" endLine="118" insertionLength="1" int_docASTNodeCount="947" int_docActiveCodeLength="7435" int_docExpressionCount="702" int_docLength="10303" length="8" offset="5379" startLine="118" starttimestamp="1599653169283" timestamp="1906389">
    <deletedText><![CDATA[verified]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2620" _type="Insert" date="Wed Sep 09 08:37:55 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7437" docExpressionCount="703" docLength="10305" length="1" offset="5380" starttimestamp="1599653169283" timestamp="1906549">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2622" _type="Insert" date="Wed Sep 09 08:37:55 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7438" docExpressionCount="703" docLength="10306" length="1" offset="5381" starttimestamp="1599653169283" timestamp="1906639">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2624" _type="Insert" date="Wed Sep 09 08:37:55 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7439" docExpressionCount="703" docLength="10307" length="1" offset="5382" starttimestamp="1599653169283" timestamp="1906709">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2627" _type="Delete" date="Wed Sep 09 08:37:59 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7415" docExpressionCount="701" docLength="10283" endLine="100" length="24" offset="4744" startLine="100" starttimestamp="1599653169283" timestamp="1910439">
    <text><![CDATA[		boolean verified=true;]]></text>
  </DocumentChange>
  <DocumentChange __id="2629" _type="Delete" date="Wed Sep 09 08:37:59 EDT 2020" docASTNodeCount="943" docActiveCodeLength="7413" docExpressionCount="701" docLength="10281" endLine="100" length="2" offset="4742" startLine="99" starttimestamp="1599653169283" timestamp="1910599">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2632" _type="Replace" date="Wed Sep 09 08:38:03 EDT 2020" docASTNodeCount="939" docActiveCodeLength="7395" docExpressionCount="697" docLength="10263" endLine="112" insertionLength="1" int_docASTNodeCount="939" int_docActiveCodeLength="7394" int_docExpressionCount="697" int_docLength="10262" length="19" offset="5294" startLine="112" starttimestamp="1599653169283" timestamp="1914629">
    <deletedText><![CDATA[verified=verified&&]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2634" _type="Insert" date="Wed Sep 09 08:38:04 EDT 2020" docASTNodeCount="939" docActiveCodeLength="7396" docExpressionCount="697" docLength="10264" length="1" offset="5295" starttimestamp="1599653169283" timestamp="1914719">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2636" _type="Insert" date="Wed Sep 09 08:38:04 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7397" docExpressionCount="697" docLength="10265" length="1" offset="5296" starttimestamp="1599653169283" timestamp="1915009">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <Command __id="2638" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:38:07 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1918599">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2631" _type="SelectTextCommand" caretOffset="2941" date="Wed Sep 09 08:38:03 EDT 2020" end="2960" start="2941" starttimestamp="1599653169283" timestamp="1914029" />
  <Command __id="2633" _type="InsertStringCommand" date="Wed Sep 09 08:38:03 EDT 2020" starttimestamp="1599653169283" timestamp="1914639" timestamp2="1914639">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2635" _type="InsertStringCommand" date="Wed Sep 09 08:38:04 EDT 2020" starttimestamp="1599653169283" timestamp="1914729" timestamp2="1914729">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2637" _type="InsertStringCommand" date="Wed Sep 09 08:38:04 EDT 2020" starttimestamp="1599653169283" timestamp="1915019" timestamp2="1915019">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2639" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:38:08 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="1918759" />
  <Command __id="2641" _type="MoveCaretCommand" caretOffset="2944" date="Wed Sep 09 08:38:12 EDT 2020" docOffset="5297" starttimestamp="1599653169283" timestamp="1923279" />
  <Command __id="2642" _type="MoveCaretCommand" caretOffset="2951" date="Wed Sep 09 08:38:13 EDT 2020" docOffset="5304" starttimestamp="1599653169283" timestamp="1924289" />
  <Command __id="2640" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:38:12 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7397" docExpressionCount="697" docLength="10265" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="1923169">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		"), Diff(DELETE,"boolean verified=true;¶		"), Diff(EQUAL,"for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			"), Diff(DELETE,"verified=verified&&"), Diff(INSERT,"if("), Diff(EQUAL,"verify()¶			¶		}¶		¶		¶	    return "), Diff(DELETE,"verified"), Diff(INSERT,"true"), Diff(EQUAL,";¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5)
				throw new NotGradableException("Output does not have 5 command separated components");
			
			if(verify()
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="2645" _type="Insert" date="Wed Sep 09 08:38:22 EDT 2020" docASTNodeCount="940" docActiveCodeLength="7402" docExpressionCount="697" docLength="10270" length="5" offset="5289" starttimestamp="1599653169283" timestamp="1933089">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="2643" _type="MoveCaretCommand" caretOffset="2946" date="Wed Sep 09 08:38:21 EDT 2020" docOffset="5299" starttimestamp="1599653169283" timestamp="1932049" />
  <Command __id="2644" _type="MoveCaretCommand" caretOffset="2936" date="Wed Sep 09 08:38:21 EDT 2020" docOffset="5289" starttimestamp="1599653169283" timestamp="1932399" />
  <Command __id="2646" _type="InsertStringCommand" date="Wed Sep 09 08:38:22 EDT 2020" starttimestamp="1599653169283" timestamp="1933099" timestamp2="1933099">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2648" _type="InsertStringCommand" date="Wed Sep 09 08:38:23 EDT 2020" starttimestamp="1599653169283" timestamp="1934299" timestamp2="1934299">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2650" _type="InsertStringCommand" date="Wed Sep 09 08:38:23 EDT 2020" starttimestamp="1599653169283" timestamp="1934659" timestamp2="1934659">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2652" _type="InsertStringCommand" date="Wed Sep 09 08:38:24 EDT 2020" starttimestamp="1599653169283" timestamp="1934839" timestamp2="1934839">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2654" _type="InsertStringCommand" date="Wed Sep 09 08:38:24 EDT 2020" starttimestamp="1599653169283" timestamp="1934949" timestamp2="1934949">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2656" _type="InsertStringCommand" date="Wed Sep 09 08:38:24 EDT 2020" starttimestamp="1599653169283" timestamp="1935079" timestamp2="1935079">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2658" _type="InsertStringCommand" date="Wed Sep 09 08:38:24 EDT 2020" starttimestamp="1599653169283" timestamp="1935159" timestamp2="1935159">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2660" _type="InsertStringCommand" date="Wed Sep 09 08:38:25 EDT 2020" starttimestamp="1599653169283" timestamp="1935829" timestamp2="1935829">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2662" _type="InsertStringCommand" date="Wed Sep 09 08:38:25 EDT 2020" starttimestamp="1599653169283" timestamp="1936099" timestamp2="1936099">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2664" _type="InsertStringCommand" date="Wed Sep 09 08:38:25 EDT 2020" starttimestamp="1599653169283" timestamp="1936249" timestamp2="1936249">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2666" _type="InsertStringCommand" date="Wed Sep 09 08:38:25 EDT 2020" starttimestamp="1599653169283" timestamp="1936419" timestamp2="1936419">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2668" _type="InsertStringCommand" date="Wed Sep 09 08:38:25 EDT 2020" starttimestamp="1599653169283" timestamp="1936549" timestamp2="1936549">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2670" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:26 EDT 2020" starttimestamp="1599653169283" timestamp="1937209" />
  <Command __id="2672" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:26 EDT 2020" starttimestamp="1599653169283" timestamp="1937379" />
  <Command __id="2674" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:26 EDT 2020" starttimestamp="1599653169283" timestamp="1937539" />
  <Command __id="2676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:27 EDT 2020" starttimestamp="1599653169283" timestamp="1937719" />
  <Command __id="2678" _type="InsertStringCommand" date="Wed Sep 09 08:38:28 EDT 2020" starttimestamp="1599653169283" timestamp="1938729" timestamp2="1938729">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2680" _type="InsertStringCommand" date="Wed Sep 09 08:38:28 EDT 2020" starttimestamp="1599653169283" timestamp="1938919" timestamp2="1938919">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2682" _type="InsertStringCommand" date="Wed Sep 09 08:38:28 EDT 2020" starttimestamp="1599653169283" timestamp="1939089" timestamp2="1939089">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2684" _type="InsertStringCommand" date="Wed Sep 09 08:38:28 EDT 2020" starttimestamp="1599653169283" timestamp="1939449" timestamp2="1939449">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2686" _type="InsertStringCommand" date="Wed Sep 09 08:38:29 EDT 2020" starttimestamp="1599653169283" timestamp="1940089" timestamp2="1940089">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2688" _type="InsertStringCommand" date="Wed Sep 09 08:38:29 EDT 2020" starttimestamp="1599653169283" timestamp="1940269" timestamp2="1940269">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2647" _type="Insert" date="Wed Sep 09 08:38:23 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7403" docExpressionCount="689" docLength="10271" length="1" offset="5294" starttimestamp="1599653169283" timestamp="1934289">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="2649" _type="Insert" date="Wed Sep 09 08:38:23 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7404" docExpressionCount="689" docLength="10272" length="1" offset="5295" starttimestamp="1599653169283" timestamp="1934649">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2651" _type="Insert" date="Wed Sep 09 08:38:24 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7405" docExpressionCount="689" docLength="10273" length="1" offset="5296" starttimestamp="1599653169283" timestamp="1934829">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2653" _type="Insert" date="Wed Sep 09 08:38:24 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7406" docExpressionCount="689" docLength="10274" length="1" offset="5297" starttimestamp="1599653169283" timestamp="1934939">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2655" _type="Insert" date="Wed Sep 09 08:38:24 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7407" docExpressionCount="689" docLength="10275" length="1" offset="5298" starttimestamp="1599653169283" timestamp="1935079">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2657" _type="Insert" date="Wed Sep 09 08:38:24 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7408" docExpressionCount="689" docLength="10276" length="1" offset="5299" starttimestamp="1599653169283" timestamp="1935149">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="2659" _type="Insert" date="Wed Sep 09 08:38:25 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7409" docExpressionCount="689" docLength="10277" length="1" offset="5300" starttimestamp="1599653169283" timestamp="1935829">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2661" _type="Insert" date="Wed Sep 09 08:38:25 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7410" docExpressionCount="699" docLength="10278" length="1" offset="5301" starttimestamp="1599653169283" timestamp="1936089">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2663" _type="Insert" date="Wed Sep 09 08:38:25 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7411" docExpressionCount="699" docLength="10279" length="1" offset="5302" starttimestamp="1599653169283" timestamp="1936239">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2665" _type="Insert" date="Wed Sep 09 08:38:25 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7412" docExpressionCount="699" docLength="10280" length="1" offset="5303" starttimestamp="1599653169283" timestamp="1936409">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2667" _type="Insert" date="Wed Sep 09 08:38:25 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7413" docExpressionCount="699" docLength="10281" length="1" offset="5304" starttimestamp="1599653169283" timestamp="1936539">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2669" _type="Delete" date="Wed Sep 09 08:38:26 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7412" docExpressionCount="699" docLength="10280" endLine="112" length="1" offset="5304" startLine="112" starttimestamp="1599653169283" timestamp="1937199">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2671" _type="Delete" date="Wed Sep 09 08:38:26 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7411" docExpressionCount="699" docLength="10279" endLine="112" length="1" offset="5303" startLine="112" starttimestamp="1599653169283" timestamp="1937369">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2673" _type="Delete" date="Wed Sep 09 08:38:26 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7410" docExpressionCount="699" docLength="10278" endLine="112" length="1" offset="5302" startLine="112" starttimestamp="1599653169283" timestamp="1937539">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2675" _type="Delete" date="Wed Sep 09 08:38:27 EDT 2020" docASTNodeCount="931" docActiveCodeLength="7409" docExpressionCount="689" docLength="10277" endLine="112" length="1" offset="5301" startLine="112" starttimestamp="1599653169283" timestamp="1937719">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2677" _type="Insert" date="Wed Sep 09 08:38:28 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7410" docExpressionCount="699" docLength="10278" length="1" offset="5301" starttimestamp="1599653169283" timestamp="1938719">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2679" _type="Insert" date="Wed Sep 09 08:38:28 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7411" docExpressionCount="699" docLength="10279" length="1" offset="5302" starttimestamp="1599653169283" timestamp="1938909">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2681" _type="Insert" date="Wed Sep 09 08:38:28 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7412" docExpressionCount="699" docLength="10280" length="1" offset="5303" starttimestamp="1599653169283" timestamp="1939079">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2683" _type="Insert" date="Wed Sep 09 08:38:28 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7413" docExpressionCount="699" docLength="10281" length="1" offset="5304" starttimestamp="1599653169283" timestamp="1939439">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2685" _type="Insert" date="Wed Sep 09 08:38:29 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7414" docExpressionCount="699" docLength="10282" length="1" offset="5305" starttimestamp="1599653169283" timestamp="1940079">
    <text><![CDATA[V]]></text>
  </DocumentChange>
  <DocumentChange __id="2687" _type="Insert" date="Wed Sep 09 08:38:29 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7415" docExpressionCount="699" docLength="10283" length="1" offset="5306" starttimestamp="1599653169283" timestamp="1940259">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2689" _type="Insert" date="Wed Sep 09 08:38:29 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7416" docExpressionCount="699" docLength="10284" length="1" offset="5307" starttimestamp="1599653169283" timestamp="1940339">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2691" _type="Insert" date="Wed Sep 09 08:38:29 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7417" docExpressionCount="699" docLength="10285" length="1" offset="5308" starttimestamp="1599653169283" timestamp="1940519">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2693" _type="Insert" date="Wed Sep 09 08:38:29 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7418" docExpressionCount="699" docLength="10286" length="1" offset="5309" starttimestamp="1599653169283" timestamp="1940609">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2695" _type="Insert" date="Wed Sep 09 08:38:30 EDT 2020" docASTNodeCount="945" docActiveCodeLength="7419" docExpressionCount="699" docLength="10287" length="1" offset="5310" starttimestamp="1599653169283" timestamp="1940759">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2697" _type="Insert" date="Wed Sep 09 08:38:30 EDT 2020" docASTNodeCount="944" docActiveCodeLength="7420" docExpressionCount="700" docLength="10288" length="1" offset="5311" starttimestamp="1599653169283" timestamp="1940859">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2699" _type="Insert" date="Wed Sep 09 08:38:31 EDT 2020" docASTNodeCount="946" docActiveCodeLength="7422" docExpressionCount="700" docLength="10290" length="2" offset="5312" starttimestamp="1599653169283" timestamp="1941979">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="2701" _type="Delete" date="Wed Sep 09 08:38:31 EDT 2020" docASTNodeCount="875" docActiveCodeLength="7421" docExpressionCount="652" docLength="10289" endLine="112" length="1" offset="5312" startLine="112" starttimestamp="1599653169283" timestamp="1942499">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="2702" _type="Delete" date="Wed Sep 09 08:38:31 EDT 2020" docASTNodeCount="944" docActiveCodeLength="7420" docExpressionCount="700" docLength="10288" endLine="112" length="1" offset="5312" startLine="112" starttimestamp="1599653169283" timestamp="1942519">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="2690" _type="InsertStringCommand" date="Wed Sep 09 08:38:29 EDT 2020" starttimestamp="1599653169283" timestamp="1940349" timestamp2="1940349">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2692" _type="InsertStringCommand" date="Wed Sep 09 08:38:29 EDT 2020" starttimestamp="1599653169283" timestamp="1940519" timestamp2="1940519">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2694" _type="InsertStringCommand" date="Wed Sep 09 08:38:29 EDT 2020" starttimestamp="1599653169283" timestamp="1940609" timestamp2="1940609">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2696" _type="InsertStringCommand" date="Wed Sep 09 08:38:30 EDT 2020" starttimestamp="1599653169283" timestamp="1940769" timestamp2="1940769">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2698" _type="InsertStringCommand" date="Wed Sep 09 08:38:30 EDT 2020" starttimestamp="1599653169283" timestamp="1940869" timestamp2="1940869">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2700" _type="InsertStringCommand" date="Wed Sep 09 08:38:31 EDT 2020" starttimestamp="1599653169283" timestamp="1941979" timestamp2="1941979">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2703" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:31 EDT 2020" starttimestamp="1599653169283" timestamp="1942529" />
  <Command __id="2705" _type="InsertStringCommand" date="Wed Sep 09 08:38:42 EDT 2020" starttimestamp="1599653169283" timestamp="1952969" timestamp2="1952969">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2707" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:42 EDT 2020" starttimestamp="1599653169283" timestamp="1953709" />
  <DocumentChange __id="2704" _type="Insert" date="Wed Sep 09 08:38:42 EDT 2020" docASTNodeCount="946" docActiveCodeLength="7421" docExpressionCount="700" docLength="10289" length="1" offset="5312" starttimestamp="1599653169283" timestamp="1952969">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2706" _type="Delete" date="Wed Sep 09 08:38:42 EDT 2020" docASTNodeCount="944" docActiveCodeLength="7420" docExpressionCount="700" docLength="10288" endLine="112" length="1" offset="5312" startLine="112" starttimestamp="1599653169283" timestamp="1953699">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2712" _type="Insert" date="Wed Sep 09 08:38:45 EDT 2020" docASTNodeCount="946" docActiveCodeLength="7438" docExpressionCount="700" docLength="10306" length="18" offset="5312" starttimestamp="1599653169283" timestamp="1956559">
    <text><![CDATA[anOutputComponents]]></text>
  </DocumentChange>
  <DocumentChange __id="2714" _type="Insert" date="Wed Sep 09 08:38:46 EDT 2020" docASTNodeCount="949" docActiveCodeLength="7440" docExpressionCount="701" docLength="10308" length="2" offset="5330" starttimestamp="1599653169283" timestamp="1957579">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="2716" _type="Insert" date="Wed Sep 09 08:38:47 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7441" docExpressionCount="702" docLength="10309" length="1" offset="5331" starttimestamp="1599653169283" timestamp="1957939">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="2719" _type="Insert" date="Wed Sep 09 08:38:48 EDT 2020" docASTNodeCount="948" docActiveCodeLength="7442" docExpressionCount="704" docLength="10310" length="1" offset="5333" starttimestamp="1599653169283" timestamp="1958879">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="2721" _type="Insert" date="Wed Sep 09 08:38:48 EDT 2020" docASTNodeCount="950" docActiveCodeLength="7444" docExpressionCount="704" docLength="10312" length="2" offset="5334" starttimestamp="1599653169283" timestamp="1959239">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="2723" _type="Insert" date="Wed Sep 09 08:38:49 EDT 2020" docASTNodeCount="950" docActiveCodeLength="7445" docExpressionCount="704" docLength="10313" length="1" offset="5335" starttimestamp="1599653169283" timestamp="1960049">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="2708" _type="MoveCaretCommand" caretOffset="2766" date="Wed Sep 09 08:38:44 EDT 2020" docOffset="5119" starttimestamp="1599653169283" timestamp="1955239" />
  <Command __id="2709" _type="SelectTextCommand" caretOffset="2773" date="Wed Sep 09 08:38:44 EDT 2020" end="2773" start="2755" starttimestamp="1599653169283" timestamp="1955389" />
  <Command __id="2710" _type="CopyCommand" date="Wed Sep 09 08:38:45 EDT 2020" starttimestamp="1599653169283" timestamp="1955869" />
  <Command __id="2711" _type="MoveCaretCommand" caretOffset="2959" date="Wed Sep 09 08:38:45 EDT 2020" docOffset="5312" starttimestamp="1599653169283" timestamp="1956399" />
  <Command __id="2713" _type="PasteCommand" date="Wed Sep 09 08:38:45 EDT 2020" starttimestamp="1599653169283" timestamp="1956569" />
  <Command __id="2715" _type="InsertStringCommand" date="Wed Sep 09 08:38:46 EDT 2020" starttimestamp="1599653169283" timestamp="1957579" timestamp2="1957579">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="2717" _type="InsertStringCommand" date="Wed Sep 09 08:38:47 EDT 2020" starttimestamp="1599653169283" timestamp="1957959" timestamp2="1957959">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2718" _type="InsertStringCommand" date="Wed Sep 09 08:38:47 EDT 2020" starttimestamp="1599653169283" timestamp="1958089" timestamp2="1958089">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="2720" _type="InsertStringCommand" date="Wed Sep 09 08:38:48 EDT 2020" starttimestamp="1599653169283" timestamp="1958889" timestamp2="1958889">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2722" _type="InsertStringCommand" date="Wed Sep 09 08:38:48 EDT 2020" starttimestamp="1599653169283" timestamp="1959249" timestamp2="1959249">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2724" _type="InsertStringCommand" date="Wed Sep 09 08:38:49 EDT 2020" starttimestamp="1599653169283" timestamp="1960049" timestamp2="1960049">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2725" _type="InsertStringCommand" date="Wed Sep 09 08:38:49 EDT 2020" starttimestamp="1599653169283" timestamp="1960299" timestamp2="1960299">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2727" _type="InsertStringCommand" date="Wed Sep 09 08:38:52 EDT 2020" starttimestamp="1599653169283" timestamp="1963349" timestamp2="1963349">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="2726" _type="Insert" date="Wed Sep 09 08:38:52 EDT 2020" docASTNodeCount="949" docActiveCodeLength="7446" docExpressionCount="705" docLength="10314" length="1" offset="5337" starttimestamp="1599653169283" timestamp="1963309">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="2731" _type="Insert" date="Wed Sep 09 08:38:55 EDT 2020" docASTNodeCount="953" docActiveCodeLength="7472" docExpressionCount="709" docLength="10340" length="26" offset="5338" starttimestamp="1599653169283" timestamp="1966709">
    <text><![CDATA[anOutputComponents[0]+","+]]></text>
  </DocumentChange>
  <DocumentChange __id="2733" _type="Insert" date="Wed Sep 09 08:38:56 EDT 2020" docASTNodeCount="957" docActiveCodeLength="7498" docExpressionCount="713" docLength="10366" length="26" offset="5364" starttimestamp="1599653169283" timestamp="1967339">
    <text><![CDATA[anOutputComponents[0]+","+]]></text>
  </DocumentChange>
  <Command __id="2728" _type="SelectTextCommand" caretOffset="2959" date="Wed Sep 09 08:38:54 EDT 2020" end="2985" start="2959" starttimestamp="1599653169283" timestamp="1965199" />
  <Command __id="2729" _type="CopyCommand" date="Wed Sep 09 08:38:55 EDT 2020" starttimestamp="1599653169283" timestamp="1965789" />
  <Command __id="2730" _type="MoveCaretCommand" caretOffset="2985" date="Wed Sep 09 08:38:55 EDT 2020" docOffset="5338" starttimestamp="1599653169283" timestamp="1966329" />
  <Command __id="2732" _type="PasteCommand" date="Wed Sep 09 08:38:56 EDT 2020" starttimestamp="1599653169283" timestamp="1966719" />
  <Command __id="2734" _type="PasteCommand" date="Wed Sep 09 08:38:56 EDT 2020" starttimestamp="1599653169283" timestamp="1967359" />
  <Command __id="2736" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:38:57 EDT 2020" starttimestamp="1599653169283" timestamp="1968509" />
  <Command __id="2738" _type="InsertStringCommand" date="Wed Sep 09 08:38:58 EDT 2020" starttimestamp="1599653169283" timestamp="1969129" timestamp2="1969129">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2739" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:38:58 EDT 2020" starttimestamp="1599653169283" timestamp="1969519" />
  <Command __id="2740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:38:58 EDT 2020" starttimestamp="1599653169283" timestamp="1969709" />
  <Command __id="2741" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:38:59 EDT 2020" starttimestamp="1599653169283" timestamp="1969859" />
  <Command __id="2742" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:38:59 EDT 2020" starttimestamp="1599653169283" timestamp="1970009" />
  <Command __id="2743" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:38:59 EDT 2020" starttimestamp="1599653169283" timestamp="1970169" />
  <Command __id="2744" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:38:59 EDT 2020" starttimestamp="1599653169283" timestamp="1970319" />
  <Command __id="2746" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1970729" />
  <Command __id="2748" _type="InsertStringCommand" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1970839" timestamp2="1970839">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1970929" />
  <Command __id="2750" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971429" />
  <Command __id="2751" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971469" />
  <Command __id="2752" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971489" />
  <Command __id="2753" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971529" />
  <Command __id="2754" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971549" />
  <Command __id="2755" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971579" />
  <Command __id="2756" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971619" />
  <Command __id="2757" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971649" />
  <DocumentChange __id="2735" _type="Delete" date="Wed Sep 09 08:38:57 EDT 2020" docASTNodeCount="958" docActiveCodeLength="7497" docExpressionCount="712" docLength="10365" endLine="112" length="1" offset="5389" startLine="112" starttimestamp="1599653169283" timestamp="1968499">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="2737" _type="Insert" date="Wed Sep 09 08:38:58 EDT 2020" docASTNodeCount="958" docActiveCodeLength="7498" docExpressionCount="712" docLength="10366" length="1" offset="5389" starttimestamp="1599653169283" timestamp="1969119">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2745" _type="Delete" date="Wed Sep 09 08:39:00 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7497" docExpressionCount="711" docLength="10365" endLine="112" length="1" offset="5383" startLine="112" starttimestamp="1599653169283" timestamp="1970719">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="2747" _type="Insert" date="Wed Sep 09 08:39:00 EDT 2020" docASTNodeCount="958" docActiveCodeLength="7498" docExpressionCount="712" docLength="10366" length="1" offset="5383" starttimestamp="1599653169283" timestamp="1970829">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="2775" _type="Delete" date="Wed Sep 09 08:39:01 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7497" docExpressionCount="711" docLength="10365" endLine="112" length="1" offset="5357" startLine="112" starttimestamp="1599653169283" timestamp="1972579">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="2777" _type="Insert" date="Wed Sep 09 08:39:01 EDT 2020" docASTNodeCount="958" docActiveCodeLength="7498" docExpressionCount="712" docLength="10366" length="1" offset="5357" starttimestamp="1599653169283" timestamp="1972699">
    <text><![CDATA[3]]></text>
  </DocumentChange>
  <Command __id="2758" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971679" />
  <Command __id="2759" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:00 EDT 2020" starttimestamp="1599653169283" timestamp="1971699" />
  <Command __id="2760" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971739" />
  <Command __id="2761" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971779" />
  <Command __id="2762" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971799" />
  <Command __id="2763" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971829" />
  <Command __id="2764" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971849" />
  <Command __id="2765" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971879" />
  <Command __id="2766" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971919" />
  <Command __id="2767" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971949" />
  <Command __id="2768" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1971979" />
  <Command __id="2769" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972009" />
  <Command __id="2770" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972039" />
  <Command __id="2771" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972069" />
  <Command __id="2772" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972099" />
  <Command __id="2773" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972129" />
  <Command __id="2774" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972159" />
  <Command __id="2776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:39:01 EDT 2020" starttimestamp="1599653169283" timestamp="1972599" />
  <Command __id="2778" _type="InsertStringCommand" date="Wed Sep 09 08:39:02 EDT 2020" starttimestamp="1599653169283" timestamp="1972719" timestamp2="1972719">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="2780" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:39:03 EDT 2020" starttimestamp="1599653169283" timestamp="1973939" />
  <Command __id="2782" _type="InsertStringCommand" date="Wed Sep 09 08:39:03 EDT 2020" starttimestamp="1599653169283" timestamp="1974049" timestamp2="1974049">
    <data><![CDATA[1]]></data>
  </Command>
  <DocumentChange __id="2779" _type="Delete" date="Wed Sep 09 08:39:03 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7497" docExpressionCount="711" docLength="10365" endLine="112" length="1" offset="5357" startLine="112" starttimestamp="1599653169283" timestamp="1973919">
    <text><![CDATA[3]]></text>
  </DocumentChange>
  <DocumentChange __id="2781" _type="Insert" date="Wed Sep 09 08:39:03 EDT 2020" docASTNodeCount="958" docActiveCodeLength="7498" docExpressionCount="712" docLength="10366" length="1" offset="5357" starttimestamp="1599653169283" timestamp="1974049">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <Command __id="2783" _type="MoveCaretCommand" caretOffset="3052" date="Wed Sep 09 08:39:06 EDT 2020" docOffset="5405" starttimestamp="1599653169283" timestamp="1976779" />
  <DocumentChange __id="2784" _type="Insert" date="Wed Sep 09 08:39:08 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7499" docExpressionCount="713" docLength="10367" length="1" offset="5405" starttimestamp="1599653169283" timestamp="1979309">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="2785" _type="InsertStringCommand" date="Wed Sep 09 08:39:08 EDT 2020" starttimestamp="1599653169283" timestamp="1979309" timestamp2="1979309">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="2786" _type="Insert" date="Wed Sep 09 08:39:08 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7500" docExpressionCount="713" docLength="10368" length="1" offset="5406" starttimestamp="1599653169283" timestamp="1979509">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="2787" _type="InsertStringCommand" date="Wed Sep 09 08:39:08 EDT 2020" starttimestamp="1599653169283" timestamp="1979519" timestamp2="1979519">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2788" _type="Insert" date="Wed Sep 09 08:39:09 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7501" docExpressionCount="713" docLength="10369" length="1" offset="5407" starttimestamp="1599653169283" timestamp="1979719">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="2789" _type="InsertStringCommand" date="Wed Sep 09 08:39:09 EDT 2020" starttimestamp="1599653169283" timestamp="1979729" timestamp2="1979729">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2790" _type="Insert" date="Wed Sep 09 08:39:09 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7502" docExpressionCount="713" docLength="10370" length="1" offset="5408" starttimestamp="1599653169283" timestamp="1979949">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="2791" _type="InsertStringCommand" date="Wed Sep 09 08:39:09 EDT 2020" starttimestamp="1599653169283" timestamp="1979969" timestamp2="1979969">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2792" _type="Insert" date="Wed Sep 09 08:39:10 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7503" docExpressionCount="713" docLength="10371" length="1" offset="5409" starttimestamp="1599653169283" timestamp="1981079">
    <text><![CDATA[V]]></text>
  </DocumentChange>
  <Command __id="2793" _type="InsertStringCommand" date="Wed Sep 09 08:39:10 EDT 2020" starttimestamp="1599653169283" timestamp="1981089" timestamp2="1981089">
    <data><![CDATA[V]]></data>
  </Command>
  <DocumentChange __id="2794" _type="Insert" date="Wed Sep 09 08:39:10 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7504" docExpressionCount="713" docLength="10372" length="1" offset="5410" starttimestamp="1599653169283" timestamp="1981289">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="2795" _type="InsertStringCommand" date="Wed Sep 09 08:39:10 EDT 2020" starttimestamp="1599653169283" timestamp="1981299" timestamp2="1981299">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2796" _type="Insert" date="Wed Sep 09 08:39:10 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7505" docExpressionCount="713" docLength="10373" length="1" offset="5411" starttimestamp="1599653169283" timestamp="1981429">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="2797" _type="InsertStringCommand" date="Wed Sep 09 08:39:10 EDT 2020" starttimestamp="1599653169283" timestamp="1981439" timestamp2="1981439">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="2798" _type="Insert" date="Wed Sep 09 08:39:10 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7506" docExpressionCount="713" docLength="10374" length="1" offset="5412" starttimestamp="1599653169283" timestamp="1981659">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="2799" _type="InsertStringCommand" date="Wed Sep 09 08:39:10 EDT 2020" starttimestamp="1599653169283" timestamp="1981679" timestamp2="1981679">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="2800" _type="Insert" date="Wed Sep 09 08:39:11 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7507" docExpressionCount="713" docLength="10375" length="1" offset="5413" starttimestamp="1599653169283" timestamp="1981799">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2801" _type="InsertStringCommand" date="Wed Sep 09 08:39:11 EDT 2020" starttimestamp="1599653169283" timestamp="1981819" timestamp2="1981819">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2802" _type="Insert" date="Wed Sep 09 08:39:11 EDT 2020" docASTNodeCount="959" docActiveCodeLength="7508" docExpressionCount="713" docLength="10376" length="1" offset="5414" starttimestamp="1599653169283" timestamp="1981949">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="2803" _type="InsertStringCommand" date="Wed Sep 09 08:39:11 EDT 2020" starttimestamp="1599653169283" timestamp="1981959" timestamp2="1981959">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2805" _type="InsertStringCommand" date="Wed Sep 09 08:39:11 EDT 2020" starttimestamp="1599653169283" timestamp="1982319" timestamp2="1982319">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="2804" _type="Insert" date="Wed Sep 09 08:39:11 EDT 2020" docASTNodeCount="954" docActiveCodeLength="7509" docExpressionCount="710" docLength="10377" length="1" offset="5415" starttimestamp="1599653169283" timestamp="1982319">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="2809" _type="Insert" date="Wed Sep 09 08:39:25 EDT 2020" docASTNodeCount="963" docActiveCodeLength="7530" docExpressionCount="717" docLength="10398" length="21" offset="5416" starttimestamp="1599653169283" timestamp="1996599">
    <text><![CDATA[anOutputComponents[0]]]></text>
  </DocumentChange>
  <DocumentChange __id="2812" _type="Delete" date="Wed Sep 09 08:39:26 EDT 2020" docASTNodeCount="953" docActiveCodeLength="7529" docExpressionCount="707" docLength="10397" endLine="113" length="1" offset="5435" startLine="113" starttimestamp="1599653169283" timestamp="1997669">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="2814" _type="Insert" date="Wed Sep 09 08:39:27 EDT 2020" docASTNodeCount="963" docActiveCodeLength="7530" docExpressionCount="717" docLength="10398" length="1" offset="5435" starttimestamp="1599653169283" timestamp="1997749">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <Command __id="2816" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:39:31 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2002039">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2806" _type="SelectTextCommand" caretOffset="2959" date="Wed Sep 09 08:39:23 EDT 2020" end="2980" start="2959" starttimestamp="1599653169283" timestamp="1994579" />
  <Command __id="2807" _type="CopyCommand" date="Wed Sep 09 08:39:24 EDT 2020" starttimestamp="1599653169283" timestamp="1995049" />
  <Command __id="2808" _type="MoveCaretCommand" caretOffset="3063" date="Wed Sep 09 08:39:25 EDT 2020" docOffset="5416" starttimestamp="1599653169283" timestamp="1995869" />
  <Command __id="2810" _type="PasteCommand" date="Wed Sep 09 08:39:25 EDT 2020" starttimestamp="1599653169283" timestamp="1996609" />
  <Command __id="2811" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:26 EDT 2020" starttimestamp="1599653169283" timestamp="1997459" />
  <Command __id="2813" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:39:26 EDT 2020" starttimestamp="1599653169283" timestamp="1997689" />
  <Command __id="2815" _type="InsertStringCommand" date="Wed Sep 09 08:39:27 EDT 2020" starttimestamp="1599653169283" timestamp="1997769" timestamp2="1997769">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="2817" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:39:31 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="2002129" />
  <Command __id="2819" _type="MoveCaretCommand" caretOffset="3083" date="Wed Sep 09 08:39:34 EDT 2020" docOffset="5436" starttimestamp="1599653169283" timestamp="2005569" />
  <Command __id="2818" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:39:34 EDT 2020" docASTNodeCount="963" docActiveCodeLength="7530" docExpressionCount="717" docLength="10398" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2005459">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			"), Diff(DELETE,"if(verify("), Diff(INSERT,"String dataValues=anOutputComponents[0]+","+anOutputComponents[1]+","+anOutputComponents[2]+",";¶			if(verify(dataValues+anOutputComponents[4]"), Diff(EQUAL,")¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
		if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}
		
		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}
	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5)
				throw new NotGradableException("Output does not have 5 command separated components");
			
			String dataValues=anOutputComponents[0]+","+anOutputComponents[1]+","+anOutputComponents[2]+",";
			if(verify(dataValues+anOutputComponents[4])
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="2825" _type="Insert" date="Wed Sep 09 08:39:42 EDT 2020" docASTNodeCount="954" docActiveCodeLength="7531" docExpressionCount="710" docLength="10399" length="1" offset="5437" starttimestamp="1599653169283" timestamp="2013109">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2827" _type="Insert" date="Wed Sep 09 08:39:42 EDT 2020" docASTNodeCount="964" docActiveCodeLength="7544" docExpressionCount="718" docLength="10412" length="13" offset="5438" starttimestamp="1599653169283" timestamp="2013349">
    <text><![CDATA[aUtilityClass]]></text>
  </DocumentChange>
  <Command __id="2820" _type="MoveCaretCommand" caretOffset="2298" date="Wed Sep 09 08:39:39 EDT 2020" docOffset="4651" starttimestamp="1599653169283" timestamp="2009869" />
  <Command __id="2821" _type="SelectTextCommand" caretOffset="2302" date="Wed Sep 09 08:39:39 EDT 2020" end="2302" start="2289" starttimestamp="1599653169283" timestamp="2009999" />
  <Command __id="2822" _type="CopyCommand" date="Wed Sep 09 08:39:40 EDT 2020" starttimestamp="1599653169283" timestamp="2010779" />
  <Command __id="2823" _type="MoveCaretCommand" caretOffset="3085" date="Wed Sep 09 08:39:41 EDT 2020" docOffset="5438" starttimestamp="1599653169283" timestamp="2011739" />
  <Command __id="2824" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:41 EDT 2020" starttimestamp="1599653169283" timestamp="2012459" />
  <Command __id="2826" _type="InsertStringCommand" date="Wed Sep 09 08:39:42 EDT 2020" starttimestamp="1599653169283" timestamp="2013109" timestamp2="2013109">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2828" _type="PasteCommand" date="Wed Sep 09 08:39:42 EDT 2020" starttimestamp="1599653169283" timestamp="2013349" />
  <Command __id="2830" _type="InsertStringCommand" date="Wed Sep 09 08:39:43 EDT 2020" starttimestamp="1599653169283" timestamp="2014629" timestamp2="2014629">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2831" _type="MoveCaretCommand" caretOffset="2324" date="Wed Sep 09 08:39:46 EDT 2020" docOffset="4677" starttimestamp="1599653169283" timestamp="2017489" />
  <Command __id="2832" _type="SelectTextCommand" caretOffset="2333" date="Wed Sep 09 08:39:46 EDT 2020" end="2333" start="2310" starttimestamp="1599653169283" timestamp="2017639" />
  <Command __id="2833" _type="CopyCommand" date="Wed Sep 09 08:39:47 EDT 2020" starttimestamp="1599653169283" timestamp="2018579" />
  <Command __id="2834" _type="MoveCaretCommand" caretOffset="3099" date="Wed Sep 09 08:39:49 EDT 2020" docOffset="5452" starttimestamp="1599653169283" timestamp="2020019" />
  <Command __id="2836" _type="PasteCommand" date="Wed Sep 09 08:39:49 EDT 2020" starttimestamp="1599653169283" timestamp="2020269" />
  <Command __id="2837" _type="MoveCaretCommand" caretOffset="3123" date="Wed Sep 09 08:39:51 EDT 2020" docOffset="5476" starttimestamp="1599653169283" timestamp="2022609" />
  <Command __id="2839" _type="InsertStringCommand" date="Wed Sep 09 08:39:52 EDT 2020" starttimestamp="1599653169283" timestamp="2023319" timestamp2="2023319">
    <data><![CDATA[)]]></data>
  </Command>
  <DocumentChange __id="2829" _type="Insert" date="Wed Sep 09 08:39:43 EDT 2020" docASTNodeCount="954" docActiveCodeLength="7545" docExpressionCount="710" docLength="10413" length="1" offset="5451" starttimestamp="1599653169283" timestamp="2014569">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2835" _type="Insert" date="Wed Sep 09 08:39:49 EDT 2020" docASTNodeCount="965" docActiveCodeLength="7568" docExpressionCount="719" docLength="10436" length="23" offset="5452" starttimestamp="1599653169283" timestamp="2020259">
    <text><![CDATA[aDerivedVerifyingMethod]]></text>
  </DocumentChange>
  <DocumentChange __id="2838" _type="Insert" date="Wed Sep 09 08:39:52 EDT 2020" docASTNodeCount="965" docActiveCodeLength="7569" docExpressionCount="719" docLength="10437" length="1" offset="5476" starttimestamp="1599653169283" timestamp="2023299">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2841" _type="Insert" date="Wed Sep 09 08:39:56 EDT 2020" docASTNodeCount="965" docActiveCodeLength="7576" docExpressionCount="719" docLength="10444" length="7" offset="5476" starttimestamp="1599653169283" timestamp="2027649">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <Command __id="2840" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:39:56 EDT 2020" starttimestamp="1599653169283" timestamp="2026719" />
  <Command __id="2842" _type="InsertStringCommand" date="Wed Sep 09 08:39:56 EDT 2020" starttimestamp="1599653169283" timestamp="2027679" timestamp2="2027679">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2844" _type="InsertStringCommand" date="Wed Sep 09 08:40:01 EDT 2020" starttimestamp="1599653169283" timestamp="2031909" timestamp2="2031909">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="2846" _type="InsertStringCommand" date="Wed Sep 09 08:40:01 EDT 2020" starttimestamp="1599653169283" timestamp="2032059" timestamp2="2032059">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="2847" _type="SelectTextCommand" caretOffset="3045" date="Wed Sep 09 08:40:05 EDT 2020" end="3122" start="3045" starttimestamp="1599653169283" timestamp="2036349" />
  <Command __id="2848" _type="CopyCommand" date="Wed Sep 09 08:40:06 EDT 2020" starttimestamp="1599653169283" timestamp="2036929" />
  <Command __id="2849" _type="MoveCaretCommand" caretOffset="3132" date="Wed Sep 09 08:40:07 EDT 2020" docOffset="5485" starttimestamp="1599653169283" timestamp="2037849" />
  <Command __id="2851" _type="PasteCommand" date="Wed Sep 09 08:40:07 EDT 2020" starttimestamp="1599653169283" timestamp="2038379" />
  <DocumentChange __id="2843" _type="Insert" date="Wed Sep 09 08:40:01 EDT 2020" docASTNodeCount="954" docActiveCodeLength="7577" docExpressionCount="710" docLength="10445" length="1" offset="5483" starttimestamp="1599653169283" timestamp="2031909">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <DocumentChange __id="2845" _type="Insert" date="Wed Sep 09 08:40:01 EDT 2020" docASTNodeCount="954" docActiveCodeLength="7578" docExpressionCount="710" docLength="10446" length="1" offset="5484" starttimestamp="1599653169283" timestamp="2032059">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <DocumentChange __id="2850" _type="Insert" date="Wed Sep 09 08:40:07 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7655" docExpressionCount="729" docLength="10523" length="77" offset="5485" starttimestamp="1599653169283" timestamp="2038359">
    <text><![CDATA[verify(dataValues+anOutputComponents[4],aUtilityClass,aDerivedVerifyingMethod]]></text>
  </DocumentChange>
  <Command __id="2852" _type="MoveCaretCommand" caretOffset="3210" date="Wed Sep 09 08:40:09 EDT 2020" docOffset="5563" starttimestamp="1599653169283" timestamp="2039889" />
  <DocumentChange __id="2853" _type="Insert" date="Wed Sep 09 08:40:10 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7656" docExpressionCount="729" docLength="10524" length="1" offset="5563" starttimestamp="1599653169283" timestamp="2040989">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="2854" _type="InsertStringCommand" date="Wed Sep 09 08:40:10 EDT 2020" starttimestamp="1599653169283" timestamp="2041019" timestamp2="2041019">
    <data><![CDATA[)]]></data>
  </Command>
  <DocumentChange __id="2855" _type="Insert" date="Wed Sep 09 08:40:11 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7658" docExpressionCount="729" docLength="10526" length="2" offset="5564" starttimestamp="1599653169283" timestamp="2042109">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <Command __id="2856" _type="InsertStringCommand" date="Wed Sep 09 08:40:11 EDT 2020" starttimestamp="1599653169283" timestamp="2042119" timestamp2="2042119">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2858" _type="InsertStringCommand" date="Wed Sep 09 08:40:11 EDT 2020" starttimestamp="1599653169283" timestamp="2042409" timestamp2="2042409">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2859" _type="MoveCaretCommand" caretOffset="3130" date="Wed Sep 09 08:40:17 EDT 2020" docOffset="5483" starttimestamp="1599653169283" timestamp="2048129" />
  <Command __id="2861" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:40:18 EDT 2020" starttimestamp="1599653169283" timestamp="2049049" />
  <Command __id="2863" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:40:18 EDT 2020" starttimestamp="1599653169283" timestamp="2049379" />
  <Command __id="2865" _type="InsertStringCommand" date="Wed Sep 09 08:40:19 EDT 2020" starttimestamp="1599653169283" timestamp="2050029" timestamp2="2050029">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2866" _type="MoveCaretCommand" caretOffset="3137" date="Wed Sep 09 08:40:24 EDT 2020" docOffset="5490" starttimestamp="1599653169283" timestamp="2055359" />
  <Command __id="2868" _type="InsertStringCommand" date="Wed Sep 09 08:40:25 EDT 2020" starttimestamp="1599653169283" timestamp="2056119" timestamp2="2056119">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2870" _type="InsertStringCommand" date="Wed Sep 09 08:40:25 EDT 2020" starttimestamp="1599653169283" timestamp="2056279" timestamp2="2056279">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2872" _type="InsertStringCommand" date="Wed Sep 09 08:40:25 EDT 2020" starttimestamp="1599653169283" timestamp="2056389" timestamp2="2056389">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2874" _type="InsertStringCommand" date="Wed Sep 09 08:40:26 EDT 2020" starttimestamp="1599653169283" timestamp="2056749" timestamp2="2056749">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2876" _type="InsertStringCommand" date="Wed Sep 09 08:40:26 EDT 2020" starttimestamp="1599653169283" timestamp="2056929" timestamp2="2056929">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2878" _type="InsertStringCommand" date="Wed Sep 09 08:40:26 EDT 2020" starttimestamp="1599653169283" timestamp="2057079" timestamp2="2057079">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2880" _type="InsertStringCommand" date="Wed Sep 09 08:40:26 EDT 2020" starttimestamp="1599653169283" timestamp="2057219" timestamp2="2057219">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2882" _type="InsertStringCommand" date="Wed Sep 09 08:40:26 EDT 2020" starttimestamp="1599653169283" timestamp="2057359" timestamp2="2057359">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2883" _type="MoveCaretCommand" caretOffset="3177" date="Wed Sep 09 08:40:28 EDT 2020" docOffset="5530" starttimestamp="1599653169283" timestamp="2058989" />
  <Command __id="2885" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:40:29 EDT 2020" starttimestamp="1599653169283" timestamp="2059849" />
  <Command __id="2887" _type="InsertStringCommand" date="Wed Sep 09 08:40:29 EDT 2020" starttimestamp="1599653169283" timestamp="2059919" timestamp2="2059919">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="2888" _type="MoveCaretCommand" caretOffset="2347" date="Wed Sep 09 08:40:36 EDT 2020" docOffset="4700" starttimestamp="1599653169283" timestamp="2067169" />
  <Command __id="2889" _type="SelectTextCommand" caretOffset="2365" date="Wed Sep 09 08:40:36 EDT 2020" end="2365" start="2341" starttimestamp="1599653169283" timestamp="2067329" />
  <Command __id="2890" _type="CopyCommand" date="Wed Sep 09 08:40:37 EDT 2020" starttimestamp="1599653169283" timestamp="2068129" />
  <Command __id="2891" _type="MoveCaretCommand" caretOffset="3201" date="Wed Sep 09 08:40:38 EDT 2020" docOffset="5554" starttimestamp="1599653169283" timestamp="2069659" />
  <Command __id="2892" _type="SelectTextCommand" caretOffset="3216" date="Wed Sep 09 08:40:39 EDT 2020" end="3216" start="3193" starttimestamp="1599653169283" timestamp="2069799" />
  <Command __id="2894" _type="PasteCommand" date="Wed Sep 09 08:40:39 EDT 2020" starttimestamp="1599653169283" timestamp="2069949" />
  <Command __id="2895" _type="MoveCaretCommand" caretOffset="3046" date="Wed Sep 09 08:40:43 EDT 2020" docOffset="5399" starttimestamp="1599653169283" timestamp="2074109" />
  <Command __id="2896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:44 EDT 2020" starttimestamp="1599653169283" timestamp="2074729" />
  <Command __id="2898" _type="InsertStringCommand" date="Wed Sep 09 08:40:44 EDT 2020" starttimestamp="1599653169283" timestamp="2075439" timestamp2="2075439">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2900" _type="InsertStringCommand" date="Wed Sep 09 08:40:44 EDT 2020" starttimestamp="1599653169283" timestamp="2075579" timestamp2="2075579">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2901" _type="MoveCaretCommand" caretOffset="3219" date="Wed Sep 09 08:40:46 EDT 2020" docOffset="5572" starttimestamp="1599653169283" timestamp="2077379" />
  <Command __id="2903" _type="InsertStringCommand" date="Wed Sep 09 08:40:47 EDT 2020" starttimestamp="1599653169283" timestamp="2078139" timestamp2="2078139">
    <data><![CDATA[)]]></data>
  </Command>
  <DocumentChange __id="2857" _type="Insert" date="Wed Sep 09 08:40:11 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7670" docExpressionCount="729" docLength="10538" length="12" offset="5566" starttimestamp="1599653169283" timestamp="2042379">
    <text><![CDATA[
				
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="2860" _type="Delete" date="Wed Sep 09 08:40:18 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7669" docExpressionCount="729" docLength="10537" endLine="114" length="1" offset="5482" startLine="114" starttimestamp="1599653169283" timestamp="2049049">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2862" _type="Delete" date="Wed Sep 09 08:40:18 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7668" docExpressionCount="729" docLength="10536" endLine="114" length="1" offset="5481" startLine="114" starttimestamp="1599653169283" timestamp="2049379">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2864" _type="Insert" date="Wed Sep 09 08:40:19 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7669" docExpressionCount="729" docLength="10537" length="1" offset="5481" starttimestamp="1599653169283" timestamp="2050019">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2867" _type="Insert" date="Wed Sep 09 08:40:25 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7670" docExpressionCount="729" docLength="10538" length="1" offset="5490" starttimestamp="1599653169283" timestamp="2056099">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="2869" _type="Insert" date="Wed Sep 09 08:40:25 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7671" docExpressionCount="729" docLength="10539" length="1" offset="5491" starttimestamp="1599653169283" timestamp="2056259">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2871" _type="Insert" date="Wed Sep 09 08:40:25 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7672" docExpressionCount="729" docLength="10540" length="1" offset="5492" starttimestamp="1599653169283" timestamp="2056369">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2873" _type="Insert" date="Wed Sep 09 08:40:26 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7673" docExpressionCount="729" docLength="10541" length="1" offset="5493" starttimestamp="1599653169283" timestamp="2056729">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2875" _type="Insert" date="Wed Sep 09 08:40:26 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7674" docExpressionCount="729" docLength="10542" length="1" offset="5494" starttimestamp="1599653169283" timestamp="2056909">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2877" _type="Insert" date="Wed Sep 09 08:40:26 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7675" docExpressionCount="729" docLength="10543" length="1" offset="5495" starttimestamp="1599653169283" timestamp="2057069">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2879" _type="Insert" date="Wed Sep 09 08:40:26 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7676" docExpressionCount="729" docLength="10544" length="1" offset="5496" starttimestamp="1599653169283" timestamp="2057199">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2881" _type="Insert" date="Wed Sep 09 08:40:26 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7677" docExpressionCount="729" docLength="10545" length="1" offset="5497" starttimestamp="1599653169283" timestamp="2057349">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2884" _type="Delete" date="Wed Sep 09 08:40:29 EDT 2020" docASTNodeCount="976" docActiveCodeLength="7676" docExpressionCount="728" docLength="10544" endLine="114" length="1" offset="5529" startLine="114" starttimestamp="1599653169283" timestamp="2059829">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <DocumentChange __id="2886" _type="Insert" date="Wed Sep 09 08:40:29 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7677" docExpressionCount="729" docLength="10545" length="1" offset="5529" starttimestamp="1599653169283" timestamp="2059899">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="2893" _type="Replace" date="Wed Sep 09 08:40:39 EDT 2020" docASTNodeCount="975" docActiveCodeLength="7678" docExpressionCount="729" docLength="10546" endLine="114" insertionLength="24" int_docASTNodeCount="975" int_docActiveCodeLength="7654" int_docExpressionCount="729" int_docLength="10522" length="23" offset="5546" startLine="114" starttimestamp="1599653169283" timestamp="2069929">
    <deletedText><![CDATA[aDerivedVerifyingMethod]]></deletedText>
    <insertedText><![CDATA[aInferredVerifyingMethod]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2897" _type="Insert" date="Wed Sep 09 08:40:44 EDT 2020" docASTNodeCount="976" docActiveCodeLength="7679" docExpressionCount="730" docLength="10547" length="1" offset="5398" starttimestamp="1599653169283" timestamp="2075429">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="2899" _type="Insert" date="Wed Sep 09 08:40:44 EDT 2020" docASTNodeCount="978" docActiveCodeLength="7680" docExpressionCount="731" docLength="10548" length="1" offset="5399" starttimestamp="1599653169283" timestamp="2075549">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="2902" _type="Insert" date="Wed Sep 09 08:40:47 EDT 2020" docASTNodeCount="977" docActiveCodeLength="7681" docExpressionCount="731" docLength="10549" length="1" offset="5572" starttimestamp="1599653169283" timestamp="2078129">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2905" _type="Insert" date="Wed Sep 09 08:40:51 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7682" docExpressionCount="732" docLength="10550" length="1" offset="5583" starttimestamp="1599653169283" timestamp="2082209">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2907" _type="Insert" date="Wed Sep 09 08:40:51 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7683" docExpressionCount="732" docLength="10551" length="1" offset="5584" starttimestamp="1599653169283" timestamp="2082359">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2909" _type="Insert" date="Wed Sep 09 08:40:51 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7684" docExpressionCount="732" docLength="10552" length="1" offset="5585" starttimestamp="1599653169283" timestamp="2082539">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2911" _type="Insert" date="Wed Sep 09 08:40:51 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7685" docExpressionCount="732" docLength="10553" length="1" offset="5586" starttimestamp="1599653169283" timestamp="2082649">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2913" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7686" docExpressionCount="732" docLength="10554" length="1" offset="5587" starttimestamp="1599653169283" timestamp="2082719">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2915" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="978" docActiveCodeLength="7687" docExpressionCount="731" docLength="10555" length="1" offset="5588" starttimestamp="1599653169283" timestamp="2082809">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="2904" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:40:50 EDT 2020" starttimestamp="1599653169283" timestamp="2081269" />
  <Command __id="2906" _type="InsertStringCommand" date="Wed Sep 09 08:40:51 EDT 2020" starttimestamp="1599653169283" timestamp="2082219" timestamp2="2082219">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2908" _type="InsertStringCommand" date="Wed Sep 09 08:40:51 EDT 2020" starttimestamp="1599653169283" timestamp="2082359" timestamp2="2082359">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2910" _type="InsertStringCommand" date="Wed Sep 09 08:40:51 EDT 2020" starttimestamp="1599653169283" timestamp="2082549" timestamp2="2082549">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2912" _type="InsertStringCommand" date="Wed Sep 09 08:40:51 EDT 2020" starttimestamp="1599653169283" timestamp="2082659" timestamp2="2082659">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2914" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2082729" timestamp2="2082729">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2916" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2082819" timestamp2="2082819">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2918" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2082949" timestamp2="2082949">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2920" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2083069" timestamp2="2083069">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2922" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2083229" timestamp2="2083229">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2924" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2083309" timestamp2="2083309">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2926" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2083379" timestamp2="2083379">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2928" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2083469" timestamp2="2083469">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2930" _type="InsertStringCommand" date="Wed Sep 09 08:40:52 EDT 2020" starttimestamp="1599653169283" timestamp="2083589" timestamp2="2083589">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2931" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:54 EDT 2020" starttimestamp="1599653169283" timestamp="2084819" />
  <Command __id="2932" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:40:57 EDT 2020" starttimestamp="1599653169283" timestamp="2088249" />
  <Command __id="2933" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:57 EDT 2020" starttimestamp="1599653169283" timestamp="2088499" />
  <Command __id="2934" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089009" />
  <Command __id="2935" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089039" />
  <Command __id="2936" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089069" />
  <Command __id="2937" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089099" />
  <Command __id="2938" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089129" />
  <Command __id="2939" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089159" />
  <Command __id="2940" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089189" />
  <Command __id="2941" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089219" />
  <Command __id="2942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089259" />
  <Command __id="2943" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089279" />
  <Command __id="2944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089319" />
  <Command __id="2945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:58 EDT 2020" starttimestamp="1599653169283" timestamp="2089649" />
  <Command __id="2946" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Sep 09 08:40:59 EDT 2020" starttimestamp="1599653169283" timestamp="2089849" />
  <Command __id="2948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:00 EDT 2020" starttimestamp="1599653169283" timestamp="2090829" />
  <Command __id="2950" _type="InsertStringCommand" date="Wed Sep 09 08:41:00 EDT 2020" starttimestamp="1599653169283" timestamp="2091089" timestamp2="2091089">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2917" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="978" docActiveCodeLength="7688" docExpressionCount="731" docLength="10556" length="1" offset="5589" starttimestamp="1599653169283" timestamp="2082929">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2919" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7689" docExpressionCount="732" docLength="10557" length="1" offset="5590" starttimestamp="1599653169283" timestamp="2083059">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2921" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7690" docExpressionCount="732" docLength="10558" length="1" offset="5591" starttimestamp="1599653169283" timestamp="2083219">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2923" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7691" docExpressionCount="732" docLength="10559" length="1" offset="5592" starttimestamp="1599653169283" timestamp="2083299">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2925" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7692" docExpressionCount="732" docLength="10560" length="1" offset="5593" starttimestamp="1599653169283" timestamp="2083379">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2927" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7693" docExpressionCount="732" docLength="10561" length="1" offset="5594" starttimestamp="1599653169283" timestamp="2083469">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2929" _type="Insert" date="Wed Sep 09 08:40:52 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7694" docExpressionCount="732" docLength="10562" length="1" offset="5595" starttimestamp="1599653169283" timestamp="2083589">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2947" _type="Delete" date="Wed Sep 09 08:41:00 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7693" docExpressionCount="732" docLength="10561" endLine="114" length="1" offset="5484" startLine="114" starttimestamp="1599653169283" timestamp="2090829">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <DocumentChange __id="2949" _type="Insert" date="Wed Sep 09 08:41:00 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7694" docExpressionCount="732" docLength="10562" length="1" offset="5484" starttimestamp="1599653169283" timestamp="2091079">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2951" _type="MoveCaretCommand" caretOffset="3249" date="Wed Sep 09 08:41:07 EDT 2020" docOffset="5602" starttimestamp="1599653169283" timestamp="2098669" />
  <Command __id="2953" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:10 EDT 2020" starttimestamp="1599653169283" timestamp="2101339" />
  <Command __id="2954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Sep 09 08:41:10 EDT 2020" starttimestamp="1599653169283" timestamp="2101479" />
  <Command __id="2955" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Sep 09 08:41:11 EDT 2020" starttimestamp="1599653169283" timestamp="2101929" />
  <Command __id="2956" _type="MoveCaretCommand" caretOffset="3224" date="Wed Sep 09 08:41:14 EDT 2020" docOffset="5577" starttimestamp="1599653169283" timestamp="2105009" />
  <Command __id="2958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:14 EDT 2020" starttimestamp="1599653169283" timestamp="2105569" />
  <Command __id="2960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:15 EDT 2020" starttimestamp="1599653169283" timestamp="2105769" />
  <Command __id="2961" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2106839" />
  <Command __id="2962" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2106939" />
  <Command __id="2963" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2106989" />
  <Command __id="2964" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2106989" />
  <Command __id="2965" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2106999" />
  <Command __id="2966" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2106999" />
  <Command __id="2967" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:41:16 EDT 2020" starttimestamp="1599653169283" timestamp="2107009" />
  <DocumentChange __id="2952" _type="Delete" date="Wed Sep 09 08:41:10 EDT 2020" docASTNodeCount="979" docActiveCodeLength="7693" docExpressionCount="732" docLength="10561" endLine="116" length="1" offset="5601" startLine="116" starttimestamp="1599653169283" timestamp="2101329">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="2957" _type="Delete" date="Wed Sep 09 08:41:14 EDT 2020" docASTNodeCount="978" docActiveCodeLength="7692" docExpressionCount="732" docLength="10560" endLine="114" length="1" offset="5576" startLine="114" starttimestamp="1599653169283" timestamp="2105569">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="2959" _type="Delete" date="Wed Sep 09 08:41:15 EDT 2020" docASTNodeCount="978" docActiveCodeLength="7691" docExpressionCount="732" docLength="10559" endLine="114" length="1" offset="5575" startLine="114" starttimestamp="1599653169283" timestamp="2105759">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2968" _type="SelectTextCommand" caretOffset="1084" date="Wed Sep 09 08:41:32 EDT 2020" end="1084" start="870" starttimestamp="1599653169283" timestamp="2123039" />
  <DocumentChange __id="2969" _type="Delete" date="Wed Sep 09 08:41:33 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7556" docExpressionCount="724" docLength="10345" endLine="73" length="214" offset="3223" startLine="70" starttimestamp="1599653169283" timestamp="2124049">
    <text><![CDATA[if (anOutputComponents.length != 4) {
//			System.err.println("Output does not have 4 command separated components");
			throw new NotGradableException("Output does not have 4 command separated components");
		}]]></text>
  </DocumentChange>
  <Command __id="2970" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:33 EDT 2020" starttimestamp="1599653169283" timestamp="2124059" />
  <DocumentChange __id="2971" _type="Delete" date="Wed Sep 09 08:41:33 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7555" docExpressionCount="724" docLength="10344" endLine="70" length="1" offset="3222" startLine="70" starttimestamp="1599653169283" timestamp="2124579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="2972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:33 EDT 2020" starttimestamp="1599653169283" timestamp="2124589" />
  <DocumentChange __id="2973" _type="Delete" date="Wed Sep 09 08:41:34 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7554" docExpressionCount="724" docLength="10343" endLine="70" length="1" offset="3221" startLine="70" starttimestamp="1599653169283" timestamp="2124749">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="2974" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:34 EDT 2020" starttimestamp="1599653169283" timestamp="2124749" />
  <Command __id="2976" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:34 EDT 2020" starttimestamp="1599653169283" timestamp="2125209" />
  <Command __id="2977" _type="SelectTextCommand" caretOffset="872" date="Wed Sep 09 08:41:37 EDT 2020" end="1140" start="872" starttimestamp="1599653169283" timestamp="2127749" />
  <Command __id="2979" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:37 EDT 2020" starttimestamp="1599653169283" timestamp="2128249" />
  <Command __id="2981" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:37 EDT 2020" starttimestamp="1599653169283" timestamp="2128439" />
  <Command __id="2983" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:41:38 EDT 2020" starttimestamp="1599653169283" timestamp="2129109" />
  <Command __id="2984" _type="SelectTextCommand" caretOffset="1733" date="Wed Sep 09 08:42:09 EDT 2020" end="1733" start="699" starttimestamp="1599653169283" timestamp="2160269" />
  <Command __id="2986" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:10 EDT 2020" starttimestamp="1599653169283" timestamp="2160819" />
  <Command __id="2988" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:10 EDT 2020" starttimestamp="1599653169283" timestamp="2161139" />
  <Command __id="2990" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:10 EDT 2020" starttimestamp="1599653169283" timestamp="2161499" />
  <Command __id="2991" _type="MoveCaretCommand" caretOffset="1620" date="Wed Sep 09 08:42:12 EDT 2020" docOffset="3973" starttimestamp="1599653169283" timestamp="2163699" />
  <Command __id="2992" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Sep 09 08:42:13 EDT 2020" starttimestamp="1599653169283" timestamp="2164339" />
  <Command __id="2994" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:13 EDT 2020" starttimestamp="1599653169283" timestamp="2164589" />
  <Command __id="2996" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2164769" />
  <Command __id="2998" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2164919" />
  <Command __id="3000" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2165059" />
  <Command __id="3002" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2165199" />
  <Command __id="3004" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2165349" />
  <Command __id="3006" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2165479" />
  <Command __id="3008" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:42:14 EDT 2020" starttimestamp="1599653169283" timestamp="2165609" />
  <Command __id="3009" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168269" />
  <Command __id="3010" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168369" />
  <Command __id="3011" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168419" />
  <Command __id="3012" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168419" />
  <Command __id="3013" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168429" />
  <Command __id="3014" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168429" />
  <Command __id="3015" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:17 EDT 2020" starttimestamp="1599653169283" timestamp="2168449" />
  <Command __id="3016" _type="MoveCaretCommand" caretOffset="1606" date="Wed Sep 09 08:42:19 EDT 2020" docOffset="3959" starttimestamp="1599653169283" timestamp="2169949" />
  <Command __id="3018" _type="InsertStringCommand" date="Wed Sep 09 08:42:19 EDT 2020" starttimestamp="1599653169283" timestamp="2170099" timestamp2="2170099">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3020" _type="InsertStringCommand" date="Wed Sep 09 08:42:19 EDT 2020" starttimestamp="1599653169283" timestamp="2170519" timestamp2="2170519">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2975" _type="Delete" date="Wed Sep 09 08:41:34 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7552" docExpressionCount="724" docLength="10341" endLine="70" length="2" offset="3219" startLine="69" starttimestamp="1599653169283" timestamp="2125199">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2978" _type="Delete" date="Wed Sep 09 08:41:37 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7544" docExpressionCount="724" docLength="10073" endLine="74" length="268" offset="3225" startLine="71" starttimestamp="1599653169283" timestamp="2128249">
    <text><![CDATA[		//might be pointless, goal is to prevent multiple true/false statements in output
//		if (anOutputComponents[3].length()>7) {
//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");
//		}	]]></text>
  </DocumentChange>
  <DocumentChange __id="2980" _type="Delete" date="Wed Sep 09 08:41:37 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7542" docExpressionCount="724" docLength="10071" endLine="71" length="2" offset="3223" startLine="70" starttimestamp="1599653169283" timestamp="2128439">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2982" _type="Delete" date="Wed Sep 09 08:41:38 EDT 2020" docASTNodeCount="966" docActiveCodeLength="7541" docExpressionCount="724" docLength="10070" endLine="70" length="1" offset="3222" startLine="70" starttimestamp="1599653169283" timestamp="2129109">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2985" _type="Delete" date="Wed Sep 09 08:42:10 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6669" docExpressionCount="643" docLength="9036" endLine="88" length="1034" offset="3052" startLine="68" starttimestamp="1599653169283" timestamp="2160809">
    <text><![CDATA[protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {
		String[] anOutputComponents = anOutput.split(",");
	
		
		Integer aDistance = Integer.parseInt(anOutputComponents[0]);
		Integer aDuration = Integer.parseInt(anOutputComponents[1]);
		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);
		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};
		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		

//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);
//		new line character is captured in the output. This had caused it to default to false.
		
		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");
		boolean aReturnValue = aResult.equals(anActualResult);
		if (!aReturnValue) {
			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);

		}
		return aReturnValue;
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="2987" _type="Delete" date="Wed Sep 09 08:42:10 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6668" docExpressionCount="643" docLength="9035" endLine="68" length="1" offset="3051" startLine="68" starttimestamp="1599653169283" timestamp="2161129">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="2989" _type="Delete" date="Wed Sep 09 08:42:10 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6666" docExpressionCount="643" docLength="9033" endLine="68" length="2" offset="3049" startLine="67" starttimestamp="1599653169283" timestamp="2161489">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2993" _type="Delete" date="Wed Sep 09 08:42:13 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6665" docExpressionCount="643" docLength="9032" endLine="85" length="1" offset="3973" startLine="85" starttimestamp="1599653169283" timestamp="2164589">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2995" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6664" docExpressionCount="643" docLength="9031" endLine="85" length="1" offset="3972" startLine="85" starttimestamp="1599653169283" timestamp="2164769">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2997" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6663" docExpressionCount="643" docLength="9030" endLine="85" length="1" offset="3971" startLine="85" starttimestamp="1599653169283" timestamp="2164909">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2999" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6662" docExpressionCount="643" docLength="9029" endLine="85" length="1" offset="3970" startLine="85" starttimestamp="1599653169283" timestamp="2165049">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3001" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6661" docExpressionCount="643" docLength="9028" endLine="85" length="1" offset="3969" startLine="85" starttimestamp="1599653169283" timestamp="2165199">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3003" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6660" docExpressionCount="643" docLength="9027" endLine="85" length="1" offset="3968" startLine="85" starttimestamp="1599653169283" timestamp="2165339">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="3005" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6659" docExpressionCount="643" docLength="9026" endLine="85" length="1" offset="3967" startLine="85" starttimestamp="1599653169283" timestamp="2165469">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3007" _type="Delete" date="Wed Sep 09 08:42:14 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6658" docExpressionCount="643" docLength="9025" endLine="85" length="1" offset="3966" startLine="85" starttimestamp="1599653169283" timestamp="2165609">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="3017" _type="Insert" date="Wed Sep 09 08:42:19 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6659" docExpressionCount="643" docLength="9026" length="1" offset="3959" starttimestamp="1599653169283" timestamp="2170089">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3019" _type="Insert" date="Wed Sep 09 08:42:19 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6660" docExpressionCount="643" docLength="9027" length="1" offset="3960" starttimestamp="1599653169283" timestamp="2170509">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3021" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2171809" />
  <Command __id="3022" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2171949" />
  <Command __id="3023" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2171999" />
  <Command __id="3024" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2171999" />
  <Command __id="3025" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2172019" />
  <Command __id="3026" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2172019" />
  <Command __id="3027" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:42:21 EDT 2020" starttimestamp="1599653169283" timestamp="2172029" />
  <Command __id="3028" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:42:46 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2197489">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3029" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:42:46 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="2197659" />
  <Command __id="3031" _type="MoveCaretCommand" caretOffset="1608" date="Wed Sep 09 08:44:25 EDT 2020" docOffset="3961" starttimestamp="1599653169283" timestamp="2296258" />
  <Command __id="3032" _type="CopyCommand" date="Wed Sep 09 08:51:22 EDT 2020" starttimestamp="1599653169283" timestamp="2712949" />
  <Command __id="3033" _type="ShellCommand" date="Wed Sep 09 08:51:23 EDT 2020" starttimestamp="1599653169283" timestamp="2714568" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3030" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:44:25 EDT 2020" docASTNodeCount="844" docActiveCodeLength="6660" docExpressionCount="643" docLength="9027" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2296158">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\CompareSafetyComputationsTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String derivedMethodName = "isDerivedSafe";¶	protected final String inferredMethodName = "isInferredSafe";¶	¶	public CompareSafetyComputationsTest() {¶	}	¶	¶	protected  String derivedMethodName() {¶		return derivedMethodName;¶	}¶	¶	@Override¶	protected String methodName() {¶		return inferredMethodName;¶	}¶	¶	protected  String inferredMethodName() {¶		return inferredMethodName;¶	}¶¶"), Diff(DELETE,"	protected boolean verifyInferred(String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶"), Diff(EQUAL,"	¶	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {¶		¶		for(int i=0;i<anOutputLines.length;i++) {¶			if(i==0) ¶				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))¶					continue;¶				else {¶					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");¶					return false;¶				}¶			String [] anOutputComponents=anOutputLines[i].split(",");¶			if(anOutputComponents.length!=5)¶				throw new NotGradableException("Output does not have 5 command separated components");¶			¶			String dataValues=anOutputComponents[0]+","+anOutputComponents[1]+","+anOutputComponents[2]+",";¶			if("), Diff(INSERT,"!("), Diff(EQUAL,"verify(dataValues+anOutputComponents[4]"), Diff(DELETE,")"), Diff(INSERT,",aUtilityClass,aDerivedVerifyingMethod)¶			    &verify(dataValues+anOutputComponents[5],aUtilityClass,aInferredVerifyingMethod)))¶				return false;¶			"), Diff(EQUAL,"¶			¶		}¶		¶		¶	    return true;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines1 = anOutput1.split("\n");¶		    if (anOutputLines1.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶		    String [] anOutputLines2 = anOutput2.split("\n");¶		    if (anOutputLines2.length != 11) {¶		    	return fail("Output does not match desired line length");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		   ¶		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); ¶		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());¶		    ¶		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)¶		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);¶		    ¶		    return passing?pass():fail("View console output for more information");¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class CompareSafetyComputationsTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String derivedMethodName = "isDerivedSafe";
	protected final String inferredMethodName = "isInferredSafe";
	
	public CompareSafetyComputationsTest() {
	}	
	
	protected  String derivedMethodName() {
		return derivedMethodName;
	}
	
	@Override
	protected String methodName() {
		return inferredMethodName;
	}
	
	protected  String inferredMethodName() {
		return inferredMethodName;
	}

	
	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aDerivedVerifyingMethod,Method aInferredVerifyingMethod) throws Throwable {
		
		for(int i=0;i<anOutputLines.length;i++) {
			if(i==0) 
				if(anOutputLines[i].matches("[Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred\n*?"))
					continue;
				else {
					System.out.println("Initial line does not match required format: [Dd]istance,[Dd]uration,[Ee]xhalation,[Dd]erived,[Ii]nferred");
					return false;
				}
			String [] anOutputComponents=anOutputLines[i].split(",");
			if(anOutputComponents.length!=5)
				throw new NotGradableException("Output does not have 5 command separated components");
			
			String dataValues=anOutputComponents[0]+","+anOutputComponents[1]+","+anOutputComponents[2]+",";
			if(!(verify(dataValues+anOutputComponents[4],aUtilityClass,aDerivedVerifyingMethod)
			    &verify(dataValues+anOutputComponents[5],aUtilityClass,aInferredVerifyingMethod)))
				return false;
			
			
		}
		
		
	    return true;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 11) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethodDerived =  aUtilityClass.getMethod(derivedMethodName(), verifyingArgumentTypes()); 
		    Method aVerifyingMethodInferred=  aUtilityClass.getMethod(inferredMethodName(), verifyingArgumentTypes());
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred)
		    			  &&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethodDerived,aVerifyingMethodInferred);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}


}
]]></snapshot>
  </Command>
  <Command __id="3034" _type="ShellCommand" date="Wed Sep 09 08:51:34 EDT 2020" starttimestamp="1599653169283" timestamp="2725478" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3035" _type="PasteCommand" date="Wed Sep 09 08:51:34 EDT 2020" starttimestamp="1599653169283" timestamp="2725678" />
  <Command __id="3036" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:35 EDT 2020" starttimestamp="1599653169283" timestamp="2725798" />
  <Command __id="3037" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:35 EDT 2020" starttimestamp="1599653169283" timestamp="2725968" />
  <Command __id="3038" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:35 EDT 2020" starttimestamp="1599653169283" timestamp="2725968" />
  <Command __id="3039" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:35 EDT 2020" starttimestamp="1599653169283" timestamp="2725988" />
  <Command __id="3040" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:35 EDT 2020" starttimestamp="1599653169283" timestamp="2725988" />
  <Command __id="3041" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:35 EDT 2020" starttimestamp="1599653169283" timestamp="2726008" />
  <Command __id="3043" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:51:41 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="2732398" />
  <Command __id="3042" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:51:41 EDT 2020" docASTNodeCount="854" docActiveCodeLength="6622" docExpressionCount="655" docLength="9028" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2732188">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGivenAndGeneratedCombinationInferredSafetyTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class PrintGivenAndGeneratedCombinationInferredSafetyTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String methodName = "printGivenAndGeneratedCombinationsDerivedSafety";

	//the expected output for first 8 lines
	protected static String[] anExpectedOutput= {
			"Distance,Duration,Exhalation,IsSafe",
			"13,30,30,true",
			"6,30,10,true",
			"27,30,50,true",
			"13,15,50,true",
			"13,120,10,true",
			"27,120,30,true",
			"6,15,30,true"
	};

	public PrintGivenAndGeneratedCombinationInferredSafetyTest() {
	}
	
	protected String[] anExpectedOutput() {
		return anExpectedOutput;
	}
	
	@Override
	protected  String methodName() {
		return methodName;
	}

	protected boolean isOutputValid(String[] anOutputLines,Class aUtilityClass,Method aVerifyingMethod) throws Throwable {
		String [] anExpectedOutputList=anExpectedOutput();
	    boolean passing=true;
	    for(int i=0;i<anOutputLines.length;i++) {
	    	if(i<anExpectedOutputList.length) {
	    		if(!anExpectedOutputList[i].equals(anOutputLines[i])) {
	    			passing=false;
	    			System.err.println("Output line: \""+anOutputLines[i]+"\" does not match expected \""+anExpectedOutputList[i]+"\"");
	    		}
	    	}else if (i==anExpectedOutputList.length) {
	    		if(!anOutputLines[i].matches("-+?")) {
	    			passing=false;
		    		System.err.println("Output line: \""+anOutputLines[i]+"\" does not match regex \"-+\"");
	    		}
	    	}else {
	    		if(!verify(anOutputLines[i],aUtilityClass,aVerifyingMethod)){
	    			passing=false;
	    			System.err.println("Result on line: \""+anOutputLines[i]+"\" does not match expected result for method:\""+ verifyingMethodName() +"\"");
	    		}
	    	}
	    }
	    return passing;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines1 = anOutput1.split("\n");
		    if (anOutputLines1.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
		    String [] anOutputLines2 = anOutput2.split("\n");
		    if (anOutputLines2.length != 19) {
		    	return fail("Output does not match desired line length");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		   
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
		    
		    boolean passing=isOutputValid(anOutputLines1,aUtilityClass,aVerifyingMethod)&&isOutputValid(anOutputLines2,aUtilityClass,aVerifyingMethod);
		    
		    return passing?pass():fail("View console output for more information");

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <Command __id="3045" _type="ShellCommand" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747258" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3046" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747288" />
  <Command __id="3047" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747298" />
  <Command __id="3048" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747318" />
  <Command __id="3049" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747338" />
  <Command __id="3050" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747338" />
  <Command __id="3051" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:51:56 EDT 2020" starttimestamp="1599653169283" timestamp="2747358" />
  <Command __id="3053" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:52:30 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="2780938" />
  <Command __id="3055" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Sep 09 08:52:47 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="2798238" />
  <Command __id="3056" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Wed Sep 09 08:52:47 EDT 2020" start_end="END" starttimestamp="1599653169283" timestamp="2798238" />
  <Command __id="3057" _type="ShellCommand" date="Wed Sep 09 08:52:47 EDT 2020" starttimestamp="1599653169283" timestamp="2798428" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3058" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:52:47 EDT 2020" starttimestamp="1599653169283" timestamp="2798448" />
  <Command __id="3059" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Wed Sep 09 08:52:47 EDT 2020" starttimestamp="1599653169283" timestamp="2798448" />
  <Command __id="3060" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:52:48 EDT 2020" starttimestamp="1599653169283" timestamp="2799078" />
  <Command __id="3061" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:52:48 EDT 2020" starttimestamp="1599653169283" timestamp="2799078" />
  <Command __id="3062" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:52:48 EDT 2020" starttimestamp="1599653169283" timestamp="2799098" />
  <Command __id="3063" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:52:48 EDT 2020" starttimestamp="1599653169283" timestamp="2799098" />
  <Command __id="3064" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:52:48 EDT 2020" starttimestamp="1599653169283" timestamp="2799108" />
  <Command __id="3065" _type="CopyCommand" date="Wed Sep 09 08:52:53 EDT 2020" starttimestamp="1599653169283" timestamp="2804528" />
  <Command __id="3066" _type="ShellCommand" date="Wed Sep 09 08:53:01 EDT 2020" starttimestamp="1599653169283" timestamp="2812688" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3052" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:52:30 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4864" docExpressionCount="507" docLength="7423" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2780728">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGeneratedCombinationTest.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶@MaxValue(6)¶public class PrintGeneratedCombinationTest extends AbstractPrintDerivedSafetyValidator {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶	protected final String methodName = "printGeneratedCombinationDerivedSafety";¶¶¶	public PrintGeneratedCombinationTest() {¶	}¶	@Override¶	protected  String methodName() {¶		return methodName;¶	}¶	¶	@Override¶	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException {¶		try {¶			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);¶			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();¶			¶//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  ¶		    if (aUtilityClass == null) {¶		    	return fail ("No utility class");¶		    }¶		    Class[] aParameterTypes = argumentTypes();¶		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);¶		    Object[] anArguments = getArguments();¶		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶		    ¶		    String anOutput1 = aResultWithOutput1.getOutput();¶		    if (anOutput1 == null || anOutput1.isEmpty() ) {¶		    	return fail("No Output");¶		    }¶		    ¶//		    String[] anOutputLines = anOutput.split("\n");¶		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);¶¶		    String anOutput2 = aResultWithOutput2.getOutput();¶		    if (anOutput2 == null || anOutput2.isEmpty()) {¶		    	return fail("No Output");¶		    }¶		    ¶		    if (anOutput1.equals(anOutput2)) {¶		    	return fail("Two successive calls return same output");¶		    }¶		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); ¶//		    Boolean aFirstValPassed = verify(anOutput1,aUtilityClass, aVerifyingMethod);¶		    ¶		    if (verify(anOutput1,aUtilityClass, aVerifyingMethod) && verify(anOutput2, aUtilityClass, aVerifyingMethod)) {¶		    	return pass();¶		    }¶		    return fail("One or more outputs of " + methodName() + " not consistent with result of method:" + verifyingMethodName);¶//		    String[] anOutputLines = anOutput.split("\n");¶		    ¶¶		} catch ( Throwable e) {¶			System.err.println(e);¶			throw new NotGradableException();¶		}¶	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3067" _type="ShellCommand" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829028" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3068" _type="PasteCommand" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829208" />
  <Command __id="3069" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829318" />
  <Command __id="3070" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829428" />
  <Command __id="3071" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829428" />
  <Command __id="3072" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829448" />
  <Command __id="3073" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829448" />
  <Command __id="3074" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:53:18 EDT 2020" starttimestamp="1599653169283" timestamp="2829468" />
  <Command __id="3076" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:53:23 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="2834658" />
  <Command __id="3077" _type="MoveCaretCommand" caretOffset="362" date="Wed Sep 09 08:53:34 EDT 2020" docOffset="2715" starttimestamp="1599653169283" timestamp="2845018" />
  <Command __id="3079" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:35 EDT 2020" starttimestamp="1599653169283" timestamp="2845798" />
  <Command __id="3081" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:35 EDT 2020" starttimestamp="1599653169283" timestamp="2845968" />
  <Command __id="3083" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:35 EDT 2020" starttimestamp="1599653169283" timestamp="2846138" />
  <Command __id="3085" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:35 EDT 2020" starttimestamp="1599653169283" timestamp="2846288" />
  <Command __id="3087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:35 EDT 2020" starttimestamp="1599653169283" timestamp="2846438" />
  <Command __id="3089" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:35 EDT 2020" starttimestamp="1599653169283" timestamp="2846548" />
  <Command __id="3091" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:53:36 EDT 2020" starttimestamp="1599653169283" timestamp="2846978" />
  <Command __id="3093" _type="InsertStringCommand" date="Wed Sep 09 08:53:36 EDT 2020" starttimestamp="1599653169283" timestamp="2847398" timestamp2="2847398">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3095" _type="InsertStringCommand" date="Wed Sep 09 08:53:36 EDT 2020" starttimestamp="1599653169283" timestamp="2847578" timestamp2="2847578">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3097" _type="InsertStringCommand" date="Wed Sep 09 08:53:37 EDT 2020" starttimestamp="1599653169283" timestamp="2847828" timestamp2="2847828">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3099" _type="InsertStringCommand" date="Wed Sep 09 08:53:37 EDT 2020" starttimestamp="1599653169283" timestamp="2848218" timestamp2="2848218">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3101" _type="InsertStringCommand" date="Wed Sep 09 08:53:37 EDT 2020" starttimestamp="1599653169283" timestamp="2848428" timestamp2="2848428">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3103" _type="InsertStringCommand" date="Wed Sep 09 08:53:37 EDT 2020" starttimestamp="1599653169283" timestamp="2848548" timestamp2="2848548">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3105" _type="InsertStringCommand" date="Wed Sep 09 08:53:37 EDT 2020" starttimestamp="1599653169283" timestamp="2848668" timestamp2="2848668">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3107" _type="InsertStringCommand" date="Wed Sep 09 08:53:38 EDT 2020" starttimestamp="1599653169283" timestamp="2848838" timestamp2="2848838">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3108" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889058" />
  <Command __id="3109" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889188" />
  <Command __id="3110" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889298" />
  <Command __id="3111" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889298" />
  <Command __id="3112" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889318" />
  <Command __id="3113" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889318" />
  <Command __id="3114" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:54:18 EDT 2020" starttimestamp="1599653169283" timestamp="2889338" />
  <Command __id="3116" _type="SelectTextCommand" caretOffset="1245" date="Wed Sep 09 08:54:19 EDT 2020" end="1245" start="1159" starttimestamp="1599653169283" timestamp="2890378" />
  <Command __id="3075" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:53:23 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4892" docExpressionCount="507" docLength="7451" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2834458">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGeneratedCombinationInferredSafetyTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class PrintGeneratedCombinationInferredSafetyTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String methodName = "printGeneratedCombinationDerivedSafety";


	public PrintGeneratedCombinationInferredSafetyTest() {
	}
	@Override
	protected  String methodName() {
		return methodName;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
//		    String[] anOutputLines = anOutput.split("\n");
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);

		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty()) {
		    	return fail("No Output");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
//		    Boolean aFirstValPassed = verify(anOutput1,aUtilityClass, aVerifyingMethod);
		    
		    if (verify(anOutput1,aUtilityClass, aVerifyingMethod) && verify(anOutput2, aUtilityClass, aVerifyingMethod)) {
		    	return pass();
		    }
		    return fail("One or more outputs of " + methodName() + " not consistent with result of method:" + verifyingMethodName);
//		    String[] anOutputLines = anOutput.split("\n");
		    

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3078" _type="Delete" date="Wed Sep 09 08:53:35 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4891" docExpressionCount="507" docLength="7450" endLine="49" length="1" offset="2714" startLine="49" starttimestamp="1599653169283" timestamp="2845788">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="3080" _type="Delete" date="Wed Sep 09 08:53:35 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4890" docExpressionCount="507" docLength="7449" endLine="49" length="1" offset="2713" startLine="49" starttimestamp="1599653169283" timestamp="2845968">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3082" _type="Delete" date="Wed Sep 09 08:53:35 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4889" docExpressionCount="507" docLength="7448" endLine="49" length="1" offset="2712" startLine="49" starttimestamp="1599653169283" timestamp="2846138">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="3084" _type="Delete" date="Wed Sep 09 08:53:35 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4888" docExpressionCount="507" docLength="7447" endLine="49" length="1" offset="2711" startLine="49" starttimestamp="1599653169283" timestamp="2846288">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="3086" _type="Delete" date="Wed Sep 09 08:53:35 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4887" docExpressionCount="507" docLength="7446" endLine="49" length="1" offset="2710" startLine="49" starttimestamp="1599653169283" timestamp="2846438">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3088" _type="Delete" date="Wed Sep 09 08:53:35 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4886" docExpressionCount="507" docLength="7445" endLine="49" length="1" offset="2709" startLine="49" starttimestamp="1599653169283" timestamp="2846548">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3090" _type="Delete" date="Wed Sep 09 08:53:36 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4885" docExpressionCount="507" docLength="7444" endLine="49" length="1" offset="2708" startLine="49" starttimestamp="1599653169283" timestamp="2846968">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="3092" _type="Insert" date="Wed Sep 09 08:53:36 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4886" docExpressionCount="507" docLength="7445" length="1" offset="2708" starttimestamp="1599653169283" timestamp="2847398">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="3094" _type="Insert" date="Wed Sep 09 08:53:36 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4887" docExpressionCount="507" docLength="7446" length="1" offset="2709" starttimestamp="1599653169283" timestamp="2847578">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3096" _type="Insert" date="Wed Sep 09 08:53:37 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4888" docExpressionCount="507" docLength="7447" length="1" offset="2710" starttimestamp="1599653169283" timestamp="2847828">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="3098" _type="Insert" date="Wed Sep 09 08:53:37 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4889" docExpressionCount="507" docLength="7448" length="1" offset="2711" starttimestamp="1599653169283" timestamp="2848218">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3100" _type="Insert" date="Wed Sep 09 08:53:37 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4890" docExpressionCount="507" docLength="7449" length="1" offset="2712" starttimestamp="1599653169283" timestamp="2848418">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3102" _type="Insert" date="Wed Sep 09 08:53:37 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4891" docExpressionCount="507" docLength="7450" length="1" offset="2713" starttimestamp="1599653169283" timestamp="2848548">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3104" _type="Insert" date="Wed Sep 09 08:53:37 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4892" docExpressionCount="507" docLength="7451" length="1" offset="2714" starttimestamp="1599653169283" timestamp="2848668">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3106" _type="Insert" date="Wed Sep 09 08:53:38 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4893" docExpressionCount="507" docLength="7452" length="1" offset="2715" starttimestamp="1599653169283" timestamp="2848838">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="3115" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:54:19 EDT 2020" docASTNodeCount="645" docActiveCodeLength="4482" docExpressionCount="488" docLength="7242" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2890258">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\AbstractPrintDerivedSafetyValidator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;¶¶import java.lang.reflect.Method;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.config.BasicExecutionSpecification;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.BasicProjectExecution;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.ResultWithOutput;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;¶import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;¶import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import main.ClassRegistry;¶import util.annotations.MaxValue;¶import util.trace.Tracer;¶¶public abstract class AbstractPrintDerivedSafetyValidator extends PassFailJUnitTestCase {¶	public static final int TIME_OUT_MSECS = 300; // secs¶	¶¶	protected static  String verifyingMethodName = "isDerivedSafe";¶	protected static Class[] NO_ARG_TYPES = {};¶	protected static Class[] VERIFYING_ARG_TYPES = {Integer.TYPE, Integer.TYPE, Integer.TYPE};¶¶	protected static Object[] NO_ARGS = {};¶¶	protected  abstract String methodName();¶	¶	protected  String verifyingMethodName() {¶		return verifyingMethodName;¶	}¶	¶	protected  Class[] argumentTypes() {¶		return NO_ARG_TYPES;¶	}¶	¶	protected  Class[] verifyingArgumentTypes() {¶		return VERIFYING_ARG_TYPES;¶	}¶	¶	¶	protected  Object[] getArguments() {¶		return NO_ARGS;¶	}¶¶	protected boolean verify (String anOutput, Class aStaticClass, Method aVerifyingMethod) throws Throwable {¶		String[] anOutputComponents = anOutput.split(",");¶		if (anOutputComponents.length != 4) {¶//			System.err.println("Output does not have 4 command separated components");¶			throw new NotGradableException("Output does not have 4 command separated components");¶		}¶		¶		//might be pointless, goal is to prevent multiple true/false statements in output¶//		if (anOutputComponents[3].length()>7) {¶//			throw new NotGradableException("Result output, \""+anOutputComponents[3]+"\" exceeds reasonably expected character length.");¶//		}	¶		¶		Integer aDistance = Integer.parseInt(anOutputComponents[0]);¶		Integer aDuration = Integer.parseInt(anOutputComponents[1]);¶		Integer anExhalationLevel =  Integer.parseInt(anOutputComponents[2]);¶		Object[] anArgs = {aDistance, aDuration, anExhalationLevel};¶		Boolean aResult = (Boolean) BasicProjectExecution.timedInvoke(aStaticClass, aVerifyingMethod, anArgs, TIME_OUT_MSECS);		¶¶//		Boolean anActualResult = Boolean.parseBoolean(anOutputComponents[3]);¶//		new line character is captured in the output. This had caused it to default to false.¶		¶		Boolean anActualResult = anOutputComponents[3].toLowerCase().matches("true\n*?");¶		boolean aReturnValue = aResult.equals(anActualResult);¶		if (!aReturnValue) {¶			Tracer.info("Expected result:" + aResult + " not equal to actual result:" + anActualResult);¶¶		}¶		return aReturnValue;¶	}¶	¶	¶¶	@Override¶	public abstract TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,¶			NotGradableException;¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {¶//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {¶//			if (anSNode instanceof ExternalMethodSNode) {¶//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//			}¶//		}¶//	}¶//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());¶//		if (aMethodSNode == null) {¶//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);¶//			if (aMethodSNode != null) {¶//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );¶//			}¶//		}¶//		if (aMethodSNode != null) {¶//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);¶//		}¶//	}¶//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {¶////		MethodSNode foundMethodSNode = null;¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			if (aFileName.equals(aRootOfFileSNode.getFileName()))¶//				continue;¶//			¶//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {¶//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {¶//					if (anSNode.toString().equals(anExternalMethodSNode)) {¶//						return (MethodSNode) anSNode;¶//						¶//					}¶////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);¶//				}¶//			}¶//		}¶//		return null;¶//	}¶//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {¶//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {¶//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);¶//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);¶//			¶//		}¶//¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3117" _type="SelectTextCommand" caretOffset="643" date="Wed Sep 09 08:54:31 EDT 2020" end="643" start="567" starttimestamp="1599653169283" timestamp="2901738" />
  <Command __id="3118" _type="CopyCommand" date="Wed Sep 09 08:54:31 EDT 2020" starttimestamp="1599653169283" timestamp="2902538" />
  <Command __id="3120" _type="MoveCaretCommand" caretOffset="0" date="Wed Sep 09 08:54:38 EDT 2020" docOffset="0" starttimestamp="1599653169283" timestamp="2908768" />
  <Command __id="3121" _type="MoveCaretCommand" caretOffset="506" date="Wed Sep 09 08:54:40 EDT 2020" docOffset="2859" starttimestamp="1599653169283" timestamp="2911018" />
  <Command __id="3123" _type="InsertStringCommand" date="Wed Sep 09 08:54:41 EDT 2020" starttimestamp="1599653169283" timestamp="2911768" timestamp2="2911768">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3125" _type="InsertStringCommand" date="Wed Sep 09 08:54:41 EDT 2020" starttimestamp="1599653169283" timestamp="2911918" timestamp2="2911918">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3127" _type="PasteCommand" date="Wed Sep 09 08:54:41 EDT 2020" starttimestamp="1599653169283" timestamp="2912488" />
  <Command __id="3119" _type="DiffBasedFileOpenCommand" date="Wed Sep 09 08:54:37 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4890" docExpressionCount="507" docLength="7449" projectName="Comp524LocalChecks" starttimestamp="1599653169283" timestamp="2908648">
    <filePath><![CDATA[C:\Users\ajwortas\git\Comp524LocalChecks\src\gradingTools\comp524f20\assignment1\testcases\socialDistance\utility\PrintGeneratedCombinationDerivedSafetyTest.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp524f20.assignment1.testcases.socialDistance.utility;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.ResultWithOutput;
import grader.basics.execution.RunningProject;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.project.source.ABasicTextManager;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp524f19.assignment1.testcases.MainClassProvided;
import gradingTools.comp524f20.assignment1.SocialDistanceClassRegistry;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceClassRegistryProvided;
import gradingTools.comp524f20.assignment1.testcases.socialDistance.requiredClasses.SocialDistanceUtilityProvided;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.shared.testcases.openmp.OpenMPPragma;
import gradingTools.shared.testcases.openmp.OpenMPUtils;
import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;
import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;
import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;
import gradingTools.shared.testcases.openmp.scannedTree.SNode;
import gradingTools.shared.testcases.utils.LinesMatchKind;
import gradingTools.shared.testcases.utils.LinesMatcher;
import gradingTools.utils.RunningProjectUtils;
import main.ClassRegistry;
import util.annotations.MaxValue;
import util.trace.Tracer;
@MaxValue(6)
public class PrintGeneratedCombinationDerivedSafetyTest extends AbstractPrintDerivedSafetyValidator {
	public static final int TIME_OUT_MSECS = 300; // secs
	
	protected final String methodName = "printGeneratedCombinationDerivedSafety";


	public PrintGeneratedCombinationDerivedSafetyTest() {
	}
	@Override
	protected  String methodName() {
		return methodName;
	}
	
	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {
			SocialDistanceUtilityProvided aSocialDistanceUilityProvided = (SocialDistanceUtilityProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(SocialDistanceUtilityProvided.class);
			Class aUtilityClass = aSocialDistanceUilityProvided.getRequiredClass();
			
//			SocialDistanceClassRegistry aClassRegistry = aClassRegistryProvided.getTimingOutClassRegistryProxy();  
		    if (aUtilityClass == null) {
		    	return fail ("No utility class");
		    }
		    Class[] aParameterTypes = argumentTypes();
		    Method aMethod = aUtilityClass.getMethod(methodName(), aParameterTypes);
		    Object[] anArguments = getArguments();
		    ResultWithOutput aResultWithOutput1 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);
		    
		    String anOutput1 = aResultWithOutput1.getOutput();
		    if (anOutput1 == null || anOutput1.isEmpty() ) {
		    	return fail("No Output");
		    }
		    
//		    String[] anOutputLines = anOutput.split("\n");
		    ResultWithOutput aResultWithOutput2 = BasicProjectExecution.timedInteractiveInvoke(aUtilityClass, aMethod, anArguments, TIME_OUT_MSECS);

		    String anOutput2 = aResultWithOutput2.getOutput();
		    if (anOutput2 == null || anOutput2.isEmpty()) {
		    	return fail("No Output");
		    }
		    
		    if (anOutput1.equals(anOutput2)) {
		    	return fail("Two successive calls return same output");
		    }
		    Method aVerifyingMethod =  aUtilityClass.getMethod(verifyingMethodName(), verifyingArgumentTypes()); 
//		    Boolean aFirstValPassed = verify(anOutput1,aUtilityClass, aVerifyingMethod);
		    
		    if (verify(anOutput1,aUtilityClass, aVerifyingMethod) && verify(anOutput2, aUtilityClass, aVerifyingMethod)) {
		    	return pass();
		    }
		    return fail("One or more outputs of " + methodName() + " not consistent with result of method:" + verifyingMethodName);
//		    String[] anOutputLines = anOutput.split("\n");
		    

		} catch ( Throwable e) {
			System.err.println(e);
			throw new NotGradableException();
		}
	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode) {
//		for (SNode anSNode:aRootOfFileSNode.getChildren()) {
//			if (anSNode instanceof ExternalMethodSNode) {
//				processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//			}
//		}
//	}
//	public static void processExternalMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
//		MethodSNode aMethodSNode = aRootOfProgramSNode.getExternalToInternalMethod().get(anExternalMethodSNode.toString());
//		if (aMethodSNode == null) {
//			aMethodSNode = findMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, anExternalMethodSNode);
//			if (aMethodSNode != null) {
//				aRootOfProgramSNode.getExternalToInternalMethod().put(anExternalMethodSNode.toString(),aMethodSNode );
//			}
//		}
//		if (aMethodSNode != null) {
//			anExternalMethodSNode.setActualMethodSNode(aMethodSNode);
//		}
//	}
//	public static MethodSNode findMethodSNode (RootOfProgramSNode aRootOfProgramSNode, RootOfFileSNode aRootOfFileSNode, ExternalMethodSNode anExternalMethodSNode) {
////		MethodSNode foundMethodSNode = null;
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			if (aFileName.equals(aRootOfFileSNode.getFileName()))
//				continue;
//			
//			RootOfFileSNode aSearchedRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			 for (SNode anSNode:aSearchedRootOfFileSNode.getChildren()) {
//				if (anSNode instanceof MethodSNode && !(anSNode instanceof ExternalMethodSNode)) {
//					if (anSNode.toString().equals(anExternalMethodSNode)) {
//						return (MethodSNode) anSNode;
//						
//					}
////					processExternalMethodSNode(aRootOfProgramSNode, aRootOfFileSNode, (ExternalMethodSNode) anSNode);
//				}
//			}
//		}
//		return null;
//	}
//	public static void processExternalMethodSNodes (RootOfProgramSNode aRootOfProgramSNode) {
//		for (String aFileName:aRootOfProgramSNode.getFileNameToSNode().keySet()) {
//			RootOfFileSNode aRootOfFileSNode = aRootOfProgramSNode.getFileNameToSNode().get(aFileName);
//			processExternalMethodSNodes(aRootOfProgramSNode, aRootOfFileSNode);
//			
//		}
//
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3122" _type="Insert" date="Wed Sep 09 08:54:41 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4893" docExpressionCount="507" docLength="7452" length="3" offset="2859" starttimestamp="1599653169283" timestamp="2911758">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3124" _type="Insert" date="Wed Sep 09 08:54:41 EDT 2020" docASTNodeCount="640" docActiveCodeLength="4896" docExpressionCount="507" docLength="7455" length="3" offset="2862" starttimestamp="1599653169283" timestamp="2911908">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3126" _type="Replace" date="Wed Sep 09 08:54:41 EDT 2020" docASTNodeCount="648" docActiveCodeLength="4972" docExpressionCount="510" docLength="7531" endLine="59" insertionLength="77" int_docASTNodeCount="640" int_docActiveCodeLength="4895" int_docExpressionCount="507" int_docLength="7454" length="1" offset="2864" startLine="59" starttimestamp="1599653169283" timestamp="2912448">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected  String verifyingMethodName() {
		return verifyingMethodName;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3129" _type="Insert" date="Wed Sep 09 08:54:43 EDT 2020" docASTNodeCount="648" docActiveCodeLength="4975" docExpressionCount="510" docLength="7534" length="3" offset="2862" starttimestamp="1599653169283" timestamp="2914328">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3131" _type="Insert" date="Wed Sep 09 08:54:44 EDT 2020" docASTNodeCount="648" docActiveCodeLength="4976" docExpressionCount="510" docLength="7535" length="1" offset="2865" starttimestamp="1599653169283" timestamp="2914798">
    <text><![CDATA[@]]></text>
  </DocumentChange>
  <DocumentChange __id="3133" _type="Insert" date="Wed Sep 09 08:54:44 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4977" docExpressionCount="512" docLength="7536" length="1" offset="2866" starttimestamp="1599653169283" timestamp="2915138">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="3135" _type="Insert" date="Wed Sep 09 08:54:44 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4978" docExpressionCount="512" docLength="7537" length="1" offset="2867" starttimestamp="1599653169283" timestamp="2915288">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="3137" _type="Insert" date="Wed Sep 09 08:54:44 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4979" docExpressionCount="512" docLength="7538" length="1" offset="2868" starttimestamp="1599653169283" timestamp="2915478">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3139" _type="Insert" date="Wed Sep 09 08:54:44 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4980" docExpressionCount="512" docLength="7539" length="1" offset="2869" starttimestamp="1599653169283" timestamp="2915688">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3141" _type="Insert" date="Wed Sep 09 08:54:45 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4981" docExpressionCount="512" docLength="7540" length="1" offset="2870" starttimestamp="1599653169283" timestamp="2915818">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3143" _type="Insert" date="Wed Sep 09 08:54:45 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4982" docExpressionCount="512" docLength="7541" length="1" offset="2871" starttimestamp="1599653169283" timestamp="2915948">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="3145" _type="Insert" date="Wed Sep 09 08:54:45 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4983" docExpressionCount="512" docLength="7542" length="1" offset="2872" starttimestamp="1599653169283" timestamp="2916048">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="3147" _type="Insert" date="Wed Sep 09 08:54:45 EDT 2020" docASTNodeCount="650" docActiveCodeLength="4984" docExpressionCount="512" docLength="7543" length="1" offset="2873" starttimestamp="1599653169283" timestamp="2916188">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="3128" _type="MoveCaretCommand" caretOffset="509" date="Wed Sep 09 08:54:42 EDT 2020" docOffset="2862" starttimestamp="1599653169283" timestamp="2913628" />
  <Command __id="3130" _type="InsertStringCommand" date="Wed Sep 09 08:54:43 EDT 2020" starttimestamp="1599653169283" timestamp="2914338" timestamp2="2914338">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3132" _type="InsertStringCommand" date="Wed Sep 09 08:54:44 EDT 2020" starttimestamp="1599653169283" timestamp="2914798" timestamp2="2914798">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="3134" _type="InsertStringCommand" date="Wed Sep 09 08:54:44 EDT 2020" starttimestamp="1599653169283" timestamp="2915148" timestamp2="2915148">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="3136" _type="InsertStringCommand" date="Wed Sep 09 08:54:44 EDT 2020" starttimestamp="1599653169283" timestamp="2915298" timestamp2="2915298">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="3138" _type="InsertStringCommand" date="Wed Sep 09 08:54:44 EDT 2020" starttimestamp="1599653169283" timestamp="2915478" timestamp2="2915478">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3140" _type="InsertStringCommand" date="Wed Sep 09 08:54:44 EDT 2020" starttimestamp="1599653169283" timestamp="2915698" timestamp2="2915698">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3142" _type="InsertStringCommand" date="Wed Sep 09 08:54:45 EDT 2020" starttimestamp="1599653169283" timestamp="2915828" timestamp2="2915828">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3144" _type="InsertStringCommand" date="Wed Sep 09 08:54:45 EDT 2020" starttimestamp="1599653169283" timestamp="2915948" timestamp2="2915948">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3146" _type="InsertStringCommand" date="Wed Sep 09 08:54:45 EDT 2020" starttimestamp="1599653169283" timestamp="2916058" timestamp2="2916058">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3148" _type="InsertStringCommand" date="Wed Sep 09 08:54:45 EDT 2020" starttimestamp="1599653169283" timestamp="2916188" timestamp2="2916188">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3150" _type="MoveCaretCommand" caretOffset="363" date="Wed Sep 09 08:54:48 EDT 2020" docOffset="2716" starttimestamp="1599653169283" timestamp="2919388" />
  <Command __id="3152" _type="SelectTextCommand" caretOffset="643" date="Wed Sep 09 08:54:49 EDT 2020" end="643" start="567" starttimestamp="1599653169283" timestamp="2920268" />
  <Command __id="3153" _type="SelectTextCommand" caretOffset="267" date="Wed Sep 09 08:54:51 EDT 2020" end="336" start="267" starttimestamp="1599653169283" timestamp="2922499" />
  <Command __id="3154" _type="MoveCaretCommand" caretOffset="333" date="Wed Sep 09 08:54:52 EDT 2020" docOffset="2686" starttimestamp="1599653169283" timestamp="2922858" />
  <Command __id="3155" _type="SelectTextCommand" caretOffset="269" date="Wed Sep 09 08:54:53 EDT 2020" end="345" start="269" starttimestamp="1599653169283" timestamp="2924428" />
  <Command __id="3156" _type="MoveCaretCommand" caretOffset="269" date="Wed Sep 09 08:54:54 EDT 2020" docOffset="2622" starttimestamp="1599653169283" timestamp="2925039" />
  <Command __id="3157" _type="SelectTextCommand" caretOffset="333" date="Wed Sep 09 08:54:56 EDT 2020" end="333" start="269" starttimestamp="1599653169283" timestamp="2926719" />
  <Command __id="3158" _type="CopyCommand" date="Wed Sep 09 08:54:56 EDT 2020" starttimestamp="1599653169283" timestamp="2927148" />
  <Command __id="3160" _type="MoveCaretCommand" caretOffset="521" date="Wed Sep 09 08:54:57 EDT 2020" docOffset="2874" starttimestamp="1599653169283" timestamp="2928088" />
  <Command __id="3161" _type="MoveCaretCommand" caretOffset="371" date="Wed Sep 09 08:54:57 EDT 2020" docOffset="2724" starttimestamp="1599653169283" timestamp="2928709" />
  <Command __id="3163" _type="PasteCommand" date="Wed Sep 09 08:54:58 EDT 2020" starttimestamp="1599653169283" timestamp="2929558" />
  <Command __id="3164" _type="MoveCaretCommand" caretOffset="429" date="Wed Sep 09 08:55:00 EDT 2020" docOffset="2782" starttimestamp="1599653169283" timestamp="2931079" />
  <Command __id="3166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:00 EDT 2020" starttimestamp="1599653169283" timestamp="2931698" />
  <Command __id="3168" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:01 EDT 2020" starttimestamp="1599653169283" timestamp="2931798" />
  <Command __id="3170" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:01 EDT 2020" starttimestamp="1599653169283" timestamp="2931938" />
  <Command __id="3172" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:01 EDT 2020" starttimestamp="1599653169283" timestamp="2932078" />
  <Command __id="3174" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:01 EDT 2020" starttimestamp="1599653169283" timestamp="2932228" />
  <Command __id="3176" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:01 EDT 2020" starttimestamp="1599653169283" timestamp="2932368" />
  <Command __id="3178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Sep 09 08:55:02 EDT 2020" starttimestamp="1599653169283" timestamp="2932838" />
  <Command __id="3180" _type="InsertStringCommand" date="Wed Sep 09 08:55:02 EDT 2020" starttimestamp="1599653169283" timestamp="2933148" timestamp2="2933148">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3182" _type="InsertStringCommand" date="Wed Sep 09 08:55:02 EDT 2020" starttimestamp="1599653169283" timestamp="2933328" timestamp2="2933328">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3184" _type="InsertStringCommand" date="Wed Sep 09 08:55:02 EDT 2020" starttimestamp="1599653169283" timestamp="2933458" timestamp2="2933458">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3186" _type="InsertStringCommand" date="Wed Sep 09 08:55:02 EDT 2020" starttimestamp="1599653169283" timestamp="2933638" timestamp2="2933638">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3188" _type="InsertStringCommand" date="Wed Sep 09 08:55:03 EDT 2020" starttimestamp="1599653169283" timestamp="2933828" timestamp2="2933828">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3190" _type="InsertStringCommand" date="Wed Sep 09 08:55:03 EDT 2020" starttimestamp="1599653169283" timestamp="2933958" timestamp2="2933958">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3192" _type="InsertStringCommand" date="Wed Sep 09 08:55:03 EDT 2020" starttimestamp="1599653169283" timestamp="2934078" timestamp2="2934078">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3194" _type="InsertStringCommand" date="Wed Sep 09 08:55:03 EDT 2020" starttimestamp="1599653169283" timestamp="2934228" timestamp2="2934228">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3202" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:55:50 EDT 2020" starttimestamp="1599653169283" timestamp="2980939" />
  <Command __id="3203" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:55:50 EDT 2020" starttimestamp="1599653169283" timestamp="2981058" />
  <Command __id="3204" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:55:50 EDT 2020" starttimestamp="1599653169283" timestamp="2981058" />
  <Command __id="3205" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:55:50 EDT 2020" starttimestamp="1599653169283" timestamp="2981088" />
  <Command __id="3206" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:55:50 EDT 2020" starttimestamp="1599653169283" timestamp="2981088" />
  <Command __id="3207" _type="EclipseCommand" commandID="" date="Wed Sep 09 08:55:50 EDT 2020" starttimestamp="1599653169283" timestamp="2981108" />
  <Command __id="3208" _type="ShellCommand" date="Wed Sep 09 08:56:56 EDT 2020" starttimestamp="1599653169283" timestamp="3047198" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3210" _type="RunCommand" date="Wed Sep 09 08:59:03 EDT 2020" kind="HitBreakPoint" projectName="Assignment1" starttimestamp="1599653169283" timestamp="3174458" type="Run" />
  <Command __id="3211" _type="RunCommand" date="Wed Sep 09 08:59:03 EDT 2020" kind="HitBreakPoint" projectName="Assignment1" starttimestamp="1599653169283" timestamp="3174458" type="Run" />
  <Command __id="3212" _type="EHExceptionCommand" date="Wed Sep 09 08:59:04 EDT 2020" starttimestamp="1599653169283" timestamp="3174808" type="Exception">
    <outputString><![CDATA[Buffer traced nessages =true
]]></outputString>
  </Command>
  <Command __id="3213" _type="EHExceptionCommand" date="Wed Sep 09 08:59:05 EDT 2020" starttimestamp="1599653169283" timestamp="3175999" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="3214" _type="ShellCommand" date="Wed Sep 09 08:59:06 EDT 2020" starttimestamp="1599653169283" timestamp="3177346" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3215" _type="EHExceptionCommand" date="Wed Sep 09 08:59:17 EDT 2020" starttimestamp="1599653169283" timestamp="3188417" type="Exception">
    <outputString><![CDATA[53,101,40,false
3,79,78,false
]]></outputString>
  </Command>
  <Command __id="3216" _type="EHExceptionCommand" date="Wed Sep 09 08:59:17 EDT 2020" starttimestamp="1599653169283" timestamp="3188567" type="Exception">
    <outputString><![CDATA[Distance,Duration,Exhalation,IsSafe
13,30,30,true
6,30,10,true
27,30,50,true
13,15,50,true
13,120,10,true
27,120,30,true
6,15,30,true
---
34,119,87,false
9,24,37,false
51,129,39,false
0,60,42,false
17,17,24,true
45,96,49,false
43,58,55,false
37,92,92,false
37,99,37,false
24,91,57,false
Distance,Duration,Exhalation,IsSafe
13,30,30,true
6,30,10,true
27,30,50,true
13,15,50,true
13,120,10,true
27,120,30,true
6,15,30,true
---
49,99,20,true
17,65,43,false
40,79,86,false
12,9,90,false
18,38,14,false
36,54,45,false
19,76,55,false
38,120,75,false
43,97,74,false
0,72,58,false
9,[{6,30},{13,120}]
]]></outputString>
  </Command>
  <Command __id="3217" _type="ExceptionCommand" date="Wed Sep 09 08:59:17 EDT 2020" starttimestamp="1599653169283" timestamp="3188619" type="Exception">
    <exceptionString><![CDATA[0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
java.io.FileNotFoundException: tmpMethodout0.txt (Access is denied)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:291)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:234)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:123)
	at grader.basics.execution.BasicProjectExecution.redirectOutput(BasicProjectExecution.java:574)
	at grader.basics.execution.BasicProjectExecution.timedInteractiveInvoke(BasicProjectExecution.java:410)
	at gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest.test(PrintSafeDistancesAndDurationsTest.java:139)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:108)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:98)
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:282)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.testAll(AGradableJUnitSuite.java:254)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testAll(AGradableJUnitTopLevelSuite.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:631)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3973)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
31,[{27,30},{13,15}]
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4489)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2764)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
No output for arguments [31]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
]]></exceptionString>
  </Command>
  <Command __id="3218" _type="ExceptionCommand" date="Wed Sep 09 08:59:18 EDT 2020" starttimestamp="1599653169283" timestamp="3188729" type="Exception">
    <exceptionString><![CDATA[50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
java.lang.AssertionError: 15 tests passed out of 16%0.9375
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at grader.basics.junit.BasicJUnitUtils.assertTrue(BasicJUnitUtils.java:43)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:113)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:98)
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:282)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.testAll(AGradableJUnitSuite.java:254)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testAll(AGradableJUnitTopLevelSuite.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:631)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3973)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4489)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2764)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Test Failed:15 tests passed out of 16%0.9375
Steps traced since last test:

File does not exist:C:\Users\ajwortas\OneDrive\Comp_524_Grading\Assignment1\.\Logs\LocalChecks\CheckStyle_All.csv
java.lang.NullPointerException
	at grader.basics.project.BasicProject.findCheckstyleOutputParentFolder(BasicProject.java:780)
	at grader.basics.project.BasicProject.createFullCheckStyleOutputFileName(BasicProject.java:746)
	at grader.basics.project.BasicProject.getCheckStyleOutputFileName(BasicProject.java:763)
	at grader.basics.project.BasicProject.getCheckstyleText(BasicProject.java:873)
	at gradingTools.comp524f20.assignment1.testcases.socialDistance.style.SocialDistanceNoCheckstyleWarnings.test(SocialDistanceNoCheckstyleWarnings.java:52)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:108)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:98)
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:282)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.testAll(AGradableJUnitSuite.java:254)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testAll(AGradableJUnitTopLevelSuite.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:631)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3973)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4489)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2764)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Test Failed:java.lang.NullPointerException null%0.0
Steps traced since last test:

]]></exceptionString>
  </Command>
  <Command __id="3219" _type="EHExceptionCommand" date="Wed Sep 09 08:59:52 EDT 2020" starttimestamp="1599653169283" timestamp="3222811" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@3d8b9eaa . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
]]></outputString>
  </Command>
  <Command __id="3220" _type="EHExceptionCommand" date="Wed Sep 09 08:59:52 EDT 2020" starttimestamp="1599653169283" timestamp="3222881" type="Exception">
    <outputString><![CDATA[29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3221" _type="EHExceptionCommand" date="Wed Sep 09 08:59:54 EDT 2020" starttimestamp="1599653169283" timestamp="3224764" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@faf4b8e . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3222" _type="EHExceptionCommand" date="Wed Sep 09 08:59:55 EDT 2020" starttimestamp="1599653169283" timestamp="3225795" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@ccdb487 . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3223" _type="EHExceptionCommand" date="Wed Sep 09 08:59:55 EDT 2020" starttimestamp="1599653169283" timestamp="3226695" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@27af84e4 . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3224" _type="EHExceptionCommand" date="Wed Sep 09 08:59:56 EDT 2020" starttimestamp="1599653169283" timestamp="3227414" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@9cd3d60 . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
]]></outputString>
  </Command>
  <Command __id="3225" _type="EHExceptionCommand" date="Wed Sep 09 08:59:56 EDT 2020" starttimestamp="1599653169283" timestamp="3227524" type="Exception">
    <outputString><![CDATA[101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3226" _type="EHExceptionCommand" date="Wed Sep 09 08:59:57 EDT 2020" starttimestamp="1599653169283" timestamp="3228264" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@4977ec2e . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3227" _type="EHExceptionCommand" date="Wed Sep 09 08:59:58 EDT 2020" starttimestamp="1599653169283" timestamp="3228918" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@2d536332 . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3228" _type="EHExceptionCommand" date="Wed Sep 09 09:00:08 EDT 2020" starttimestamp="1599653169283" timestamp="3239227" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@1a9879ed . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3229" _type="EHExceptionCommand" date="Wed Sep 09 09:00:09 EDT 2020" starttimestamp="1599653169283" timestamp="3240384" type="Exception">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment1.testcases.socialDistance.utility.PrintSafeDistancesAndDurationsTest@5fdcb7f7 . Results may change.
9,[{6,30},{13,120}]
0,[{6,30},{13,120}]
5,[{6,30},{13,120}]
10,[{6,30},{13,120}]
11,[{13,30},{27,120},{6,15}]
29,[{13,30},{27,120},{6,15}]
17,[{13,30},{27,120},{6,15}]
30,[{13,30},{27,120},{6,15}]
31,[{27,30},{13,15}]
49,[{27,30},{13,15}]
41,[{27,30},{13,15}]
50,[{27,30},{13,15}]
51,[]
70,[]
101,[]
2147483647,[]
]]></outputString>
  </Command>
  <Command __id="3230" _type="ShellCommand" date="Wed Sep 09 09:00:15 EDT 2020" starttimestamp="1599653169283" timestamp="3245844" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3231" _type="RunCommand" date="Wed Sep 09 09:00:15 EDT 2020" kind="HitBreakPoint" projectName="Assignment1" starttimestamp="1599653169283" timestamp="3246044" type="Run" />
  <Command __id="3232" _type="RunCommand" date="Wed Sep 09 09:00:15 EDT 2020" kind="HitBreakPoint" projectName="Assignment1" starttimestamp="1599653169283" timestamp="3246044" type="Run" />
